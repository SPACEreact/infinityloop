{"file_contents":{"README_chroma_mcp_setup.md":{"content":"# ChromaDB MCP Server Setup and Demo Instructions\n\n## Architecture Overview\n\nThis setup uses a **server-side architecture** where:\n\n- **Server Side (Python/FastAPI)**: Handles all ChromaDB operations via REST API\n- **Client Side (React)**: Only contains UI, makes HTTP requests to server\n\n## Step 1: Install Dependencies\n\n```bash\npip install chromadb fastapi uvicorn pydantic\n```\n\n## Step 2: Start the ChromaDB Server\n\nRun the FastAPI server that exposes ChromaDB operations:\n\n```bash\npython chroma_server.py\n```\n\nThe server will start on `http://localhost:8000` with the following endpoints:\n- `POST /collections/{name}` - Create collection\n- `POST /collections/{name}/documents` - Add documents\n- `POST /collections/{name}/query` - Query documents\n- `GET /collections/{name}` - Get collection info\n- `GET /collections` - List all collections\n\n## Step 3: Test the Server (Optional)\n\nTest the API endpoints:\n\n```bash\n# Create collection\ncurl -X POST http://localhost:8000/collections/test_collection\n\n# Add documents\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"documents\":[\"test doc\"], \"metadatas\":[{\"source\":\"test\"}], \"ids\":[\"id1\"]}' \\\n  http://localhost:8000/collections/test_collection/documents\n\n# Query documents\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"query_texts\":[\"test\"], \"n_results\":5}' \\\n  http://localhost:8000/collections/test_collection/query\n```\n\n## Step 4: Run the React App\n\nStart the React development server:\n\n```bash\ncd loop\nnpm run dev\n```\n\nThe React app will connect to the ChromaDB server via the MCP service.\n\n## Step 5: Test Integration\n\nIn the React app, use the \"Save\" button in the control panel to sync project assets to the ChromaDB server.\n\n## Files Overview\n\n- `chroma_server.py` - FastAPI server exposing ChromaDB operations\n- `loop/services/mcpService.ts` - React service making HTTP requests to server\n- `loop/components/Workspace.tsx` - React component using MCP service\n- `bkacbox_mcp_settings.json` - MCP configuration\n\n## Notes\n\n- Data is persisted in the `./chroma_db` directory\n- Server runs on port 8000, React dev server on 5173\n- CORS is configured to allow requests from React app\n- The server name is set to \"github.com/chroma-core/chroma\" in `bkacbox_mcp_settings.json`\n","size_bytes":2251},"app.py":{"content":"from flask import Flask\nfrom src.main import main_bp\n\napp = Flask(__name__)\n\napp.register_blueprint(main_bp)\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=3001, debug=True)\n","size_bytes":190},"chroma_server.py":{"content":"from fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nfrom typing import List, Dict, Any, Optional, Union\nimport chromadb\nimport uvicorn\n\napp = FastAPI(title=\"ChromaDB MCP Server\", description=\"REST API for ChromaDB operations\")\n\n# Add CORS middleware to allow requests from the React app\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\", \"http://localhost:5173\"],  # React dev servers\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Initialize ChromaDB client\nclient = chromadb.PersistentClient(path=\"./chroma_db\")\n\n# Pydantic models for request/response\nclass DocumentData(BaseModel):\n    documents: List[str]\n    metadatas: Optional[List[Dict[str, Any]]] = None\n    ids: List[str]\n\nclass QueryData(BaseModel):\n    query_texts: List[str]\n    n_results: int = 10\n    where: Optional[Dict[str, Any]] = None\n    where_document: Optional[Dict[str, Any]] = None\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"ChromaDB MCP Server is running\"}\n\n@app.post(\"/collections/{collection_name}\")\nasync def create_collection(collection_name: str):\n    \"\"\"Create a new collection\"\"\"\n    try:\n        collection = client.create_collection(name=collection_name)\n        return {\"message\": f\"Collection '{collection_name}' created successfully\"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.post(\"/collections/{collection_name}/documents\")\nasync def add_documents(collection_name: str, data: DocumentData):\n    \"\"\"Add documents to a collection\"\"\"\n    try:\n        collection = client.get_collection(name=collection_name)\n        collection.add(\n            documents=data.documents,\n            metadatas=data.metadatas,\n            ids=data.ids\n        )\n        return {\"message\": f\"Added {len(data.documents)} documents to collection '{collection_name}'\"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.post(\"/collections/{collection_name}/query\")\nasync def query_documents(collection_name: str, query: QueryData):\n    \"\"\"Query documents in a collection\"\"\"\n    try:\n        collection = client.get_collection(name=collection_name)\n        results = collection.query(\n            query_texts=query.query_texts,\n            n_results=query.n_results,\n            where=query.where,\n            where_document=query.where_document\n        )\n        return results\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.get(\"/collections/{collection_name}\")\nasync def get_collection_info(collection_name: str):\n    \"\"\"Get information about a collection\"\"\"\n    try:\n        collection = client.get_collection(name=collection_name)\n        count = collection.count()\n        return {\n            \"name\": collection_name,\n            \"count\": count,\n            \"metadata\": collection.metadata\n        }\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.get(\"/collections\")\nasync def list_collections():\n    \"\"\"List all collections\"\"\"\n    try:\n        collections = client.list_collections()\n        return [{\"name\": c.name, \"id\": c.id} for c in collections]\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n","size_bytes":3428},"demo_chroma_mcp.py":{"content":"import chromadb\nimport time\n\ndef main():\n    # Use local ChromaDB client (no server needed)\n    client = chromadb.Client()\n\n    # Create a collection\n    collection = client.create_collection(\"all-my-documents\")\n\n    # Add documents to the collection\n    collection.add(\n        documents=[\"This is document1\", \"This is document2\"],\n        metadatas=[{\"source\": \"notion\"}, {\"source\": \"google-docs\"}],\n        ids=[\"doc1\", \"doc2\"],\n    )\n\n    # Query 2 most similar results\n    results = collection.query(\n        query_texts=[\"This is a query document\"],\n        n_results=2,\n    )\n\n    print(\"Query results:\")\n    print(results)\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":670},"loop/App.tsx":{"content":"import React, { useState, useCallback } from 'react';\nimport type { Project } from './types';\nimport Workspace from './components/Workspace';\n\nconst App: React.FC = () => {\n  const appLabel = 'Loop';\n\n  // Initialize with empty project\n  const [project, setProject] = useState<Project>({\n    id: 'project-1',\n    name: 'Untitled Project',\n    assets: [],\n    primaryTimeline: {\n      blocks: [],\n      folders: {\n        story: [],\n        image: [],\n        text_to_video: []\n      }\n    },\n    secondaryTimeline: undefined,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  });\n\n  // Global state for Tag Weighting System\n  const [tagWeights, setTagWeights] = useState<Record<string, number>>({});\n  const [styleRigidity, setStyleRigidity] = useState<number>(50);\n  const [isWeightingEnabled, setIsWeightingEnabled] = useState<boolean>(false);\n\n  const handleTagWeightChange = useCallback((tagId: string, newWeight: number) => {\n    setTagWeights(prevWeights => {\n      if (!isWeightingEnabled) {\n        return { ...prevWeights, [tagId]: newWeight };\n      }\n      return { ...prevWeights, [tagId]: newWeight };\n    });\n  }, [isWeightingEnabled]);\n\n  return (\n    <div className=\"min-h-screen font-sans gradient-bg text-gray-100 overflow-y-auto\">\n      <div className=\"gradient-overlay min-h-full\">\n        <Workspace\n          appLabel={appLabel}\n          project={project}\n          setProject={setProject}\n          tagWeights={tagWeights}\n          styleRigidity={styleRigidity}\n          isWeightingEnabled={isWeightingEnabled}\n          onTagWeightChange={handleTagWeightChange}\n          onStyleRigidityChange={setStyleRigidity}\n          onWeightingToggle={setIsWeightingEnabled}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","size_bytes":1761},"loop/TODO.md":{"content":"- [ ] Add state for modal and selections in Workspace.tsx\n- [ ] Add handlers for creating multi-shot and batch style\n- [ ] Add MultiShotCreationModal component\n- [ ] Add button in primary timeline to open modal\n- [ ] Add button in secondary timeline to create shots from master assets\n- [ ] Test the functionality\n","size_bytes":314},"loop/TODO_build_system.md":{"content":"# Build System Implementation TODO\n\n## Completed Tasks\n- [x] Fixed renderMessageContent function definition\n- [x] Removed duplicate buildTypes declaration\n- [x] Added build menu UI with magic wand button\n- [x] Implemented build mode interface with question navigation\n- [x] Added TypeScript typing for buildTypes object\n- [x] Integrated build completion with AI message sending\n\n## Remaining Tasks\n- [ ] Test the build system functionality\n- [ ] Add build system integration with project seeds/assets\n- [ ] Implement build data persistence\n- [ ] Add build templates and customization options\n- [ ] Create build history and management features\n\n## Notes\n- Build system allows users to create structured prompts through guided questionnaires\n- Currently supports 5 build types: StoryBuild, ShotBuild, ImgBuild, VidBuild, EditBuild\n- Each build type has multiple questions organized by sections\n- Build completion sends structured JSON data to the AI for processing\n","size_bytes":963},"loop/TODO_connection_features.md":{"content":"# TODO: Implement Connection Editing and Master Prompt Features\n\n## Completed Tasks\n- [x] Add MASTER_PROMPT constant to constants.ts for batch processing.\n- [x] Modify generateFromWorkspace in geminiService.ts to incorporate master prompt.\n- [x] Add ConnectionDetailsPanel component in Workspace.tsx for editing selected connection.\n- [x] Add handleUpdateConnection function in Workspace.tsx.\n- [x] Integrate ConnectionDetailsPanel into the layout.\n- [x] Update TODO_drag_drop.md if needed (no updates required).\n- [x] Test the new UI elements.\n\n## Summary\nAll connection editing and master prompt features have been successfully implemented:\n\n- MASTER_PROMPT constant added for batch processing guidance\n- generateFromWorkspace updated to use master prompt\n- ConnectionDetailsPanel allows editing connection type (harmony/tension) and harmony level\n- Panel integrates seamlessly with existing UI layout\n- All components are functional and ready for use\n","size_bytes":954},"loop/TODO_constants.md":{"content":"# TODO: Update constants.ts with Expert Knowledge and Guided Builds\n\n- [x] Update BUILDS array with new guided builds: Storybuild, Shotbuild, Imgbuild, Vidbuild\n- [x] Update WORKFLOWS to include the new builds\n- [x] Add detailed psychologically-driven questionnaires for each build type\n- [x] Expand FIELD_OPTIONS with rich cinematic options for expert choices\n- [x] Update ASSET_TEMPLATES to align with timeline metaphor (adjust descriptions and categories)\n- [x] Update MASTER_PROMPT to embed deep filmmaking knowledge base\n","size_bytes":526},"loop/TODO_drag_drop.md":{"content":"# TODO: Implement Node Drag and Drop, Folder Organization, and Question Banks\n\n## Completed Tasks\n- [x] Add drag-and-drop functionality from asset library to canvas\n- [x] Implement connection editing features (ConnectionDetailsPanel, handleUpdateConnection, master prompt integration)\n\n## Pending Tasks\n- [ ] Organize ASSET_TEMPLATES into categories: primary (outputs), secondary (core story), tertiary (technical)\n- [ ] Update AssetLibraryPanel with collapsible folders for each category\n- [ ] Enhance NodeDetailsPanel to parse content into fields with smart UI (dropdowns for options)\n- [ ] Add sidebar options panel for primary nodes (e.g., output type dropdown)\n- [ ] Create secondary and tertiary question banks for non-node questions\n- [ ] Ensure chat-generated nodes maintain question visibility\n- [ ] Make system modular for future additions without breaking app\n","size_bytes":871},"loop/TODO_dropdown_fix.md":{"content":"# Dropdown Options Fix Plan\n\n## Information Gathered\n- FIELD_OPTIONS in constants.ts has two structures:\n  - Simple: { options: [...] } for keys like story_genres, shot_types\n  - Nested: { resolution: [...], frame_rate: [...] } for keys like video_output, image_output\n- Current getFieldOptions in Workspace.tsx has hardcoded mappings that are inconsistent and may not cover all FIELD_OPTIONS\n- User feedback indicates current mapping doesn't match original FIELD_OPTIONS knowledge\n\n## Plan\n- Refactor getFieldOptions function in Workspace.tsx to dynamically and correctly access FIELD_OPTIONS\n- Handle both \"options\" arrays and nested arrays consistently\n- Ensure all dropdowns use correct options from FIELD_OPTIONS\n\n## Dependent Files to Edit\n- Fractured_loop_infinity-main/fractured-loop-v2 (1)/fractured-loop-v2/components/Workspace.tsx\n\n## Followup Steps\n- Test dropdowns in AssetDetailsPanel for correct options\n- Verify UI behavior and consistency\n- Confirm with user that mapping now matches expectations\n\n## Tasks\n- [ ] Refactor getFieldOptions function to properly map field keys to FIELD_OPTIONS\n- [ ] Handle nested FIELD_OPTIONS structures (video_output, image_output, etc.)\n- [ ] Test dropdown functionality in UI\n","size_bytes":1228},"loop/TODO_fix_api_ui.md":{"content":"# TODO: Fix API and UI Issues\n\n## 1. Update Gemini API Service\n- [x] Change text generation endpoint to correct Gemini Pro URL\n- [x] Add retry logic with exponential backoff (up to 3 retries)\n- [x] Improve error handling and logging\n- [x] Verify image generation endpoint and format\n\n## 2. Update Workspace UI Error Handling\n- [ ] Add user-friendly error messages in UI for API failures\n- [ ] Show loading states during API calls\n- [ ] Handle network errors gracefully\n\n## 3. Testing\n- [ ] Run the app locally\n- [ ] Test workspace generation feature\n- [ ] Test chat functionality\n- [ ] Test node details panel\n- [ ] Verify no console errors\n\n## 4. Final Verification\n- [ ] Confirm all API features work\n- [ ] Check UI responsiveness\n- [ ] Ensure no regressions\n","size_bytes":761},"loop/TODO_fix_timeline_errors.md":{"content":"# TODO: Fix TypeScript Errors in Timeline.tsx\n\n## Tasks\n- [x] Update TimelineItem interface in types.ts to include assetId, layerId, startTime, duration\n- [x] Update Timeline.tsx to handle possibly undefined timelineItems in setProject calls\n- [x] Remove unused import Asset from Timeline.tsx\n- [x] Remove unused variable timelineRef from Timeline.tsx\n- [ ] Verify no TypeScript errors remain\n","size_bytes":393},"loop/TODO_implementation.md":{"content":"# Implementation TODO List\n\n## 1. Timeline Drag-Drop Enhancement\n- [ ] Modify Timeline.tsx to accept drag-drop from AssetLibraryPanel\n- [ ] Add drop handlers to timeline tracks and layers\n- [ ] Create timeline items when assets are dropped on tracks\n- [ ] Handle different asset types for appropriate tracks/layers\n\n## 2. Right Sidebar Inspector Panel\n- [ ] Verify NodeDetailsPanel functionality for asset editing\n- [ ] Ensure asset options display correctly based on FIELD_OPTIONS\n- [ ] Test asset content updates and field parsing\n\n## 3. User Guide System\n- [ ] Create new UserGuide.tsx component with tabbed interface\n- [ ] Add tabs for different guide sections (Getting Started, Builds, Timeline, etc.)\n- [ ] Integrate UserGuide into Workspace header or as modal\n- [ ] Populate guide content with helpful information\n\n## 4. Magic Wand Button for Guided Builds\n- [ ] Add magic wand button to ChatAssistant component\n- [ ] Create guided build workflow UI (questionnaire modal)\n- [ ] Integrate with BUILDS from constants.ts\n- [ ] Handle build completion and asset creation\n\n## 5. Workspace Suggestion Button\n- [ ] Add suggestion button to Workspace header\n- [ ] Implement AI-powered recommendations logic\n- [ ] Display suggestions in a panel or modal\n- [ ] Allow users to apply suggestions\n\n## 6. Component Integration and Testing\n- [ ] Ensure all components are properly connected\n- [ ] Test drag-drop workflow from asset creation to timeline\n- [ ] Test AI assistant interactions and guided builds\n- [ ] Verify UI responsiveness and styling\n","size_bytes":1543},"loop/UPDATE_PLAN.md":{"content":"# Fractured Loop Major Update - Detailed Implementation Plan\n\n## 1. Information Gathered\n- The project is an AI-powered visual workspace for filmmakers.\n- Major update involves:\n  - Foundational upgrade with expert guided builds and AI knowledge base.\n  - Complete UI and interaction overhaul to a timeline-based model.\n  - Reintegration and polishing with rich inspector, guided builds, AI workflows, and onboarding clarity.\n- Current codebase includes:\n  - Workspace.tsx: Main canvas, asset library, node and connection management, chat integration.\n  - ChatAssistant.tsx: Chat UI and message handling.\n  - LandingPage.tsx: Onboarding and workflow start UI.\n- Existing TODOs cover chat, drag-drop, node details, and connection editing.\n\n## 2. Detailed File-Level Update Plan\n\n### Phase 1: Foundational Upgrade\n- Enhance guided build questionnaires in ChatAssistant.tsx and related AI service files (geminiService.ts).\n- Upgrade AI core prompt and knowledge base in geminiService.ts.\n- Implement prompt engineering logic in geminiService.ts and Workspace.tsx generate functions.\n\n### Phase 2: Visual & Interaction Overhaul\n- Refactor Workspace.tsx to replace node-graph with horizontal multi-track timeline.\n- Implement Tracks and Layers UI and data structures in Workspace.tsx and new components if needed.\n- Update drag-and-drop to support timeline and layers.\n- Redesign UI with cinematic theme in CSS and component styling (index.css, components).\n\n### Phase 3: Reintegration & Polishing\n- Enhance Inspector Panel UI and logic in Workspace.tsx or new Inspector components.\n- Reimplement guided builds UI trigger (\"magic wand\") in ChatAssistant.tsx or Workspace.tsx.\n- Ensure AI workflows (iterative generation, style seeding, project pulse) are integrated and functional.\n- Add essential UI elements: Exit Project button, tooltips, User Guide tabs.\n- Improve onboarding clarity in LandingPage.tsx.\n\n## 3. Dependent Files to Edit\n- components/Workspace.tsx\n- components/ChatAssistant.tsx\n- components/LandingPage.tsx\n- services/geminiService.ts\n- index.css\n- constants.ts (for new asset categories, prompt tables)\n- Possibly new components for Timeline, Inspector, User Guide\n\n## 4. Follow-up Steps\n- Implement changes phase-wise with testing after each phase.\n- Update TODO.md to reflect progress.\n- Conduct UI/UX review and AI functionality testing.\n- Prepare documentation for new workflows and UI.\n\n---\n\nPlease review this plan and confirm if I should proceed with implementation or if you have any modifications or priorities to add.\n","size_bytes":2543},"loop/build.sh":{"content":"#!/bin/bash\n\n# Ensure the script is executable\nchmod +x build.sh\n\n# Set up error catching and logging\necho \"Starting build process...\"\n\n# Install dependencies with proper error handling\necho \"Installing dependencies...\"\nnpm ci || { echo \"Error: npm ci failed. Check dependencies.\"; exit 1; }\n\n\n\n# Run the build command and catch errors\necho \"Running build script...\"\nnpm run build || { echo \"Error: npm run build failed. Check build script.\"; exit 1; }\n\n# Success message\necho \"Build completed successfully.\"\n","size_bytes":509},"loop/constants.ts":{"content":"import { Build, Workflow } from './types';\n\nexport type TagGroup = string[];\n\nexport type AssetTemplate = {\n  type: 'character' | 'plot_point' | 'scene' | 'image_input' | 'camera_settings' | 'depth_of_field' | 'lighting_setup' | 'color_grading' | 'audio_design' | 'vfx_compositing';\n  name: string;\n  description: string;\n  defaultContent?: string;\n  tags?: string[];\n  category: 'story' | 'visual';\n};\n\nexport const BUILDS: Build[] = [\n  {\n    id: 'storybuild',\n    name: 'Storybuild',\n    description: 'Create compelling narratives with psychological depth using the 7-keyframe emotional structure focusing on Want vs. Need',\n    targetAssetType: 'master_story',\n    questions: [\n      {\n        id: 'genre',\n        text: 'What genre best fits your story?',\n        type: 'dropdown',\n        optionsKey: 'story_genres',\n        required: true\n      },\n      {\n        id: 'tone',\n        text: 'What is the overall tone of your story?',\n        type: 'dropdown',\n        optionsKey: 'story_tones',\n        required: true\n      },\n      {\n        id: 'opening_hook',\n        text: 'How should your story begin?',\n        type: 'dropdown',\n        optionsKey: 'opening_hooks',\n        required: true\n      },\n      {\n        id: 'protagonist_want',\n        text: 'What does your protagonist want? (Their surface-level goal)',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'protagonist_need',\n        text: 'What does your protagonist need? (Their deeper transformation)',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'character_arc',\n        text: 'What type of character arc?',\n        type: 'dropdown',\n        optionsKey: 'character_arc_types',\n        required: true\n      },\n      {\n        id: 'antagonist_force',\n        text: 'What external force opposes the protagonist?',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_1',\n        text: 'Keyframe 1 - Setup: Establish the world, protagonist\\'s want, and initial situation',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_2',\n        text: 'Keyframe 2 - Confrontation: Protagonist faces first challenge, want is threatened',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_3',\n        text: 'Keyframe 3 - Crisis: Major turning point, protagonist questions their want',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_4',\n        text: 'Keyframe 4 - Realization: Protagonist begins to understand their need',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_5',\n        text: 'Keyframe 5 - Climax: Final confrontation with antagonist',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_6',\n        text: 'Keyframe 6 - Resolution: Protagonist achieves need, transforms',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'keyframe_7',\n        text: 'Keyframe 7 - New Beginning: Protagonist enters new world with their transformation',\n        type: 'text',\n        required: true\n      }\n    ]\n  },\n  {\n    id: 'imgbuild',\n    name: 'Imgbuild',\n    description: 'Generate stunning images with AI models like MidJourney using expert prompts',\n    targetAssetType: 'master_image',\n    questions: [\n      {\n        id: 'style_reference',\n        text: 'Reference artists or styles (e.g., \"in the style of Caravaggio\")',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'composition',\n        text: 'Describe the composition and framing',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'lighting_mood',\n        text: 'Lighting and mood description',\n        type: 'text',\n        required: true\n      },\n      {\n        id: 'color_scheme',\n        text: 'Color scheme and palette',\n        type: 'dropdown',\n        optionsKey: 'color_palettes',\n        required: true\n      },\n      {\n        id: 'resolution',\n        text: 'Desired resolution',\n        type: 'dropdown',\n        optionsKey: 'image_resolutions',\n        required: true\n      },\n      {\n        id: 'aspect_ratio',\n        text: 'Aspect ratio',\n        type: 'dropdown',\n        optionsKey: 'aspect_ratios',\n        required: true\n      }\n    ]\n  }\n];\n\nexport const WORKFLOWS: Workflow[] = [\n  {\n    id: 'cinematic_production',\n    name: 'Cinematic Production Workflow',\n    description: 'Complete expert-guided workflow for film production from story to final output',\n    builds: BUILDS.map(build => build.id)\n  }\n];\n\nexport const TAG_GROUPS: Record<string, TagGroup> = {\n  genres: ['Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Thriller', 'War', 'Western'],\n  tones: ['Dark', 'Hopeful', 'Melancholic', 'Uplifting', 'Suspenseful', 'Humorous', 'Intense', 'Serene', 'Nostalgic', 'Energetic', 'Contemplative', 'Chaotic'],\n  techniques: ['Long Take', 'Montage', 'Slow Motion', 'Flashback', 'Non-linear', 'Parallel Action', 'Jump Cut', 'Match Cut', 'Cross-cutting'],\n  styles: ['Realistic', 'Stylized', 'Abstract', 'Minimalist', 'Ornate', 'Noir', 'Expressionist', 'Surreal', 'Documentary', 'Experimental']\n};\n\nexport const ASSET_TEMPLATES: Record<string, AssetTemplate> = {\n  character: {\n    type: 'character',\n    name: 'Character Profile',\n    description: 'Create character assets for timeline tracks, defining traits, arcs, and psychological depth',\n    defaultContent: 'Name: \\nAge: \\nAppearance: \\nPersonality: \\nBackground: \\nGoals (Want): \\nNeeds (Transformation): \\nArc: ',\n    tags: ['character'],\n    category: 'story'\n  },\n  plot_point: {\n    type: 'plot_point',\n    name: 'Plot Point',\n    description: 'Define key events in your timeline that drive the story forward',\n    defaultContent: 'Event: \\nImpact on Protagonist: \\nTiming in Timeline: \\nCharacters involved: \\nEmotional Keyframe: ',\n    tags: ['plot'],\n    category: 'story'\n  },\n  scene: {\n    type: 'scene',\n    name: 'Scene Track',\n    description: 'Build scene tracks with layered shots, characters, and precise timing for your timeline',\n    defaultContent: 'Scene Title: \\nSetting: \\nCharacters: \\nKey Action: \\nEmotional Keyframe: \\nDuration: \\nLayers: ',\n    tags: ['scene'],\n    category: 'story'\n  },\n  image_input: {\n    type: 'image_input',\n    name: 'Style',\n    description: 'Define inputs for image generation and variations',\n    defaultContent: 'Tone: \\nColor Palette: \\nShot Type: \\nStyle Reference: \\nComposition: \\nMood: \\nDuration: \\nLayer: ',\n    tags: ['image', 'input'],\n    category: 'visual'\n  },\n  camera_settings: {\n    type: 'camera_settings',\n    name: 'Camera Settings',\n    description: 'Configure camera parameters for precise cinematic control in your shots',\n    defaultContent: 'Camera Type: \\nFocal Length: \\nAperture: \\nShutter Speed: \\nISO: \\nWhite Balance: \\nSensor Size: \\nCamera Movement: ',\n    tags: ['camera', 'technical'],\n    category: 'visual'\n  },\n  depth_of_field: {\n    type: 'depth_of_field',\n    name: 'Depth of Field (DoF)',\n    description: 'Control focus depth and bokeh effects for visual storytelling',\n    defaultContent: 'Focus Distance: \\nAperture: \\nFocal Length: \\nSensor Size: \\nBokeh Shape: \\nFocus Falloff: \\nDepth of Field / Aperture: ',\n    tags: ['dof', 'focus', 'technical'],\n    category: 'visual'\n  },\n  lighting_setup: {\n    type: 'lighting_setup',\n    name: 'Lighting Setup',\n    description: 'Define lighting conditions and sources for mood and atmosphere',\n    defaultContent: 'Key Light: \\nFill Light: \\nBack Light: \\nAmbient Light: \\nColor Temperature: \\nIntensity Ratios: \\nLighting: \\nLighting Technical Details: ',\n    tags: ['lighting', 'technical'],\n    category: 'visual'\n  },\n  color_grading: {\n    type: 'color_grading',\n    name: 'Color Grading',\n    description: 'Set color correction and grading parameters for visual consistency',\n    defaultContent: 'LUT: \\nContrast: \\nSaturation: \\nBrightness: \\nColor Balance: \\nLift/Gamma/Gain: \\nColor Grading Style: \\nColor Technical Details: \\nFilm Stock / Look: \\nFilm Emulation / Grain: ',\n    tags: ['color', 'grading', 'technical'],\n    category: 'visual'\n  },\n  audio_design: {\n    type: 'audio_design',\n    name: 'Audio Design',\n    description: 'Configure sound design and audio elements for immersive storytelling',\n    defaultContent: 'Background Music: \\nSound Effects: \\nDialogue: \\nMix Levels: \\nReverb: \\nSpatial Audio: ',\n    tags: ['audio', 'sound', 'technical'],\n    category: 'visual'\n  },\n  vfx_compositing: {\n    type: 'vfx_compositing',\n    name: 'VFX Compositing',\n    description: 'Set up visual effects and compositing layers for enhanced visuals',\n    defaultContent: 'Layers: \\nBlending Modes: \\nKeying: \\nTracking: \\nEffects Stack: \\nIntegration: \\nFraming & Composition: \\nCharacter Blocking: \\nTexture / Atmosphere / Effects: ',\n    tags: ['vfx', 'compositing', 'technical'],\n    category: 'visual'\n  }\n};\n\nexport const ALL_TAGS = Object.values(TAG_GROUPS).flat();\n\nexport const MASTER_PROMPT = `You are Fractured Loop Infinity, an expert AI filmmaker with comprehensive knowledge in narrative theory, character psychology, cinematography, editing principles, and AI prompt engineering. Your expertise spans:\n\n**Narrative Theory:**\n- Hero's Journey (Campbell): Departure, Initiation, Return\n- 7-Keyframe Emotional Structure: Setup, Confrontation, Crisis, Realization, Climax, Resolution, New Beginning\n- Harmon Story Circle: Comfort, Want, Need, Adventure, Struggle, Revelation, Transformation\n- Three-Act Structure with Want vs. Need focus\n\n**Character Psychology:**\n- Archetypes: Hero, Mentor, Threshold Guardian, Herald, Shapeshifter, Shadow, Trickster\n- Internal Conflict: Want (surface goal) vs. Need (deep transformation)\n- Subtext and Motivation: What characters say vs. what they mean\n- Character Arcs: Flat, Positive, Negative, Ambiguous\n\n**Cinematography Techniques:**\n- Camera Movements: Pan, Tilt, Tracking, Crane, Dutch Angle, POV\n- Shot Types: WS, MS, CU, ECU, OTS, Establishing, Reaction\n- Lighting Styles: Three-Point, Motivated, High-Key, Low-Key, Chiaroscuro\n- Composition Rules: Rule of Thirds, Leading Lines, Framing, Depth\n\n**Editing Theory:**\n- Walter Murch's Rule of Six: Emotion, Story, Rhythm, Eye Trace, Two-Dimensional Plane of Screen, Three-Dimensional Space of Action\n- Continuity Editing, Montage, Parallel Action, Flashbacks\n- Pacing and Rhythm in Visual Storytelling\n\n**Screenplay Conventions:**\n- Visual Tense: Present tense for action, past for description\n- Formatting: Scene headings, Action lines, Character names, Dialogue, Parentheticals\n- Transitions: CUT TO, FADE IN, DISSOLVE, etc.\n\n**AI Prompt Engineering:**\n- Target Model Optimization: MidJourney (artistic), Sora (video), Veo (realistic video), etc.\n- Prompt Conversion Tables: Translate cinematic concepts to AI parameters\n- Style References and Artist Influences\n- Technical Specifications: Resolution, Aspect Ratio, Frame Rate\n\nWhen generating content, consider the harmony and tension between interconnected assets. Maintain creative integrity while respecting the user's vision. Use psychological depth in character development and cinematic expertise in visual design. Always aim for compelling, coherent storytelling that resonates emotionally.`;\n\n// Field options for smart UI components\nexport type FieldOptionsType = Record<string, Record<string, any>>;\n\nexport const FIELD_OPTIONS: FieldOptionsType = {\n  story_genres: { options: ['Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Thriller', 'War', 'Western'] },\n  story_tones: { options: ['Dark', 'Hopeful', 'Melancholic', 'Uplifting', 'Suspenseful', 'Humorous', 'Intense', 'Serene', 'Nostalgic', 'Energetic', 'Contemplative', 'Chaotic', 'Paranoid', 'Triumphant', 'Bittersweet', 'Foreboding'] },\n  shot_types: { options: ['Extreme Wide Shot (EWS)', 'Wide Shot (WS)', 'Medium Wide Shot (MWS)', 'Medium Shot (MS)', 'Medium Close-Up (MCU)', 'Close-Up (CU)', 'Extreme Close-Up (ECU)', 'Over-the-Shoulder (OTS)', 'Point of View (POV)', 'High Angle', 'Low Angle', 'Dutch Angle', 'Bird\\'s Eye', 'Worm\\'s Eye', 'Establishing Shot', 'Reaction Shot', 'Cutaway'] },\n  style_references: { options: ['1920s Silent Film: Black and white, grainy, with heavy contrast.', '80s Cyberpunk: Neon colors, high-tech aesthetics, and futuristic vibes.', 'Noir-steampunk blend: A mix of dark, moody atmospheres with Victorian steam-powered designs.', 'A24 cinematic: Soft, muted color grading and naturalistic cinematography like in Lady Bird or The Farewell.', 'Comic-book style: High contrast, exaggerated colors, and graphic storytelling.', 'Anime-inspired: Strong, dynamic angles with vibrant colors and dramatic shading.'] },\n  camera_types: { options: ['Arri Alexa 65: Known for its sharpness, ideal for high-end productions.', 'Red Monstro 8K VV: Powerful, versatile camera with a wide color gamut.', 'Sony Venice 2: Provides rich, detailed imagery with cinematic capabilities.', 'IMAX MSM 9802: For breathtaking, ultra-high-definition shots on large screens.', 'Vintage (e.g., Arri 435, Mitchell BNC): Classic cinema look for period pieces.', 'Bolex H16 (1950s): Vintage look, great for indie-style projects with a retro feel.', 'Phantom Flex 4K: High-speed, high-definition, used for slow-motion shots.'] },\n  camera_movements: { options: ['Static', 'Slow Push-In', 'Creep-Out', 'The Moment', 'Distraction', 'The Candidate', 'Pan Left', 'Pan Right', 'Tilt Up', 'Tilt Down', 'Tracking Forward', 'Tracking Backward', 'Crane Up', 'Crane Down', 'Handheld', 'Steadicam', 'Drone', 'Aerial', 'Submersible', 'Tripod Shot'] },\n  lighting_styles: { options: ['Natural Daylight', 'Golden Hour', 'Blue Hour', 'Motivated Lighting', 'Three-Point Lighting', 'High-Key', 'Low-Key', 'Chiaroscuro', 'Silhouette', 'Backlit', 'Rim Light', 'Practical Lighting', 'Studio Lighting', 'Candlelight', 'Neon', 'Firelight', 'Moonlight'] },\n  lighting_technical_details: { options: ['4:1 lighting ratio: High contrast, with a strong light and fill light for shadows.', 'Bloom on highlights: Soft, glowing highlights around bright objects or light sources.', 'Crushed blacks: Dark shadows with little detail, adding mood.', 'Practical lighting sources: Light from objects within the scene, like lamps or streetlights.', 'Bounce lighting: Using reflectors to soften and distribute light evenly across the subject.', 'Hard shadows: Creating defined shadows to enhance shapes and textures.'] },\n  color_palettes: { options: ['Warm (Reds, Oranges)', 'Cool (Blues, Greens)', 'Monochrome', 'Vibrant', 'Muted', 'High Contrast', 'Pastel', 'Sepia', 'Neon', 'Earth Tones', 'Complementary', 'Analogous', 'Teal/Orange', 'Cool/Warm Contrast'] },\n  color_grading_styles: { options: ['Teal & Orange: Popular cinematic look with teal shadows and orange highlights.', 'Desaturated noir: Low saturation with high contrast, perfect for film noir or mystery.', 'Golden glow: Warm, golden tones, used for romantic or nostalgic settings.', 'Hyper-saturated grading: Extremely vivid and vibrant colors, often used for stylized or fantasy looks.', 'Monochrome: Single-tone grading, often used for minimalistic or artsy effects.', 'Vintage faded look: Reduced contrast and desaturated colors, giving the shot an aged feel.'] },\n  color_technical_details: { options: ['Cool background color: #3A5F8F (calm, tranquil blue).', 'Warm foreground tones: #E39B4F (rich, inviting amber).', 'Neutral subject colors: #BFBFBF (soft gray, balanced tones).', 'Accent color: #FF6347 (Tomato red for focal points or highlights).', 'Background gradient: #FF69B4 to #8A2BE2 (Soft gradient of pink and purple for a dreamy feel).'] },\n  framing_composition: { options: ['Rule of thirds: Divide the frame into three equal parts, placing key elements along the lines.', 'Golden ratio: A more organic and visually pleasing version of the rule of thirds.', 'Negative space: Leaving space around the subject, creating an emphasis on isolation or emptiness.', 'Symmetry: Keeping both sides of the frame balanced for a formal, stable feel.', 'Leading lines: Use of lines in the frame to guide the viewer\\'s eye towards the subject.', 'Frame-in-frame: Placing the subject within a larger framing element like a doorway or window.'] },\n  character_blocking: { options: ['Foreground silhouette: The subject is dark against a light background, creating mystery.', 'Side character left mid-ground: A character placed on the left side of the frame, not too close to the foreground or background.', 'Antagonist rear right in shadows: The antagonist lurks in shadows, suggesting secrecy or threat.', 'Group centered with symmetry: A symmetrical group shot where all characters are balanced in the frame.', 'Character with back to camera: A shot where the character faces away, suggesting distance or isolation.', 'Character entering frame: A subject coming into the shot, suggesting progression or movement.'] },\n  texture_atmosphere: { options: ['Volumetric fog: Adds a cinematic feel, particularly in horror or fantasy settings.', 'Floating dust particles: A textured shot, adding a dreamy or nostalgic atmosphere.', 'Rain: A wet, moody effect often used for drama or to enhance suspense.', 'Smoke / haze: Creates a mysterious, cinematic environment.', 'Snow: A soft, atmospheric texture, often used in winter scenes.', 'Lens flare: Light streaks created by shooting directly into bright light sources.'] },\n  film_emulation: { options: ['Kodak 5219 grain: Classic, fine-grain film emulation, used in Dune.', '35mm film grain: Authentic and gritty, giving the shot a real, tangible texture.', 'Filmic contrast: Adds contrast and retains details in highlights and shadows.', '35mm look with grain: For a nostalgic, vintage feel, often used in documentaries or indie films.', 'Black and white grain: Classic film grain in monochrome style for an old-school effect.'] },\n  film_stocks: { options: ['Kodak Vision3 500T 5219: Soft grain, ideal for night shots, used in Dune.', 'Kodak Ektar 100: Bright, saturated colors, good for daylight shots, like in The Secret Life of Walter Mitty.', 'Fujifilm Eterna 250D: Balanced color with a natural feel, similar to Lost in Translation.', 'Ilford HP5: Black and white grainy look, typically used for high-contrast street photography.', 'Kodak Tri-X 400: Classic black and white with high contrast, used in gritty urban scenes.', 'Fujifilm Pro 400H: Soft grain and neutral color reproduction for natural daylight shots.'] },\n  camera_focal_lengths: { options: ['8mm (Fisheye)', '12mm', '16mm', '24mm', '35mm', '50mm', '85mm', '100mm', '135mm', '200mm', '300mm', '400mm (Telephoto)', '600mm'] },\n  camera_apertures: { options: ['f/1.4', 'f/1.8', 'f/2.0', 'f/2.8', 'f/4.0', 'f/5.6', 'f/8.0', 'f/11', 'f/16', 'f/22'] },\n  image_resolutions: { options: ['512x512', '1024x1024', '2048x2048', '4096x4096', 'HD (1280x720)', 'Full HD (1920x1080)', '4K (3840x2160)', '8K (7680x4320)'] },\n  aspect_ratios: { options: ['1:1 (Square)', '4:3 (Standard)', '16:9 (Widescreen)', '21:9 (Ultrawide)', '9:16 (Vertical)', '2.35:1 (Cinemascope)'] },\n  video_pacing: { options: ['Slow and Deliberate', 'Medium Pacing', 'Fast and Dynamic', 'Variable Rhythm', 'Montage Style'] },\n  video_durations: { options: ['5 seconds', '10 seconds', '15 seconds', '30 seconds', '1 minute', '2 minutes', '5 minutes', '10 minutes'] },\n  video_formats: { options: ['720p 24fps', '1080p 24fps', '1080p 30fps', '4K 24fps', '4K 30fps', '8K 24fps'] },\n  video_output: {\n    resolution: ['720p', '1080p', '4K', '8K'],\n    frame_rate: ['24fps', '25fps', '30fps', '60fps', '120fps'],\n    codec: ['H.264', 'H.265', 'VP9', 'AV1', 'ProRes'],\n    format: ['MP4', 'MOV', 'AVI', 'MKV', 'WebM'],\n    bitrate: ['Low', 'Medium', 'High', 'Custom'],\n    color_space: ['sRGB', 'Adobe RGB', 'DCI-P3', 'Rec.709', 'Linear']\n  },\n  image_output: {\n    resolution: ['HD (1280x720)', 'Full HD (1920x1080)', '4K (3840x2160)', '8K (7680x4320)'],\n    format: ['JPEG', 'PNG', 'TIFF', 'EXR', 'WebP'],\n    quality: ['Low', 'Medium', 'High', 'Lossless'],\n    color_space: ['sRGB', 'Adobe RGB', 'DCI-P3', 'Rec.709', 'Linear']\n  },\n  storyboard_output: {\n    layout: ['Grid', 'Timeline', 'Freeform'],\n    style: ['Simple', 'Detailed', 'Storyboard Pro', 'Custom'],\n    annotations: ['None', 'Basic', 'Detailed', 'Technical'],\n    format: ['PDF', 'PNG', 'JPG', 'SVG']\n  },\n  camera_settings: {\n    focal_length: ['8mm', '12mm', '16mm', '24mm', '35mm', '50mm', '85mm', '100mm', '135mm', '200mm', '300mm', '400mm', '600mm'],\n    aperture: ['f/1.4', 'f/1.8', 'f/2.0', 'f/2.8', 'f/4.0', 'f/5.6', 'f/8.0', 'f/11', 'f/16', 'f/22'],\n    shutter_speed: ['1/8000', '1/4000', '1/2000', '1/1000', '1/500', '1/250', '1/125', '1/60', '1/30'],\n    iso: ['50', '100', '200', '400', '800', '1600', '3200', '6400', '12800', '25600']\n  },\n  lighting_setup: {\n    key_light: ['Soft', 'Hard', 'Rim', 'Back', 'Fill', 'Motivated'],\n    color_temperature: ['2700K (Warm)', '3200K (Tungsten)', '4000K (Cool White)', '5000K (Daylight)', '6500K (Cool Daylight)'],\n    intensity: ['Low', 'Medium', 'High', 'Very High']\n  },\n  color_grading: {\n    lut: ['None', 'Film Look', 'Teal/Orange', 'Cool', 'Warm', 'Vintage', 'High Contrast', 'Custom'],\n    contrast: ['Low', 'Medium', 'High', 'Very High'],\n    saturation: ['Desaturated', 'Natural', 'Vibrant', 'Oversaturated']\n  },\n  master_video: {\n    resolution: ['720p', '1080p', '4K', '8K'],\n    frame_rate: ['24fps', '25fps', '30fps', '60fps', '120fps'],\n    codec: ['H.264', 'H.265', 'VP9', 'AV1', 'ProRes'],\n    format: ['MP4', 'MOV', 'AVI', 'MKV', 'WebM'],\n    bitrate: ['Low', 'Medium', 'High', 'Custom'],\n    color_space: ['sRGB', 'Adobe RGB', 'DCI-P3', 'Rec.709', 'Linear']\n  },\n  master_image: {\n    resolution: ['HD (1280x720)', 'Full HD (1920x1080)', '4K (3840x2160)', '8K (7680x4320)'],\n    format: ['JPEG', 'PNG', 'TIFF', 'EXR', 'WebP'],\n    quality: ['Low', 'Medium', 'High', 'Lossless'],\n    color_space: ['sRGB', 'Adobe RGB', 'DCI-P3', 'Rec.709', 'Linear']\n  },\n  character_arc_types: { options: ['Positive Change', 'Flat Character Arc', 'Negative Character Arc'] },\n  opening_hooks: { options: ['Flashback', 'Flash Forward', 'Mid-story', 'Newsreel', 'The Setting', 'Crime Scene', 'Direct Addressing', 'Tragedy', 'A Day in Life', 'Establishing Shot', 'Chasing Sequence'] },\n  subtext_techniques: { options: ['Conflict', 'Silence', 'Ambiguity', 'Contradiction', 'Actions Over Words', 'Context', 'Body Language'] },\n  archetypes: { options: ['Heroes', 'Shadows', 'Mentors', 'Herald', 'Threshold Guardians', 'Shapeshifters', 'Tricksters', 'Allies', 'Woman as Temptress'] },\n  transition_types: { options: ['Cut', 'Fade In', 'Fade Out', 'Dissolve', 'Wipe', 'Iris', 'Match Cut', 'Jump Cut', 'Cross-fade'] },\n  depth_of_field_options: { options: ['Shallow (Subject Isolation)', 'Medium (Natural)', 'Deep (Landscape)', 'Rack Focus', 'Split Diopter'] }\n};\n","size_bytes":23140},"loop/constants.tsx":{"content":"\n\nimport type { Build, Workflow, Question } from './types';\nimport { FilmIcon, DocumentTextIcon, PhotoIcon, VideoCameraIcon, ScissorsIcon } from './components/IconComponents';\n\n// --- V2 Constants (Classic Build System) ---\n\n// FIX: Explicitly type `storyQuestions` as `Question[]` to prevent overly specific type inference, which was causing errors when accessing properties like `options`.\nconst storyQuestions: Question[] = [\n    { id: 'characterName', text: \"Let's start with your protagonist. What is their name, including any nicknames?\", type: 'text' as const },\n    { id: 'characterAge', text: \"How old are they?\", type: 'text' as const },\n    { id: 'characterBackstory', text: \"What is their backstory? What key life events, traumas, or achievements have shaped them?\", type: 'text' as const },\n    { id: 'characterWant', text: \"What is their primary, external goal in this story? (e.g., to win a competition, to find a hidden treasure)\", type: 'text' as const },\n    { id: 'characterNeed', text: \"What do they truly need internally? What lesson must they learn to become whole? (e.g., to learn to trust, to forgive themselves)\", type: 'text' as const },\n    { id: 'characterFlaw', text: \"What is their major character flaw that prevents them from achieving their need? (e.g., arrogance, insecurity, stubbornness)\", type: 'text' as const },\n    { id: 'worldSetting', text: \"Briefly describe the world. What is the tone and setting? (e.g., a gritty, neon-lit cyberpunk city; a whimsical, magical forest)\", type: 'text' as const },\n    { id: 'externalConflict', text: \"What is the primary external conflict? What stands in the protagonist's way? (e.g., a rival corporation, a corrupt government, a monster)\", type: 'text' as const },\n    { id: 'theme', text: \"What is the central theme of the story? (e.g., love conquers all, the corrupting nature of power)\", type: 'text' as const },\n    { id: 'sceneDescription', text: \"Describe the specific action or events of the scene.\", type: 'text' as const },\n];\n\n// FIX: Explicitly type `shotQuestions` as `Question[]` for type consistency and to prevent potential errors.\nconst shotQuestions: Question[] = [\n    { id: 'shotName', text: 'What is a descriptive name for this shot? (e.g., \"Hero\\'s Introduction\", \"Final Confrontation Close-up\")', type: 'text' as const },\n    { id: 'shotType', text: 'What is the shot type or composition?', type: 'option' as const, options: ['Extreme Wide Shot', 'Wide Shot', 'Full Shot', 'Medium Shot', 'Close-up', 'Extreme Close-up', 'Over-the-shoulder', 'POV', 'Dutch Angle'] },\n    { id: 'cameraType', text: 'What camera type are you envisioning?', type: 'option' as const, options: ['Arri Alexa 65', 'RED Monstro 8K VV', 'Sony Venice 2', 'IMAX MSM 9802', '1940s Mitchell BNC', '1990s Arri 435'] },\n    { id: 'focalLength', text: 'What is the focal length of the lens?', type: 'option' as const, options: ['15mm (wide, immersive)', '35mm (cinematic standard)', '50mm (natural human-eye)', '100mm (portrait compression)', '200mm (extreme telephoto)'] },\n    { id: 'dof', text: 'Describe the desired depth of field / aperture.', type: 'option' as const, options: ['f/1.2 (dreamy shallow, creamy bokeh)', 'f/2.8 (cinematic shallow)', 'f/5.6 (balanced sharpness)', 'f/11 (deep focus)'] },\n    { id: 'cameraMovement', text: 'Describe the camera movement.', type: 'text' as const },\n    { id: 'filmStock', text: 'What film stock or look are you going for?', type: 'option' as const, options: ['Kodak Vision3 500T 5219 (Dune)', 'Kodak Ektar 100 (Walter Mitty)', 'Fujifilm Eterna 250D (Lost in Translation)', 'Ilford HP5 (Roma)', 'Technicolor 3-strip (Wizard of Oz)'] },\n    { id: 'lightingStyle', text: 'Describe the lighting style.', type: 'option' as const, options: ['High-key', 'Low-key with dramatic shadows', 'Golden hour', 'Moonlit', 'Window backlighting', 'Tungsten'] },\n    { id: 'colorGrading', text: 'What is the color grading style?', type: 'option' as const, options: ['Teal & Orange', 'Golden glow', 'Desaturated noir', 'Muted earth tones', 'Hyper-saturated'] },\n    { id: 'framing', text: 'Describe the framing and composition rules.', type: 'text' as const },\n    { id: 'characterBlocking', text: 'How are the characters placed or \"blocked\" in the scene?', type: 'text' as const },\n];\n\nconst imageQuestions: any[] = []; // This build is special and doesn't have linear questions.\n\n// FIX: Explicitly type `videoQuestions` as `Question[]` to resolve errors where TypeScript could not guarantee the existence of the `options` property on all elements of the array.\nconst videoQuestions: Question[] = [\n    { id: 'sceneName', text: 'What do you want to call this video scene for tracking purposes?', type: 'text' as const },\n    { id: 'editingPace', text: 'What is the desired editing pace?', type: 'option' as const, options: ['Fast-paced with quick cuts', 'A slow long take', 'Rhythmic match cuts'] },\n];\n\n// FIX: Explicitly type `editQuestions` as `Question[]` for type consistency and to prevent potential errors.\nconst editQuestions: Question[] = [\n    { id: 'feedbackFocus', text: 'What is the primary focus for this editing session?', type: 'text' as const },\n];\n\nexport const BUILDS: Build[] = [\n    { id: 'story', name: 'Storybuild', description: 'Develop characters, plot, and themes for your narrative.', targetAssetType: 'primary', icon: <FilmIcon className=\"w-6 h-6\" title=\"Storybuild\" />, questions: storyQuestions },\n    { id: 'shot', name: 'Shotbuild', description: 'Design the cinematography and visual language for a specific shot.', targetAssetType: 'primary', icon: <DocumentTextIcon className=\"w-6 h-6\" title=\"Shotbuild\" />, questions: shotQuestions },\n    { id: 'image', name: 'Imgbuild', description: 'Generate AI image prompts from your Shotbuild seeds.', targetAssetType: 'secondary', icon: <PhotoIcon className=\"w-6 h-6\" title=\"Imgbuild\" />, questions: imageQuestions },\n    { id: 'video', name: 'Videobuild', description: 'Create a plan for a video sequence, including editing and audio.', targetAssetType: 'secondary', icon: <VideoCameraIcon className=\"w-6 h-6\" title=\"Videobuild\" />, questions: videoQuestions },\n    { id: 'edit', name: 'Edit Report', description: 'Get AI feedback on pacing, visuals, and audio for an edit.', targetAssetType: 'secondary', icon: <ScissorsIcon className=\"w-6 h-6\" title=\"Edit report\" />, questions: editQuestions },\n];\n\nexport const WORKFLOWS: Workflow[] = [\n    { id: 'full-production', name: 'Full Production', description: 'Go from concept to final edit plan, step-by-step.', builds: ['story', 'shot', 'image', 'video', 'edit'] },\n    { id: 'visual-concept', name: 'Visual Concept', description: 'Focus on developing a single, powerful visual moment.', builds: ['shot', 'image'] },\n    { id: 'narrative-short', name: 'Narrative Short', description: 'Flesh out a story and its key shots.', builds: ['story', 'shot'] },\n];\n\nexport const ALL_TAGS = {\n    story: storyQuestions,\n    shot: shotQuestions,\n    video: videoQuestions,\n    edit: editQuestions,\n    image: [], // Image build uses tags from shot build\n};\n\nexport const TAG_GROUPS: Record<string, string[]> = {\n    'Story Layer': [...storyQuestions.map(q => q.id), 'concept'],\n    'Visual Layer': [\n        'shotName',\n        'shotType',\n        'focalLength',\n        'dof',\n        'cameraMovement',\n        'lightingStyle',\n        'colorGrading',\n        'framing',\n        'characterBlocking',\n        'imageRef',\n        'masterStyle',\n        'variantShot',\n    ],\n    'Technical Layer': [\n        'cameraType',\n        'filmStock',\n    ],\n    'Post-Production': [\n        'sceneName',\n        'editingPace',\n        'feedbackFocus',\n    ],\n};\n\n// --- V3 Constants (Quantum Box) ---\n\nexport interface NodeTemplate {\n    type: string;\n    name: string;\n    description: string;\n    category: string;\n    nodeType: 'input' | 'option' | 'text' | 'output';\n    options?: { value: string; label: string; }[];\n}\n\nconst idToName = (id: string) => id.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());\n\nconst questionsToNodeTemplates = (questions: Question[], category: string): Record<string, NodeTemplate> => {\n    return Object.fromEntries(questions.map(q => {\n        const name = idToName(q.id);\n        return [q.id, {\n            type: q.id,\n            name: name,\n            description: `Defines the '${name}' aspect.`,\n            category,\n            nodeType: q.type === 'option' ? 'option' : 'text',\n            options: q.options?.map(o => ({ value: o, label: o }))\n        }];\n    }));\n};\n\n\nexport const NODE_TEMPLATES: Record<string, NodeTemplate> = {\n    // Core\n    promptOutput: { \n        type: 'promptOutput', \n        name: 'AI Prompt Output', \n        description: 'The final destination. Connect planets here and select an output type to generate a result.', \n        category: 'Core', \n        nodeType: 'option',\n        options: [\n            { value: 'image', label: 'Image Prompt' },\n            { value: 'video', label: 'Video Scene Plan' },\n            { value: 'story', label: 'Story Summary' },\n            { value: 'batch', label: 'Batch Image Prompts' },\n        ],\n    },\n    concept: { type: 'concept', name: 'Concept / Word', description: 'A generic node for any core concept, word, or idea.', category: 'Core', nodeType: 'text' },\n    imageRef: { type: 'imageRef', name: 'Image Reference', description: 'Describe a visual reference, style, or existing artwork.', category: 'Shot', nodeType: 'text' },\n    masterStyle: { type: 'masterStyle', name: 'Master Style', description: 'Define the master aesthetic (lighting, color, lens) for a batch of shots.', category: 'Shot', nodeType: 'text' },\n    variantShot: { type: 'variantShot', name: 'Variant Shot', description: 'Describe the subject/action of a single shot in a batch. Connect to a Master Style node.', category: 'Shot', nodeType: 'text' },\n\n    // Story\n    ...questionsToNodeTemplates(storyQuestions, 'Story'),\n    \n    // Shot\n    ...questionsToNodeTemplates(shotQuestions, 'Shot'),\n\n    // Video\n    ...questionsToNodeTemplates(videoQuestions, 'Video'),\n    \n    // Edit\n    ...questionsToNodeTemplates(editQuestions, 'Edit'),\n};\n","size_bytes":10160},"loop/create_repo_instructions.md":{"content":"# Manual GitHub Repository Creation Instructions for \"loop\"\n\nSince the GitHub CLI is not working in your environment, please follow these manual steps to create the public repository \"loop\" and push your current project code.\n\n## Step 1: Create a new repository on GitHub\n\n1. Go to https://github.com/new\n2. Enter \"loop\" as the repository name.\n3. Set the repository to Public.\n4. Do NOT initialize with README, .gitignore, or license.\n5. Click \"Create repository\".\n\n## Step 2: Initialize local git repository and push code\n\nOpen your terminal in the `c:/Users/lenovo/Downloads/loop/Fracturedloopinfinity-main` directory and run the following commands\n```\n\nReplace `YOUR_GITHUB_USERNAME` with your actual GitHub username.\n\n## Step 3: Verify\n\nGo to https://github.com/YOUR_GITHUB_USERNAME/loop to verify your code is pushed.\n\n---\n\nIf you want me to help with any other tasks, please let me know.\n","size_bytes":895},"loop/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@import \"tailwindcss\";\n\n@layer base {\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  :root {\n    /* Pastel color palette for Loop */\n    --background: 330 70% 94%;\n    --foreground: 330 25% 22%;\n    --card: 340 75% 92%;\n    --card-foreground: 330 24% 24%;\n    --popover: 335 68% 93%;\n    --popover-foreground: 330 25% 24%;\n    --primary: 338 82% 72%;\n    --primary-foreground: 338 55% 24%;\n    --secondary: 220 70% 78%;\n    --secondary-foreground: 220 42% 26%;\n    --muted: 328 38% 90%;\n    --muted-foreground: 330 18% 32%;\n    --accent: 20 85% 78%;\n    --accent-foreground: 20 54% 26%;\n    --destructive: 0 68% 76%;\n    --destructive-foreground: 2 55% 24%;\n    --border: 338 52% 84%;\n    --input: 338 50% 88%;\n    --ring: 338 78% 70%;\n    --ink: 330 32% 18%;\n    --timeline-scene: 0 75% 65%;\n    --timeline-scene-surface: 0 75% 92%;\n    --timeline-scene-highlight: 0 75% 96%;\n    --timeline-scene-edge: 0 75% 70%;\n    --timeline-visual: 220 75% 65%;\n    --timeline-visual-surface: 220 75% 92%;\n    --timeline-visual-highlight: 220 75% 96%;\n    --timeline-visual-edge: 220 75% 70%;\n    --timeline-multishot: 120 65% 60%;\n    --timeline-multishot-surface: 120 65% 88%;\n    --timeline-multishot-highlight: 120 65% 94%;\n    --timeline-multishot-edge: 120 65% 65%;\n    --timeline-masterasset: 268 62% 68%;\n    --timeline-masterasset-surface: 268 62% 92%;\n    --timeline-masterasset-highlight: 268 62% 97%;\n    --timeline-masterasset-edge: 268 62% 72%;\n    --timeline-director: 30 85% 65%;\n    --timeline-director-surface: 30 85% 92%;\n    --timeline-director-highlight: 30 85% 96%;\n    --timeline-director-edge: 30 85% 70%;\n    --radius: 1rem;\n  }\n\n  body {\n    background: linear-gradient(\n      135deg,\n      hsl(var(--primary) / 0.35),\n      hsl(var(--secondary) / 0.35),\n      hsl(var(--accent) / 0.35)\n    );\n    color: hsl(var(--foreground));\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    min-height: 100vh;\n    position: relative;\n  }\n\n  /* Comic book halftone dots background */\n  body::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image:\n      radial-gradient(circle, hsl(var(--primary) / 0.75) 1px, transparent 1px),\n      radial-gradient(circle, hsl(var(--secondary) / 0.75) 1px, transparent 1px);\n    background-size: 50px 50px, 70px 70px;\n    background-position: 0 0, 25px 25px;\n    opacity: 0.25;\n    z-index: 0;\n    pointer-events: none;\n  }\n\n  /* Subtle texture overlay */\n  body::after {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' /%3E%3C/filter%3E%3Crect width='100' height='100' filter='url(%23noise)' opacity='0.05'/%3E%3C/svg%3E\");\n    pointer-events: none;\n    z-index: 1;\n  }\n\n  #root {\n    position: relative;\n    z-index: 2;\n  }\n}\n\n@layer components {\n  /* Timeline Track Header */\n  .timeline-track-header {\n    background: hsl(var(--card) / 0.7);\n    backdrop-filter: blur(15px);\n    border-bottom: 2px solid hsl(var(--primary) / 0.45);\n    padding: 18px 24px;\n    font-weight: 600;\n    font-size: 13px;\n    color: hsl(var(--ink));\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    box-shadow: 0 2px 20px hsl(var(--primary) / 0.18);\n    position: relative;\n  }\n\n  /* Comic book accent line */\n  .timeline-track-header::before {\n    content: '';\n    position: absolute;\n    left: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 3px;\n    height: 60%;\n    background: linear-gradient(180deg, hsl(var(--primary)), hsl(var(--secondary)));\n    border-radius: 2px;\n  }\n\n  .timeline-track-header:hover {\n    background: hsl(var(--card) / 0.85);\n    border-bottom-color: hsl(var(--primary) / 0.6);\n    box-shadow: 0 4px 24px hsl(var(--primary) / 0.22);\n  }\n\n  /* Asset Chip - Pastel & Playful */\n  .asset-chip {\n    background: hsl(var(--card) / 0.7);\n    border: 2px solid hsl(var(--primary) / 0.45);\n    border-radius: 20px;\n    padding: 10px 18px;\n    margin: 6px;\n    cursor: pointer;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    font-size: 13px;\n    font-weight: 500;\n    color: hsl(var(--foreground));\n    box-shadow: 0 4px 15px hsl(var(--primary) / 0.2);\n    position: relative;\n    overflow: hidden;\n    backdrop-filter: blur(10px);\n  }\n\n  /* Comic book dots on hover */\n  .asset-chip::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background-image: radial-gradient(circle, hsl(var(--primary) / 0.3) 1px, transparent 1px);\n    background-size: 15px 15px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .asset-chip:hover {\n    background: hsl(var(--card) / 0.9);\n    border-color: hsl(var(--primary) / 0.6);\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px hsl(var(--primary) / 0.3);\n    color: hsl(var(--primary-foreground));\n  }\n\n  .asset-chip:hover::before {\n    opacity: 0.15;\n  }\n\n  .asset-chip.selected {\n    background: linear-gradient(\n      135deg,\n      hsl(var(--primary) / 0.6),\n      hsl(var(--secondary) / 0.6)\n    );\n    border-color: hsl(var(--primary) / 0.7);\n    color: hsl(var(--primary-foreground));\n    box-shadow:\n      0 0 0 2px hsl(var(--ink) / 0.4),\n      0 6px 20px hsl(var(--primary) / 0.35);\n    animation: gentle-pulse 2s ease-in-out infinite;\n  }\n\n  /* Glass modal */\n  .glass-modal-backdrop {\n    position: fixed;\n    inset: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    background: hsl(var(--ink) / 0.38);\n    backdrop-filter: blur(18px);\n    z-index: 1200;\n  }\n\n  .glass-modal {\n    width: min(90vw, 26rem);\n    background: linear-gradient(145deg, hsl(var(--popover) / 0.95), hsl(var(--card) / 0.92));\n    border: 1px solid hsl(var(--border));\n    border-radius: 1.5rem;\n    box-shadow:\n      0 30px 60px hsl(var(--ink) / 0.18),\n      0 0 0 1px hsl(var(--foreground) / 0.08);\n    padding: 2rem;\n    position: relative;\n    color: hsl(var(--foreground));\n  }\n\n  .glass-modal__header {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n  }\n\n  .glass-modal__title {\n    font-size: 1.25rem;\n    font-weight: 700;\n    letter-spacing: 0.02em;\n  }\n\n  .glass-modal__description {\n    margin-top: 0.75rem;\n    color: hsl(var(--foreground) / 0.78);\n    font-size: 0.95rem;\n    line-height: 1.55;\n  }\n\n  .glass-modal__actions {\n    margin-top: 1.75rem;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.75rem;\n    justify-content: flex-end;\n  }\n\n  .modal-button {\n    border-radius: 999px;\n    font-weight: 600;\n    letter-spacing: 0.01em;\n    padding: 0.65rem 1.4rem;\n    border: 1px solid transparent;\n    cursor: pointer;\n    transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease;\n    backdrop-filter: blur(4px);\n  }\n\n  .modal-button--destructive {\n    background: linear-gradient(135deg, hsl(var(--destructive)), hsl(var(--accent)));\n    color: hsl(var(--destructive-foreground));\n    box-shadow: 0 12px 25px hsl(var(--destructive) / 0.32);\n  }\n\n  .modal-button--destructive:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 18px 32px hsl(var(--destructive) / 0.4);\n  }\n\n  .modal-button--ghost {\n    background: hsl(var(--popover) / 0.7);\n    border-color: hsl(var(--border));\n    color: hsl(var(--foreground));\n  }\n\n  .modal-button--ghost:hover {\n    transform: translateY(-1px);\n    background: hsl(var(--popover) / 0.85);\n  }\n\n  .modal-button:focus-visible,\n  .toast-action:focus-visible,\n  .toast-dismiss:focus-visible {\n    outline: none;\n    box-shadow: 0 0 0 3px hsl(var(--primary) / 0.45);\n  }\n\n  /* Toast notifications */\n  .toast-container {\n    position: fixed;\n    bottom: 1.5rem;\n    right: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n    z-index: 1300;\n    pointer-events: none;\n  }\n\n  .toast-notification {\n    pointer-events: auto;\n    min-width: 18rem;\n    max-width: 24rem;\n    padding: 1rem 1.25rem;\n    border-radius: 1.25rem;\n    border: 1px solid hsl(var(--border));\n    background: linear-gradient(150deg, hsl(var(--popover) / 0.92), hsl(var(--card) / 0.94));\n    box-shadow: 0 24px 60px hsl(var(--ink) / 0.18);\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    color: hsl(var(--foreground));\n  }\n\n  .toast-notification[data-kind='warning'] {\n    border-color: hsl(var(--destructive));\n    background: linear-gradient(160deg, hsl(var(--destructive) / 0.18), hsl(var(--popover) / 0.94));\n    box-shadow: 0 24px 65px hsl(var(--destructive) / 0.2);\n  }\n\n  .toast-notification[data-kind='success'] {\n    border-color: hsl(var(--secondary));\n    background: linear-gradient(160deg, hsl(var(--secondary) / 0.18), hsl(var(--card) / 0.94));\n    box-shadow: 0 24px 65px hsl(var(--secondary) / 0.2);\n  }\n\n  .toast-message {\n    flex: 1;\n    font-weight: 500;\n    font-size: 0.95rem;\n  }\n\n  .toast-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n\n  .toast-action {\n    background: transparent;\n    border-radius: 999px;\n    border: 1px solid hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    font-weight: 600;\n    padding: 0.4rem 0.9rem;\n    cursor: pointer;\n    transition: transform 0.2s ease, background-color 0.2s ease, box-shadow 0.2s ease;\n  }\n\n  .toast-action:hover {\n    transform: translateY(-1px);\n    background: hsl(var(--primary) / 0.12);\n    box-shadow: 0 12px 24px hsl(var(--primary) / 0.25);\n  }\n\n  .toast-dismiss {\n    background: hsl(var(--popover) / 0.6);\n    border: 1px solid hsl(var(--border));\n    color: hsl(var(--foreground));\n    border-radius: 999px;\n    width: 2rem;\n    height: 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: transform 0.25s ease, background-color 0.25s ease;\n  }\n\n  .toast-dismiss:hover {\n    background: hsl(var(--popover) / 0.85);\n    transform: rotate(90deg);\n  }\n\n  @media (max-width: 640px) {\n    .toast-container {\n      left: 50%;\n      right: auto;\n      bottom: 1rem;\n      transform: translateX(-50%);\n      width: calc(100% - 2rem);\n      align-items: center;\n    }\n\n    .toast-notification {\n      width: 100%;\n      max-width: 100%;\n    }\n  }\n\n  /* Layer Container - Translucent & Spacious */\n  .layer-container {\n    background: hsl(var(--card) / 0.6);\n    backdrop-filter: blur(12px);\n    border: 2px solid hsl(var(--secondary) / 0.45);\n    border-radius: 16px;\n    margin: 16px 0;\n    padding: 4px;\n    overflow: hidden;\n    box-shadow: 0 4px 20px hsl(var(--secondary) / 0.22);\n    transition: all 0.3s ease;\n  }\n\n  .layer-container:hover {\n    border-color: hsl(var(--secondary) / 0.6);\n    box-shadow: 0 6px 30px hsl(var(--secondary) / 0.28);\n    transform: translateY(-2px);\n  }\n\n  /* Pure CSS Tooltip - Pastel Style */\n  [data-tooltip] {\n    position: relative;\n    cursor: help;\n  }\n\n  [data-tooltip]::before {\n    content: attr(data-tooltip);\n    position: absolute;\n    bottom: calc(100% + 10px);\n    left: 50%;\n    transform: translateX(-50%);\n    background: hsl(var(--card) / 0.95);\n    backdrop-filter: blur(10px);\n    color: hsl(var(--foreground));\n    padding: 10px 16px;\n    border-radius: 12px;\n    font-size: 12px;\n    font-weight: 500;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    z-index: 1000;\n    box-shadow: 0 6px 25px hsl(var(--primary) / 0.35);\n    border: 2px solid hsl(var(--primary) / 0.45);\n  }\n\n  [data-tooltip]::after {\n    content: '';\n    position: absolute;\n    bottom: calc(100% + 2px);\n    left: 50%;\n    transform: translateX(-50%);\n    border: 6px solid transparent;\n    border-top-color: hsl(var(--card) / 0.95);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    z-index: 1000;\n  }\n\n  [data-tooltip]:hover::before,\n  [data-tooltip]:hover::after {\n    opacity: 1;\n    visibility: visible;\n    transform: translateX(-50%) translateY(-5px);\n  }\n\n  [data-tooltip]:hover::after {\n    transform: translateX(-50%) translateY(-3px);\n  }\n\n  /* Atom Spinner - Pastel Colors */\n  .atom-spinner {\n    display: inline-block;\n    position: relative;\n    width: 48px;\n    height: 48px;\n  }\n\n  .atom-spinner-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n\n  .orbit {\n    position: absolute;\n    border: 2px solid hsl(var(--primary) / 0.6);\n    border-radius: 50%;\n    animation: atom-spin 2s linear infinite;\n  }\n\n  .orbit1 {\n    width: 48px;\n    height: 48px;\n    top: 0;\n    left: 0;\n    animation-duration: 2s;\n    border-color: hsl(var(--primary));\n  }\n\n  .orbit2 {\n    width: 36px;\n    height: 36px;\n    top: 6px;\n    left: 6px;\n    animation-duration: 3s;\n    animation-direction: reverse;\n    border-color: hsl(var(--secondary));\n  }\n\n  .orbit3 {\n    width: 24px;\n    height: 24px;\n    top: 12px;\n    left: 12px;\n    animation-duration: 1.5s;\n    border-color: hsl(var(--accent));\n  }\n\n  .core {\n    position: absolute;\n    top: 18px;\n    left: 18px;\n    width: 12px;\n    height: 12px;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));\n    border-radius: 50%;\n    box-shadow: 0 0 15px hsl(var(--primary) / 0.45);\n  }\n\n  /* Comic book decorative lines */\n  .comic-accent {\n    position: fixed;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  .comic-accent::before,\n  .comic-accent::after {\n    content: '';\n    position: absolute;\n    background: hsl(var(--primary) / 0.2);\n    border-radius: 2px;\n  }\n\n  .comic-accent-1 {\n    top: 15%;\n    right: 8%;\n    width: 80px;\n    height: 80px;\n  }\n\n  .comic-accent-1::before {\n    width: 100%;\n    height: 3px;\n    top: 0;\n    transform: rotate(-45deg);\n  }\n\n  .comic-accent-1::after {\n    width: 100%;\n    height: 3px;\n    bottom: 0;\n    transform: rotate(45deg);\n  }\n\n  .comic-accent-2 {\n    bottom: 20%;\n    left: 10%;\n    width: 60px;\n    height: 60px;\n  }\n\n  .comic-accent-2::before {\n    width: 3px;\n    height: 100%;\n    left: 0;\n    transform: rotate(30deg);\n    background: hsl(var(--secondary) / 0.2);\n  }\n\n  .comic-accent-2::after {\n    width: 3px;\n    height: 100%;\n    right: 0;\n    transform: rotate(-30deg);\n    background: hsl(var(--secondary) / 0.2);\n  }\n}\n\n@keyframes gentle-pulse {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  50% {\n    transform: scale(1.02);\n    opacity: 0.95;\n  }\n}\n\n@keyframes atom-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@layer utilities {\n  .bg-gray-900 {\n    background: transparent !important;\n  }\n\n  .text-white {\n    color: hsl(var(--foreground)) !important;\n  }\n}\n\n/* Custom scrollbar - Hidden */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 0;\n}\n.custom-scrollbar {\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n/* Soft pastel gradient backgrounds */\n.gradient-bg {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--primary) / 0.35),\n    hsl(var(--secondary) / 0.35),\n    hsl(var(--accent) / 0.35)\n  );\n  position: relative;\n}\n\n.gradient-overlay {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--primary) / 0.15) 0%,\n    hsl(var(--secondary) / 0.15) 50%,\n    hsl(var(--accent) / 0.15) 100%\n  );\n}\n\n/* Glass morphism effect - Pastel translucent */\n.glass-card {\n  background: hsl(var(--card) / 0.75);\n  backdrop-filter: blur(15px);\n  border: 2px solid hsl(var(--primary) / 0.35);\n  box-shadow:\n    0 8px 32px hsl(var(--primary) / 0.2),\n    inset 0 1px 0 hsl(var(--card) / 0.8);\n  border-radius: 20px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n}\n\n/* Comic dots on cards */\n.glass-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: radial-gradient(circle, hsl(var(--primary) / 0.2) 1px, transparent 1px);\n  background-size: 20px 20px;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  border-radius: 20px;\n  pointer-events: none;\n}\n\n.glass-card:hover {\n  background: hsl(var(--card) / 0.9);\n  border: 2px solid hsl(var(--primary) / 0.5);\n  transform: translateY(-6px);\n  box-shadow:\n    0 16px 48px hsl(var(--primary) / 0.3),\n    inset 0 1px 0 hsl(var(--card) / 0.9);\n}\n\n.glass-card:hover::before {\n  opacity: 1;\n}\n\n/* Button enhancements - Soft pastels */\n.btn-primary {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--primary) / 0.7) 0%,\n    hsl(var(--secondary) / 0.7) 100%\n  );\n  backdrop-filter: blur(10px);\n  border: 2px solid hsl(var(--primary) / 0.45);\n  box-shadow:\n    0 4px 20px hsl(var(--primary) / 0.25),\n    inset 0 1px 0 hsl(var(--card) / 0.7);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n  border-radius: 16px;\n  color: hsl(var(--primary-foreground));\n  font-weight: 600;\n}\n\n.btn-primary::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, hsl(var(--card) / 0.3), transparent);\n  transition: left 0.6s ease;\n}\n\n.btn-primary:hover::before {\n  left: 100%;\n}\n\n.btn-primary:hover {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--primary) / 0.85) 0%,\n    hsl(var(--secondary) / 0.85) 100%\n  );\n  transform: translateY(-3px);\n  box-shadow:\n    0 8px 30px hsl(var(--primary) / 0.4),\n    inset 0 1px 0 hsl(var(--card) / 0.85);\n  border-color: hsl(var(--primary) / 0.6);\n}\n\n.btn-secondary {\n  background: hsl(var(--card) / 0.55);\n  border: 2px solid hsl(var(--secondary) / 0.35);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 16px;\n  color: hsl(var(--foreground));\n  font-weight: 500;\n}\n\n.btn-secondary:hover {\n  background: hsl(var(--card) / 0.75);\n  border: 2px solid hsl(var(--secondary) / 0.5);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 24px hsl(var(--secondary) / 0.25);\n  color: hsl(var(--secondary-foreground));\n}\n\n/* Icon container enhancements - Pastel */\n.icon-container {\n  background: hsl(var(--card) / 0.55);\n  border: 2px solid hsl(var(--primary) / 0.35);\n  box-shadow:\n    0 4px 16px hsl(var(--primary) / 0.2),\n    inset 0 1px 0 hsl(var(--card) / 0.7);\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.icon-container:hover {\n  background: hsl(var(--card) / 0.75);\n  border-color: hsl(var(--primary) / 0.5);\n  transform: scale(1.05);\n}\n\n/* Animated elements */\n.fade-in {\n  animation: fadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.slide-up {\n  animation: slideUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.float {\n  animation: float 6s ease-in-out infinite;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-12px);\n  }\n}\n\n@keyframes pulseGlow {\n  0%, 100% {\n    filter: drop-shadow(0 0 20px hsl(var(--primary) / 0.4));\n  }\n  50% {\n    filter: drop-shadow(0 0 30px hsl(var(--primary) / 0.6));\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n/* Soft glow effects - Pastel colors */\n.glow-indigo {\n  filter: drop-shadow(0 0 20px hsl(var(--secondary) / 0.4));\n}\n\n.glow-fuchsia {\n  filter: drop-shadow(0 0 20px hsl(var(--primary) / 0.4));\n}\n\n.glow-amber {\n  filter: drop-shadow(0 0 20px hsl(var(--accent) / 0.4));\n}\n\n.glow-pink {\n  filter: drop-shadow(0 0 20px hsl(var(--primary) / 0.5));\n}\n\n/* Text enhancements - Pastel gradients */\n.text-gradient {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--foreground) / 0.85) 0%,\n    hsl(var(--ink) / 0.85) 100%\n  );\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n.text-gradient-accent {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--primary) / 0.85) 0%,\n    hsl(var(--secondary) / 0.85) 50%,\n    hsl(var(--accent) / 0.85) 100%\n  );\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n/* Comic book decorative lines */\n.comic-lines {\n  position: relative;\n}\n\n.comic-lines::before,\n.comic-lines::after {\n  content: '';\n  position: absolute;\n  background: hsl(var(--primary) / 0.2);\n  border-radius: 2px;\n  pointer-events: none;\n}\n\n.comic-lines::before {\n  width: 100%;\n  height: 3px;\n  top: -10px;\n  left: 0;\n  transform: rotate(-2deg);\n}\n\n.comic-lines::after {\n  width: 100%;\n  height: 3px;\n  bottom: -10px;\n  left: 0;\n  transform: rotate(2deg);\n}\n\n/* Soft shadow variations */\n.shadow-pastel-sm {\n  box-shadow: 0 2px 8px hsl(var(--primary) / 0.18);\n}\n\n.shadow-pastel-md {\n  box-shadow: 0 4px 16px hsl(var(--primary) / 0.22);\n}\n\n.shadow-pastel-lg {\n  box-shadow: 0 8px 32px hsl(var(--primary) / 0.28);\n}\n\n.shadow-pastel-xl {\n  box-shadow: 0 12px 48px hsl(var(--primary) / 0.32);\n}\n\n/* Layered depth effect */\n.layered-card {\n  position: relative;\n}\n\n.layered-card::before {\n  content: '';\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: -8px;\n  bottom: -8px;\n  background: linear-gradient(135deg, hsl(var(--secondary) / 0.2), hsl(var(--accent) / 0.2));\n  border-radius: 20px;\n  z-index: -1;\n  filter: blur(8px);\n}\n\n/* Breathing animation for subtle life */\n.breathe {\n  animation: breathe 4s ease-in-out infinite;\n}\n\n@keyframes breathe {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.02);\n    opacity: 0.95;\n  }\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .glass-card {\n    border-radius: 16px;\n    backdrop-filter: blur(12px);\n  }\n  .btn-primary, .btn-secondary {\n    border-radius: 12px;\n  }\n  .icon-container {\n    border-radius: 16px;\n  }\n  .layered-card::before {\n    top: 4px;\n    left: 4px;\n    right: -4px;\n    bottom: -4px;\n  }\n}\n\n/* Ensure all content is above background layers */\n#root, .app-container, main, section, article, div[role=\"main\"] {\n  position: relative;\n  z-index: 2;\n}\n\n/* Smooth transitions for interactive elements */\n* {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\nbutton, a, [role=\"button\"] {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Focus states - Pastel style */\nbutton:focus-visible,\na:focus-visible,\ninput:focus-visible,\ntextarea:focus-visible {\n  outline: 2px solid hsl(var(--primary) / 0.6);\n  outline-offset: 2px;\n  box-shadow: 0 0 0 4px hsl(var(--primary) / 0.25);\n}\n\n/* Workspace surface + typography tokens */\n.ink-strong {\n  color: hsl(var(--ink));\n}\n\n.ink-subtle {\n  color: hsl(var(--muted-foreground));\n}\n\n.ink-primary {\n  color: hsl(var(--primary-foreground));\n}\n\n.panel-surface {\n  background-color: hsl(var(--card) / 0.72);\n  border: 1px solid hsl(var(--border));\n  color: hsl(var(--ink));\n  backdrop-filter: blur(18px);\n}\n\n.panel-surface-strong {\n  background-color: hsl(var(--card));\n  border: 1px solid hsl(var(--ring) / 0.5);\n  color: hsl(var(--ink));\n}\n\n.panel-section {\n  background: hsl(var(--card) / 0.65);\n  border: 1px solid hsl(var(--border));\n  border-radius: 18px;\n  transition: border-color 0.2s ease, box-shadow 0.3s ease, transform 0.3s ease;\n}\n\n.panel-section:hover {\n  border-color: hsl(var(--ring));\n  box-shadow: 0 18px 45px hsl(var(--primary) / 0.22);\n  transform: translateY(-2px);\n}\n\n.panel-input,\n.panel-input input,\n.panel-input textarea,\n.panel-input select {\n  background-color: hsl(var(--input) / 0.85);\n  border: 1px solid transparent;\n  border-radius: 12px;\n  color: hsl(var(--ink));\n  transition: border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n.panel-input input::placeholder,\n.panel-input textarea::placeholder {\n  color: hsl(var(--muted-foreground));\n}\n\n.panel-input:focus-within,\n.panel-input input:focus,\n.panel-input textarea:focus,\n.panel-input select:focus {\n  outline: none;\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 3px hsl(var(--ring) / 0.35);\n}\n\n.folder-toggle {\n  color: hsl(var(--ink));\n  transition: color 0.2s ease, transform 0.2s ease;\n}\n\n.folder-toggle:hover {\n  color: hsl(var(--primary-foreground));\n  transform: translateX(4px);\n}\n\n.asset-card {\n  background: hsl(var(--card) / 0.65);\n  border: 1px solid hsl(var(--border));\n  border-radius: 16px;\n  color: hsl(var(--ink));\n  transition: transform 0.25s ease, box-shadow 0.25s ease, border-color 0.2s ease;\n}\n\n/* Chat assistant theme */\n.chat-pane {\n  background: linear-gradient(165deg, hsl(var(--card) / 0.82), hsl(var(--muted) / 0.7));\n  border: 1px solid hsl(var(--border));\n  border-radius: 24px;\n  box-shadow: 0 28px 60px hsl(var(--ink) / 0.18);\n  backdrop-filter: blur(24px);\n  color: hsl(var(--foreground));\n}\n\n.chat-thread {\n  background: linear-gradient(180deg, hsl(var(--card) / 0.92), hsl(var(--muted) / 0.75));\n  border-radius: 20px;\n  box-shadow: inset 0 0 0 1px hsl(var(--border) / 0.6);\n}\n\n.chat-footer {\n  background: linear-gradient(150deg, hsl(var(--card) / 0.94), hsl(var(--muted) / 0.82));\n  border-top: 1px solid hsl(var(--border));\n  border-radius: 0 0 24px 24px;\n  box-shadow: inset 0 8px 24px hsl(var(--ink) / 0.08);\n  backdrop-filter: blur(18px);\n}\n\n.chat-avatar {\n  background: radial-gradient(circle at 30% 30%, hsl(var(--chat-accent, var(--primary)) / 0.9), hsl(var(--chat-highlight, var(--secondary)) / 0.75));\n  border: 1px solid hsl(var(--ink) / 0.15);\n  box-shadow: 0 12px 30px hsl(var(--chat-accent, var(--primary)) / 0.35);\n  color: hsl(var(--ink));\n}\n\n.chat-avatar--user {\n  background: linear-gradient(145deg, hsl(var(--ink) / 0.85), hsl(var(--ink) / 0.65));\n  color: hsl(var(--card));\n  box-shadow: 0 12px 28px hsl(var(--ink) / 0.32);\n}\n\n.chat-bubble {\n  background: hsl(var(--card) / 0.92);\n  border: 1px solid hsl(var(--border));\n  border-radius: 20px;\n  box-shadow: 0 16px 38px hsl(var(--ink) / 0.16);\n  color: hsl(var(--foreground));\n  backdrop-filter: blur(16px);\n}\n\n.chat-bubble--user {\n  background: linear-gradient(140deg, hsl(var(--primary) / 0.82), hsl(var(--secondary) / 0.72));\n  border-color: hsl(var(--ink) / 0.18);\n  color: hsl(var(--ink));\n  box-shadow: 0 18px 40px hsl(var(--primary) / 0.28);\n}\n\n.chat-bubble--model {\n  background: linear-gradient(165deg, hsl(var(--card) / 0.96), hsl(var(--muted) / 0.82));\n  border-color: hsl(var(--ring) / 0.5);\n  color: hsl(var(--foreground));\n  box-shadow: 0 20px 44px hsl(var(--primary) / 0.2);\n}\n\n.chat-bubble--meta {\n  background: linear-gradient(165deg, hsl(var(--timeline-master-surface) / 0.95), hsl(var(--timeline-master-highlight) / 0.85));\n  border-color: hsl(var(--timeline-master-edge) / 0.65);\n  color: hsl(var(--ink));\n  box-shadow: 0 18px 40px hsl(var(--timeline-master) / 0.26);\n}\n\n.chat-bubble--generated {\n  border-color: hsl(var(--chat-edge, var(--ring)) / 0.55);\n  box-shadow: 0 20px 48px hsl(var(--chat-accent, var(--primary)) / 0.28);\n}\n\n.chat-output {\n  color: hsl(var(--foreground));\n}\n\n.chat-output-heading {\n  color: hsl(var(--primary) / 0.85);\n  font-weight: 600;\n  letter-spacing: 0.02em;\n}\n\n.chat-output-block {\n  background: linear-gradient(170deg, hsl(var(--card) / 0.96), hsl(var(--muted) / 0.82));\n  border: 1px solid hsl(var(--ring) / 0.4);\n  border-radius: 18px;\n  box-shadow: 0 18px 45px hsl(var(--primary) / 0.24);\n  color: hsl(var(--secondary-foreground));\n}\n\n.chat-output-block code {\n  color: hsl(var(--secondary-foreground));\n}\n\n.chat-feature-surface {\n  --chat-accent: var(--primary);\n  --chat-surface: var(--card);\n  --chat-highlight: var(--muted);\n  --chat-edge: var(--ring);\n  background: linear-gradient(160deg, hsl(var(--chat-surface) / 0.95), hsl(var(--chat-highlight) / 0.9));\n  border: 1px solid hsl(var(--chat-edge) / 0.65);\n  border-radius: 22px;\n  box-shadow: 0 24px 56px hsl(var(--chat-accent) / 0.28);\n  backdrop-filter: blur(20px);\n  color: hsl(var(--ink));\n}\n\n.chat-feature-header {\n  color: hsl(var(--chat-accent));\n}\n\n.chat-feature-description {\n  color: hsl(var(--muted-foreground));\n}\n\n.chat-section-label {\n  color: hsl(var(--chat-accent));\n  letter-spacing: 0.02em;\n  text-transform: uppercase;\n}\n\n.chat-question {\n  color: hsl(var(--foreground));\n}\n\n.chat-label {\n  color: hsl(var(--muted-foreground));\n}\n\n.chat-input {\n  background: hsl(var(--card) / 0.9);\n  border: 1px solid hsl(var(--border));\n  border-radius: 18px;\n  color: hsl(var(--ink));\n  box-shadow: 0 16px 38px hsl(var(--ink) / 0.14);\n  backdrop-filter: blur(16px);\n  transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;\n}\n\n.chat-input::placeholder {\n  color: hsl(var(--muted-foreground));\n}\n\n.chat-input:focus {\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 4px hsl(var(--ring) / 0.3);\n  outline: none;\n}\n\n.chat-input:disabled {\n  background: hsl(var(--muted) / 0.6);\n  color: hsl(var(--muted-foreground));\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n.chat-feature-button {\n  border-radius: 18px;\n  background: linear-gradient(140deg, hsl(var(--chat-accent) / 0.78), hsl(var(--chat-highlight) / 0.72));\n  border: 1px solid hsl(var(--ink) / 0.12);\n  color: hsl(var(--ink));\n  box-shadow: 0 18px 42px hsl(var(--chat-accent) / 0.3);\n  backdrop-filter: blur(16px);\n  transition: transform 0.25s ease, box-shadow 0.25s ease, background 0.25s ease;\n}\n\n.chat-feature-button:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 22px 48px hsl(var(--chat-accent) / 0.35);\n  outline: 2px solid hsl(var(--ink) / 0.2);\n  outline-offset: 2px;\n}\n\n.chat-feature-button:focus-visible {\n  outline: 2px solid hsl(var(--ink));\n  outline-offset: 3px;\n  box-shadow: 0 0 0 5px hsl(var(--chat-accent) / 0.28);\n}\n\n.chat-feature-action {\n  border-radius: 18px;\n  background: linear-gradient(140deg, hsl(var(--chat-accent) / 0.82), hsl(var(--chat-highlight) / 0.75));\n  border: 1px solid hsl(var(--ink) / 0.14);\n  color: hsl(var(--ink));\n  font-weight: 600;\n  box-shadow: 0 22px 48px hsl(var(--chat-accent) / 0.32);\n  backdrop-filter: blur(14px);\n  transition: transform 0.25s ease, box-shadow 0.25s ease;\n}\n\n.chat-feature-action:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 26px 54px hsl(var(--chat-accent) / 0.36);\n}\n\n.chat-feature-action:focus-visible {\n  outline: 2px solid hsl(var(--ink));\n  outline-offset: 3px;\n  box-shadow: 0 0 0 5px hsl(var(--chat-accent) / 0.3);\n}\n\n.chat-feature-action:disabled {\n  background: hsl(var(--chat-surface) / 0.65);\n  color: hsl(var(--muted-foreground));\n  box-shadow: none;\n  cursor: not-allowed;\n  opacity: 0.65;\n}\n\n.chat-feature-secondary {\n  border-radius: 18px;\n  background: hsl(var(--chat-surface) / 0.9);\n  border: 1px solid hsl(var(--chat-edge) / 0.55);\n  color: hsl(var(--ink));\n  box-shadow: 0 18px 40px hsl(var(--chat-accent) / 0.25);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.chat-feature-secondary:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 22px 46px hsl(var(--chat-accent) / 0.3);\n}\n\n.chat-feature-secondary:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n.chat-close-button {\n  color: hsl(var(--muted-foreground));\n  transition: color 0.2s ease, transform 0.2s ease;\n}\n\n.chat-close-button:hover {\n  color: hsl(var(--ink));\n  transform: rotate(4deg);\n  text-shadow: 0 0 12px hsl(var(--chat-accent, var(--primary)) / 0.45);\n}\n\n.chat-close-button:focus-visible {\n  outline: 2px solid hsl(var(--ink));\n  outline-offset: 2px;\n}\n\n.chat-icon-button {\n  align-items: center;\n  background: transparent;\n  border-radius: 9999px;\n  border: 1px solid transparent;\n  color: hsl(var(--muted-foreground));\n  display: inline-flex;\n  justify-content: center;\n  transition: transform 0.2s ease, box-shadow 0.2s ease, color 0.2s ease, background 0.2s ease;\n}\n\n.chat-icon-button:hover:not(:disabled) {\n  background: hsl(var(--chat-accent, var(--primary)) / 0.18);\n  color: hsl(var(--chat-accent, var(--primary)));\n  box-shadow: 0 12px 32px hsl(var(--chat-accent, var(--primary)) / 0.28);\n  outline: 1px solid hsl(var(--ink) / 0.25);\n}\n\n.chat-icon-button:focus-visible {\n  outline: 2px solid hsl(var(--ink));\n  outline-offset: 2px;\n  box-shadow: 0 0 0 4px hsl(var(--chat-accent, var(--primary)) / 0.25);\n}\n\n.chat-icon-button:disabled {\n  cursor: not-allowed;\n  opacity: 0.5;\n  box-shadow: none;\n}\n\n.chat-meta {\n  color: hsl(var(--muted-foreground));\n}\n\n.asset-card:hover {\n  border-color: hsl(var(--ring));\n  box-shadow: 0 16px 35px hsl(var(--accent) / 0.28);\n  transform: translateY(-3px);\n}\n\n.asset-card .asset-meta {\n  color: hsl(var(--muted-foreground));\n}\n\n.dropdown-trigger {\n  background: hsl(var(--card) / 0.9);\n  border: 1px solid hsl(var(--border));\n  border-radius: 12px;\n  color: hsl(var(--ink));\n  cursor: pointer;\n  transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;\n}\n\n.dropdown-trigger:hover,\n.dropdown-trigger:focus-visible {\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 3px hsl(var(--ring) / 0.3);\n}\n\n.dropdown-placeholder {\n  color: hsl(var(--muted-foreground));\n}\n\n.dropdown-icon {\n  color: hsl(var(--muted-foreground));\n}\n\n.dropdown-menu {\n  background: hsl(var(--card));\n  border: 1px solid hsl(var(--border));\n  border-radius: 14px;\n  box-shadow: 0 18px 40px hsl(var(--ink) / 0.18);\n  overflow: hidden;\n}\n\n.dropdown-search {\n  background: hsl(var(--input));\n  border: 1px solid transparent;\n  border-radius: 12px;\n  color: hsl(var(--ink));\n}\n\n.dropdown-search:focus {\n  outline: none;\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 3px hsl(var(--ring) / 0.25);\n}\n\n.dropdown-option {\n  color: hsl(var(--ink));\n  transition: background 0.2s ease, color 0.2s ease, padding-left 0.2s ease;\n}\n\n.dropdown-option:hover {\n  background: hsl(var(--accent) / 0.25);\n  padding-left: 1.1rem;\n}\n\n.dropdown-option.is-active {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.9) 0%, hsl(var(--accent) / 0.85) 100%);\n  color: hsl(var(--ink));\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.35);\n}\n\n.dropdown-empty {\n  color: hsl(var(--muted-foreground));\n}\n\n.badge-accent {\n  background: linear-gradient(120deg, hsl(var(--primary) / 0.9) 0%, hsl(var(--accent) / 0.85) 100%);\n  border: 1px solid hsl(var(--ring));\n  color: hsl(var(--ink));\n  border-radius: 9999px;\n  box-shadow: 0 10px 25px hsl(var(--primary) / 0.3);\n}\n\n.cta-button {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.95) 0%, hsl(var(--accent) / 0.9) 100%);\n  border: 1px solid hsl(var(--ring));\n  border-radius: 16px;\n  color: hsl(var(--ink));\n  font-weight: 700;\n  letter-spacing: 0.01em;\n  box-shadow: 0 20px 35px hsl(var(--accent) / 0.28);\n  transition: transform 0.25s ease, box-shadow 0.25s ease, filter 0.25s ease;\n}\n\n.cta-button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 26px 45px hsl(var(--accent) / 0.38);\n  filter: brightness(1.02);\n}\n\n.cta-button:disabled,\n.cta-button.is-disabled {\n  background: hsl(var(--muted) / 0.75);\n  border-color: hsl(var(--border));\n  box-shadow: none;\n  color: hsl(var(--muted-foreground));\n  cursor: not-allowed;\n}\n\n.toggle-track {\n  background: hsl(var(--muted) / 0.6);\n  border: 1px solid hsl(var(--border));\n  transition: background 0.2s ease, border-color 0.2s ease;\n}\n\n.toggle-track.switch-on {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.9) 0%, hsl(var(--accent) / 0.8) 100%);\n  border-color: hsl(var(--ring));\n}\n\n.toggle-thumb {\n  background: hsl(var(--card));\n  box-shadow: 0 4px 12px hsl(var(--ink) / 0.25);\n  transition: transform 0.2s ease;\n}\n\n.panel-helper {\n  color: hsl(var(--muted-foreground));\n}\n\n.timeline-variant {\n  --timeline-surface: var(--card);\n  --timeline-surface-strong: var(--card);\n  --timeline-border-color: var(--border);\n  --timeline-glow: var(--ring);\n  --timeline-badge: var(--primary);\n  --timeline-badge-alt: var(--accent);\n}\n\n.timeline-variant--story {\n  --timeline-surface: var(--timeline-story-surface);\n  --timeline-surface-strong: var(--timeline-story-highlight);\n  --timeline-border-color: var(--timeline-story-edge);\n  --timeline-glow: var(--timeline-story);\n  --timeline-badge: var(--timeline-story);\n  --timeline-badge-alt: var(--accent);\n}\n\n.timeline-variant--image {\n  --timeline-surface: var(--timeline-image-surface);\n  --timeline-surface-strong: var(--timeline-image-highlight);\n  --timeline-border-color: var(--timeline-image-edge);\n  --timeline-glow: var(--timeline-image);\n  --timeline-badge: var(--timeline-image);\n  --timeline-badge-alt: var(--secondary);\n}\n\n.timeline-variant--style {\n  --timeline-surface: var(--timeline-style-surface);\n  --timeline-surface-strong: var(--timeline-style-highlight);\n  --timeline-border-color: var(--timeline-style-edge);\n  --timeline-glow: var(--timeline-style);\n  --timeline-badge: var(--timeline-style);\n  --timeline-badge-alt: var(--accent);\n}\n\n.timeline-variant--master {\n  --timeline-surface: var(--timeline-master-surface);\n  --timeline-surface-strong: var(--timeline-master-highlight);\n  --timeline-border-color: var(--timeline-master-edge);\n  --timeline-glow: var(--timeline-master);\n  --timeline-badge: var(--timeline-master);\n  --timeline-badge-alt: var(--secondary);\n}\n\n.timeline-variant--director {\n  --timeline-surface: var(--timeline-director-surface);\n  --timeline-surface-strong: var(--timeline-director-highlight);\n  --timeline-border-color: var(--timeline-director-edge);\n  --timeline-glow: var(--timeline-director);\n  --timeline-badge: var(--timeline-director);\n  --timeline-badge-alt: var(--timeline-style);\n}\n\n.timeline-tab {\n  background: hsl(var(--timeline-surface) / 0.55);\n  border: 1px solid hsl(var(--timeline-border-color) / 0.6);\n  border-radius: 0.75rem;\n  color: hsl(var(--foreground));\n  box-shadow:\n    inset 0 1px 0 rgba(255, 255, 255, 0.35),\n    0 8px 20px hsl(var(--timeline-glow) / 0.12);\n  backdrop-filter: blur(14px);\n  transition: color 0.2s ease, border-color 0.2s ease, background 0.3s ease, transform 0.3s ease;\n}\n\n.timeline-tab:hover {\n  background: hsl(var(--timeline-surface) / 0.7);\n  border-color: hsl(var(--timeline-border-color));\n  color: hsl(var(--ink));\n  transform: translateY(-1px);\n}\n\n.timeline-tab--active {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--timeline-surface-strong) / 0.95) 0%,\n    hsl(var(--timeline-glow) / 0.9) 100%\n  );\n  border-color: hsl(var(--timeline-glow));\n  color: hsl(var(--ink));\n  box-shadow: 0 24px 45px hsl(var(--timeline-glow) / 0.32);\n}\n\n.timeline-card {\n  background: linear-gradient(\n    150deg,\n    hsl(var(--timeline-surface) / 0.72) 0%,\n    hsl(var(--timeline-surface-strong) / 0.9) 100%\n  );\n  border: 1px solid hsl(var(--timeline-border-color));\n  border-radius: 18px;\n  color: hsl(var(--ink));\n  backdrop-filter: blur(18px);\n  box-shadow:\n    inset 0 1px 0 rgba(255, 255, 255, 0.35),\n    0 12px 32px hsl(var(--timeline-glow) / 0.14);\n  transition: border-color 0.2s ease, box-shadow 0.3s ease, transform 0.3s ease;\n}\n\n.timeline-card:hover {\n  border-color: hsl(var(--timeline-glow));\n  box-shadow: 0 18px 40px hsl(var(--timeline-glow) / 0.28);\n  transform: translateY(-4px);\n}\n\n.timeline-card .timeline-meta {\n  color: hsl(var(--muted-foreground));\n}\n\n.timeline-placeholder {\n  background: hsl(var(--timeline-surface) / 0.35);\n  border: 2px dashed hsl(var(--timeline-border-color));\n  border-radius: 18px;\n  color: hsl(var(--muted-foreground));\n  backdrop-filter: blur(16px);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25);\n  transition: border-color 0.2s ease, background 0.3s ease, color 0.2s ease;\n}\n\n.timeline-placeholder:hover {\n  border-color: hsl(var(--timeline-glow));\n  background: hsl(var(--timeline-surface) / 0.55);\n  color: hsl(var(--ink));\n}\n\n.icon-button-soft {\n  color: hsl(var(--muted-foreground));\n  transition: color 0.2s ease, transform 0.2s ease;\n}\n\n.icon-button-soft:hover {\n  color: hsl(var(--ink));\n  transform: scale(1.05);\n}\n\n.icon-button-destructive {\n  color: hsl(var(--destructive-foreground));\n  transition: color 0.2s ease, transform 0.2s ease;\n}\n\n.icon-button-destructive:hover {\n  color: hsl(var(--destructive));\n  transform: scale(1.1);\n}\n\n.timeline-card--active {\n  border-color: hsl(var(--timeline-glow));\n  background: linear-gradient(\n    140deg,\n    hsl(var(--timeline-surface-strong) / 0.75) 0%,\n    hsl(var(--timeline-glow) / 0.35) 100%\n  );\n  box-shadow: 0 26px 48px hsl(var(--timeline-glow) / 0.28);\n}\n\n.timeline-index {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--timeline-badge) / 0.95) 0%,\n    hsl(var(--timeline-badge-alt) / 0.88) 100%\n  );\n  border: 1px solid hsl(var(--timeline-border-color));\n  color: hsl(var(--ink));\n  border-radius: 9999px;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 14px 30px hsl(var(--timeline-glow) / 0.35);\n}\n\n.timeline-action {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--timeline-badge) / 0.92) 0%,\n    hsl(var(--timeline-badge-alt) / 0.88) 100%\n  );\n  border: 1px solid hsl(var(--timeline-border-color));\n  border-radius: 14px;\n  color: hsl(var(--ink));\n  font-weight: 600;\n  backdrop-filter: blur(16px);\n  box-shadow: 0 16px 32px hsl(var(--timeline-glow) / 0.24);\n  transition: transform 0.2s ease, box-shadow 0.2s ease, filter 0.2s ease;\n}\n\n.timeline-action:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 24px 42px hsl(var(--timeline-glow) / 0.32);\n  filter: brightness(1.03);\n}\n\n.timeline-action:active {\n  transform: translateY(0);\n  box-shadow: 0 12px 24px hsl(var(--timeline-glow) / 0.22);\n}\n\n.timeline-chip {\n  align-items: center;\n  background: hsl(var(--timeline-surface) / 0.55);\n  border: 1px solid hsl(var(--timeline-border-color));\n  border-radius: 9999px;\n  color: hsl(var(--foreground));\n  display: inline-flex;\n  font-size: 0.75rem;\n  font-weight: 600;\n  gap: 0.25rem;\n  letter-spacing: 0.05em;\n  padding: 0.35rem 0.85rem;\n  text-transform: uppercase;\n  backdrop-filter: blur(12px);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.35);\n}\n\n.timeline-chip.is-affirmative {\n  background: linear-gradient(\n    135deg,\n    hsl(var(--timeline-glow) / 0.75) 0%,\n    hsl(var(--timeline-surface-strong) / 0.85) 100%\n  );\n  border-color: hsl(var(--timeline-glow));\n  color: hsl(var(--ink));\n}\n\n.workspace-header {\n  background: linear-gradient(135deg, hsl(var(--card) / 0.82) 0%, hsl(var(--secondary) / 0.2) 65%, hsl(var(--accent) / 0.35) 100%);\n  color: hsl(var(--ink));\n  position: relative;\n  isolation: isolate;\n  box-shadow: 0 40px 70px hsl(var(--secondary) / 0.25);\n}\n\n.glass-toggle {\n  color: hsl(var(--foreground));\n  background: linear-gradient(135deg, hsl(var(--card) / 0.35) 0%, hsl(var(--secondary) / 0.25) 100%);\n  border: 1px solid hsl(var(--border));\n  transition: color 0.2s ease, background 0.3s ease, box-shadow 0.3s ease;\n}\n\n.glass-toggle:hover {\n  background: linear-gradient(135deg, hsl(var(--card) / 0.65) 0%, hsl(var(--secondary) / 0.45) 100%);\n  color: hsl(var(--ink));\n  box-shadow: 0 16px 32px hsl(var(--accent) / 0.32);\n}\n\n.glass-toggle--active {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.95) 0%, hsl(var(--accent) / 0.85) 100%);\n  color: hsl(var(--ink));\n  box-shadow: 0 24px 42px hsl(var(--primary) / 0.38);\n}\n\n.glass-nav-button {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.65rem 1.1rem;\n  border-radius: 9999px;\n  border: 1px solid hsl(var(--border) / 0.75);\n  background: linear-gradient(135deg, hsl(var(--card) / 0.55) 0%, hsl(var(--secondary) / 0.38) 100%);\n  color: hsl(var(--foreground));\n  font-weight: 600;\n  letter-spacing: 0.08em;\n  box-shadow: 0 12px 28px hsl(var(--secondary) / 0.22);\n  transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.3s ease, color 0.2s ease;\n}\n\n.glass-nav-button svg {\n  flex-shrink: 0;\n}\n\n.glass-nav-button:hover,\n.glass-nav-button:focus-visible {\n  background: linear-gradient(135deg, hsl(var(--card) / 0.75) 0%, hsl(var(--secondary) / 0.55) 100%);\n  color: hsl(var(--ink));\n  transform: translateY(-2px);\n  box-shadow: 0 18px 36px hsl(var(--accent) / 0.28);\n}\n\n.glass-nav-button:focus-visible {\n  outline: 3px solid hsl(var(--primary) / 0.35);\n  outline-offset: 2px;\n}\n\n.glass-nav-button.is-active {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.9) 0%, hsl(var(--accent) / 0.75) 100%);\n  color: hsl(var(--ink));\n  box-shadow: 0 22px 38px hsl(var(--primary) / 0.32);\n}","size_bytes":44288},"loop/index.tsx":{"content":"\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Could not find root element to mount to\");\n}\n\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":373},"loop/netlify.toml":{"content":"[build]\n  base = \".\"\n  command = \"bash build.sh\"\n  publish = \"dist\"\n\n[build.environment]\n  NODE_VERSION = \"20.19\"\n","size_bytes":114},"loop/postcss.config.js":{"content":"export default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":91},"loop/replit.md":{"content":"# Fractured Loop Infinity - AI Assistant Director\n\n## Overview\nAn AI-powered filmmaking assistant that integrates professional cinematography knowledge into every aspect of film production. The application provides a unified workspace experience with:\n- **Workspace Mode**: Integrated timeline, asset library, and AI chat assistant\n- **Knowledge-Based AI**: All AI prompts enhanced with cinematography expertise from markdown knowledge base\n- **Guided Builds**: StorybBuild and ImgBuild workflows with dropdown options sourced from knowledge base\n\n## Recent Changes\n- **2025-10-04 (Latest)**: Fresh GitHub import setup for Replit environment\n  - Installed Node.js 20 and Python 3.11 language modules\n  - Installed all Python dependencies (Flask, ChromaDB, FastAPI, Uvicorn, Pydantic)\n  - Installed all Node.js dependencies for React frontend\n  - Updated Vite config to use port 5000 with allowedHosts: true for Replit proxy compatibility\n  - **SECURITY**: Removed hardcoded Gemini API key from geminiService.ts - now uses only environment variable\n  - Updated Flask app to run on port 3001 (localhost) to avoid conflict with frontend on port 5000\n  - Updated ChromaDB server to run on port 8000 (localhost)\n  - Updated frontend config to use Replit domain for backend API calls\n  - Configured Frontend workflow running on port 5000\n  - Set up autoscale deployment with proper build and preview commands\n  - Created comprehensive .gitignore for Python and Node.js\n  \n- **2025-10-02**: Major refactoring - integrated knowledge base system\n  - Created knowledgeService.ts to load and parse markdown files from /knowledge folder\n  - Integrated knowledge base into ALL AI generation flows (chat, workspace, builds, images)\n  - Removed Quantum Box mode, Landing Page, and separate Guided Workflows per user request\n  - Simplified App.tsx to show unified Workspace directly\n  - Removed unused components (QuantumBox, LandingPage, BuildScreen, Sandbox, WelcomeScreen, BatchSelection)\n  - Updated all dropdown options to use knowledge base data (camera movements, story structures, techniques)\n  - Removed vidbuild and shotbuild, keeping only storybuild and imgbuild per user request\n\n## User Preferences\n- Workspace-centric design: No separate modes or landing pages - everything in unified workspace\n- Knowledge base driven: Use /knowledge markdown files for all dropdowns and AI context\n- Streamlined builds: Only storybuild and imgbuild (removed shotbuild and vidbuild)\n- Seed ID lineage must be preserved (A → A.1-MASTER → A.1.3)\n\n## Project Architecture\n- **Frontend**: React 19 with TypeScript\n- **Build System**: Vite 7.1.7 for development and building\n- **Styling**: TailwindCSS 4.1.13\n- **AI Integration**: Google Generative AI (Gemini) - requires VITE_GEMINI_API_KEY environment variable\n- **Knowledge Base**: Markdown files in /knowledge folder provide cinematography expertise\n- **Deployment**: Autoscale deployment with Vite preview server\n\n### Key Files\n- `index.html`: Main HTML entry point with inline styles\n- `App.tsx`: Simplified main component that renders Workspace directly\n- `services/geminiService.ts`: AI integration service with knowledge base context in all prompts\n- `services/knowledgeService.ts`: Loads and parses markdown knowledge files, provides dropdown options\n- `types.ts`: TypeScript type definitions\n- `constants.ts`: Application constants, build configurations, field options from knowledge base\n- `components/Workspace.tsx`: Unified workspace with timeline, asset library, and chat\n- `components/ChatAssistant.tsx`: AI chat assistant integrated into workspace\n- `components/Timeline.tsx`: Primary/Secondary timeline system\n- `knowledge/`: Markdown files containing cinematography and storytelling expertise\n- `vite.config.ts`: Vite configuration optimized for Replit\n\n### Knowledge Base System\nThe knowledge base in `/knowledge` folder contains markdown files with:\n- Camera movements and techniques\n- Story structures and narrative frameworks\n- Shot types and compositions\n- Lighting styles and setups\n- Color grading techniques\n- Video pacing and durations\n\nThese are loaded by `knowledgeService.ts` and:\n1. Populate dropdown options in build workflows\n2. Enhance all AI prompts with cinematography context\n3. Provide expert guidance for filmmaking decisions\n\n### Setup Requirements\n1. Add Google AI API key as `VITE_GEMINI_API_KEY` environment variable\n2. Dependencies are already installed\n3. Development server runs on port 5000 via workflow\n4. Run `npm run build` for production build\n\n## Current State\n- ✅ Application successfully running in Replit development mode with unified workspace\n- ✅ All TypeScript compilation issues resolved (0 LSP errors)\n- ✅ Knowledge base integrated into all AI generation flows\n- ✅ Vite development server configured on port 5000 with proper host settings\n- ✅ Deployment configuration set up for autoscale\n- ✅ Project structure cleaned and streamlined (removed unused components)\n- ✅ Dropdown options powered by knowledge base markdown files\n- ⏳ Google AI integration requires VITE_GEMINI_API_KEY environment variable to be set by user","size_bytes":5126},"loop/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        card: 'hsl(var(--card))',\n        popover: 'hsl(var(--popover))',\n      },\n    },\n  },\n  plugins: [],\n}\n","size_bytes":482},"loop/types.ts":{"content":"// Fractured Loop Asset Types\nexport interface Asset {\n  id: string;\n  seedId: string; // Core lineage identifier (e.g., \"A\", \"A.1\", \"A.1.3\")\n  type: 'primary' | 'secondary' | 'tertiary' | 'master_story' | 'master_image' | 'master_video' | 'shot';\n  name: string;\n  content: string;\n  tags: string[];\n  createdAt: Date;\n  summary: string;\n  metadata?: Record<string, any>;\n  questions?: Question[]; // For guided build assets\n  chatContext?: Message[]; // All Q&A with user\n  userSelections?: Record<string, any>; // Dropdowns, toggles\n  outputs?: string[]; // Generated drafts, prompts\n  isMaster?: boolean; // Flag for master assets\n  lineage?: string[]; // Array of asset IDs that contributed to this asset\n}\n\n// Timeline Block Interface\nexport interface TimelineBlock {\n  id: string;\n  assetId: string;\n  position: number; // Position in timeline sequence\n  isExpanded: boolean; // Whether block is expanded to chat\n  createdAt: Date;\n}\n\n// Primary Timeline (User Inputs with Folders)\nexport interface PrimaryTimeline {\n  blocks: TimelineBlock[];\n  folders: {\n    story: TimelineBlock[];\n    image: TimelineBlock[];\n  };\n  outputDraft?: string; // Generated draft from Output Node\n}\n\n// Secondary Timeline (Master Assets)\nexport interface SecondaryTimeline {\n  masterAssets: Asset[]; // Locked master assets (story before image order)\n  shotLists: ShotList[]; // Generated shot lists\n  appliedStyles?: Record<string, string>; // Style applications across shots\n}\n\n// Third Timeline (Styling by Story Flow)\nexport interface ThirdTimeline {\n  styledShots: Asset[]; // Shots numbered by story flow\n  videoPrompts: string[]; // Generated video prompts for shots\n}\n\n// Fourth Timeline (Director's Advice)\nexport interface FourthTimeline {\n  suggestions: DirectorSuggestion[]; // Suggestions for additions/removals, editing, etc.\n  acceptedSuggestions: DirectorSuggestion[]; // Accepted suggestions added to final output\n}\n\nexport interface ShotList {\n  id: string;\n  masterAssetId: string; // Reference to story master\n  shots: Asset[]; // Individual shot assets\n  createdAt: Date;\n}\n\nexport interface DirectorSuggestion {\n  id: string;\n  type: 'addition' | 'removal' | 'edit' | 'color_grading' | 'transition' | 'other';\n  description: string;\n  targetAssetId?: string; // Asset this suggestion applies to\n  accepted: boolean;\n  createdAt: Date;\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  assets: Asset[];\n  primaryTimeline: PrimaryTimeline;\n  secondaryTimeline?: SecondaryTimeline; // Master assets timeline\n  thirdTimeline?: ThirdTimeline; // Styling timeline\n  fourthTimeline?: FourthTimeline; // Director's advice timeline\n  createdAt: Date;\n  updatedAt: Date;\n  targetModel?: string; // Target AI model for generation (MidJourney, Sora, etc.)\n  // Legacy timeline properties for backward compatibility\n  tracks?: Track[];\n  timelineItems?: TimelineItem[];\n}\n\n// Enhanced Guided Build Types\nexport interface Question {\n  id: string;\n  text: string;\n  type: 'text' | 'option' | 'dropdown';\n  options?: string[];\n  optionsKey?: string; // Key to lookup options from FIELD_OPTIONS\n  required?: boolean;\n}\n\nexport interface Build {\n  id: string;\n  name: string;\n  description: string;\n  questions: Question[];\n  targetAssetType: Asset['type'];\n  icon?: React.ReactNode;\n}\n\nexport interface Workflow {\n  id: string;\n  name: string;\n  description: string;\n  builds: string[];\n}\n\n// Chat and AI Types\nexport enum ChatRole {\n  USER = 'USER',\n  MODEL = 'MODEL'\n}\n\nexport interface Message {\n  role: ChatRole;\n  content: string;\n}\n\n// Build Context for Iterative Workflows\nexport interface BuildContext {\n  [key: string]: {\n    seeds: Seed[];\n    currentStep?: number;\n    answers?: Record<string, string>;\n  };\n}\n\nexport interface Seed {\n  id: string;\n  content: string;\n  tags: string[];\n  createdAt: Date;\n  sourceBuild: string;\n  summary: string;\n}\n\n// Legacy types for backward compatibility (to be removed after transition)\nexport interface CanvasNode {\n  id: string;\n  position: { x: number; y: number };\n  size: number;\n  assetId: string;\n  name: string;\n  description: string;\n}\n\nexport interface CanvasConnection {\n  id: string;\n  from: string;\n  to: string;\n  type: 'harmony' | 'tension';\n  harmonyLevel: number;\n}\n\nexport interface CanvasState {\n  nodes: CanvasNode[];\n  connections: CanvasConnection[];\n}\n\n// Quantum Box Types\nexport interface Node {\n  id: string;\n  position: { x: number; y: number };\n  data: any;\n}\n\nexport interface Connection {\n  id: string;\n  source: string;\n  target: string;\n}\n\nexport interface NodeGraph {\n  nodes: Node[];\n  connections: Connection[];\n}\n\n// Timeline Types\nexport interface Track {\n  id: string;\n  name: string;\n  type: 'audio' | 'video' | 'text';\n  items: TimelineItem[];\n  layers?: Layer[];\n}\n\nexport interface Layer {\n  id: string;\n  name: string;\n  type: 'background' | 'foreground' | 'overlay';\n}\n\nexport interface TimelineItem {\n  id: string;\n  trackId: string;\n  assetId: string;\n  startTime: number;\n  duration: number;\n  layerId?: string;\n}\n","size_bytes":5016},"loop/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_GEMINI_API_KEY: string\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}","size_bytes":188},"loop/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: false,\n    allowedHosts: true,\n    hmr: {\n      protocol: 'wss',\n      clientPort: 443\n    }\n  },\n  assetsInclude: ['**/*.md'],\n  base: '/'\n})\n","size_bytes":338},"src/logger.py":{"content":"import logging  \n\ndef setup_logger():  \n    \"\"\"Set up the logger for the application.\"\"\"  \n    logger = logging.getLogger('flask-api-service')  \n    logger.setLevel(logging.INFO)  \n    handler = logging.StreamHandler()  \n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')  \n    handler.setFormatter(formatter)  \n    logger.addHandler(handler)  \n    return logger\n","size_bytes":391},"src/main.py":{"content":"from flask import Blueprint, jsonify, request\n\nfrom src.logger import setup_logger  \n\nmain_bp = Blueprint('main', __name__)  \n\nlogger = setup_logger()\n\n@main_bp.route('/status', methods=['GET'])\ndef status():\n    \"\"\"\n    Returns the status of the service\n    \"\"\"\n    return jsonify({'status': 'running'})\n\n@main_bp.route('/welcome', methods=['GET'])\ndef welcome():\n    \"\"\"\n    Returns a welcome message\n    \"\"\"\n    logger.info(f\"Request received: {request.method} {request.path}\")\n    return jsonify({'message': 'Welcome to the Flask API Service!'})\n","size_bytes":550},"loop/components/ApiConfig.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { apiConfig } from '../services/config';\nimport { XMarkIcon, Cog6ToothIcon, PlusIcon, PencilIcon, TrashIcon } from './IconComponents';\n\ninterface ApiServiceConfig {\n  name: string;\n  baseUrl: string;\n  apiKey?: string;\n  description?: string;\n}\n\ninterface ApiConfigProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface EditingConfig extends ApiServiceConfig {\n  isNew?: boolean;\n}\n\nexport const ApiConfig: React.FC<ApiConfigProps> = ({ isOpen, onClose }) => {\n  const [configs, setConfigs] = useState<ApiServiceConfig[]>([]);\n  const [editingConfig, setEditingConfig] = useState<EditingConfig | null>(null);\n  const [testingService, setTestingService] = useState<string | null>(null);\n  const [testResults, setTestResults] = useState<Record<string, { success: boolean; message: string }>>({});\n\n  useEffect(() => {\n    if (isOpen) {\n      setConfigs(apiConfig.getConfigs());\n      setTestResults({});\n      setEditingConfig(null);\n    }\n  }, [isOpen]);\n\n  const handleSaveConfig = () => {\n    if (!editingConfig) return;\n\n    if (editingConfig.isNew) {\n      try {\n        apiConfig.addConfig({\n          name: editingConfig.name.trim(),\n          baseUrl: editingConfig.baseUrl.trim(),\n          apiKey: editingConfig.apiKey?.trim() || undefined,\n          description: editingConfig.description?.trim(),\n        });\n      } catch (error) {\n        alert(error instanceof Error ? error.message : 'Failed to add config');\n        return;\n      }\n    } else {\n      apiConfig.updateConfigByName(editingConfig.name, {\n        baseUrl: editingConfig.baseUrl.trim(),\n        apiKey: editingConfig.apiKey?.trim() || undefined,\n        description: editingConfig.description?.trim(),\n      });\n    }\n\n    setConfigs(apiConfig.getConfigs());\n    setEditingConfig(null);\n  };\n\n  const handleDeleteConfig = (name: string) => {\n    if (confirm(`Delete API configuration for '${name}'?`)) {\n      apiConfig.removeConfigByName(name);\n      setConfigs(apiConfig.getConfigs());\n    }\n  };\n\n  const handleTestConnection = async (config: ApiServiceConfig) => {\n    setTestingService(config.name);\n    setTestResults(prev => ({ ...prev, [config.name]: { success: false, message: 'Testing...' } }));\n\n    try {\n      const headers: Record<string, string> = { 'Content-Type': 'application/json' };\n      if (config.apiKey) {\n        headers['Authorization'] = `Bearer ${config.apiKey}`;\n      }\n\n      const response = await fetch(`${config.baseUrl}/`, {\n        method: 'GET',\n        headers,\n      });\n\n      if (response.ok) {\n        setTestResults(prev => ({ ...prev, [config.name]: { success: true, message: 'Connection successful!' } }));\n      } else {\n        setTestResults(prev => ({ ...prev, [config.name]: { success: false, message: `Connection failed: ${response.status} ${response.statusText}` } }));\n      }\n    } catch (error) {\n      setTestResults(prev => ({ ...prev, [config.name]: { success: false, message: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}` } }));\n    } finally {\n      setTestingService(null);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-xl z-50 flex items-center justify-center p-4\">\n      <div className=\"glass-card w-full max-w-2xl max-h-[90vh] overflow-hidden\">\n        <div className=\"flex items-center justify-between px-6 py-5 border-b border-[hsl(var(--border))]\">\n          <div className=\"flex items-center gap-3\">\n            <Cog6ToothIcon className=\"w-8 h-8\" title=\"API configuration\" />\n            <h2 className=\"text-2xl font-bold ink-strong\">API Configuration</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-[hsl(var(--muted-foreground))] hover:text-[hsl(var(--ink))] transition-colors\"\n            aria-label=\"Close API configuration\"\n          >\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 overflow-y-auto custom-scrollbar\">\n          {editingConfig ? (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold ink-strong\">\n                {editingConfig.isNew ? 'Add New API Service' : `Edit ${editingConfig.name}`}\n              </h3>\n\n              <div>\n                <label className=\"block text-sm font-medium ink-strong mb-1\">\n                  Service Name\n                </label>\n                <input\n                  type=\"text\"\n                  value={editingConfig.name}\n                  onChange={(e) => setEditingConfig({ ...editingConfig, name: e.target.value })}\n                  placeholder=\"e.g., chromadb, gemini, openai\"\n                  className=\"panel-input w-full px-3 py-2\"\n                  disabled={!editingConfig.isNew}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium ink-strong mb-1\">\n                  Base URL\n                </label>\n                <input\n                  type=\"url\"\n                  value={editingConfig.baseUrl}\n                  onChange={(e) => setEditingConfig({ ...editingConfig, baseUrl: e.target.value })}\n                  placeholder=\"https://your-api-endpoint.com\"\n                  className=\"panel-input w-full px-3 py-2\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium ink-strong mb-1\">\n                  API Key (Optional)\n                </label>\n                <input\n                  type=\"password\"\n                  value={editingConfig.apiKey || ''}\n                  onChange={(e) => setEditingConfig({ ...editingConfig, apiKey: e.target.value })}\n                  placeholder=\"Enter your API key\"\n                  className=\"panel-input w-full px-3 py-2\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium ink-strong mb-1\">\n                  Description (Optional)\n                </label>\n                <input\n                  type=\"text\"\n                  value={editingConfig.description || ''}\n                  onChange={(e) => setEditingConfig({ ...editingConfig, description: e.target.value })}\n                  placeholder=\"Brief description of the service\"\n                  className=\"panel-input w-full px-3 py-2\"\n                />\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <button\n                  onClick={() => setEditingConfig(null)}\n                  className=\"flex-1 bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleSaveConfig}\n                  disabled={!editingConfig.name.trim() || !editingConfig.baseUrl.trim()}\n                  className=\"flex-1 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold ink-strong\">Configured API Services</h3>\n                <button\n                  onClick={() => setEditingConfig({ name: '', baseUrl: '', apiKey: '', description: '', isNew: true })}\n                  className=\"flex items-center gap-2 bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600\"\n                >\n                  <PlusIcon className=\"w-4 h-4\" />\n                  Add Service\n                </button>\n              </div>\n\n              {configs.length === 0 ? (\n                <p className=\"text-center ink-subtle py-8\">No API services configured yet.</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {configs.map((config) => (\n                    <div key={config.name} className=\"border border-[hsl(var(--border))] rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h4 className=\"font-medium ink-strong\">{config.name}</h4>\n                          {config.description && <p className=\"text-sm ink-subtle\">{config.description}</p>}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <button\n                            onClick={() => setEditingConfig({ ...config })}\n                            className=\"text-blue-500 hover:text-blue-700\"\n                            title=\"Edit\"\n                          >\n                            <PencilIcon className=\"w-4 h-4\" />\n                          </button>\n                          <button\n                            onClick={() => handleDeleteConfig(config.name)}\n                            className=\"text-red-500 hover:text-red-700\"\n                            title=\"Delete\"\n                          >\n                            <TrashIcon className=\"w-4 h-4\" />\n                          </button>\n                        </div>\n                      </div>\n\n                      <div className=\"text-sm ink-subtle mb-2\">\n                        <p>URL: {config.baseUrl}</p>\n                        <p>Key: {config.apiKey ? '••••••••' : 'None'}</p>\n                      </div>\n\n                      {testResults[config.name] && (\n                        <div className={`p-2 rounded-md text-sm mb-2 ${testResults[config.name].success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                          {testResults[config.name].message}\n                        </div>\n                      )}\n\n                      <button\n                        onClick={() => handleTestConnection(config)}\n                        disabled={testingService === config.name}\n                        className=\"bg-gray-500 text-white py-1 px-3 rounded-md hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm\"\n                      >\n                        {testingService === config.name ? 'Testing...' : 'Test Connection'}\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"mt-6 text-sm ink-subtle space-y-2\">\n            <p><strong>Note:</strong> Configure multiple AI API services for different features. Each service requires its own endpoint and API key.</p>\n            <p>\n              Common services include ChromaDB for vector storage, Gemini for AI generation, and OpenAI for chat completions.\n              API keys are service-specific and not interchangeable.\n            </p>\n            <p>\n              For ChromaDB, set up your own server to keep data private. For Gemini, get a free API key from{' '}\n              <a href=\"https://console.cloud.google.com/ai-platform\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary underline\">\n                Google AI Studio\n              </a>.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":11289},"loop/components/AtomSpinner.tsx":{"content":"import React from 'react';\n\nconst AtomSpinner = () => {\n  return (\n    <div className=\"atom-spinner\" aria-label=\"Loading\">\n      <div className=\"atom-spinner-inner\">\n        <div className=\"orbit orbit1\"></div>\n        <div className=\"orbit orbit2\"></div>\n        <div className=\"orbit orbit3\"></div>\n        <div className=\"core\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default AtomSpinner;\n","size_bytes":399},"loop/components/ChatAssistant.tsx":{"content":"import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport type { Message } from '../types';\nimport { ChatRole } from '../types';\nimport LoadingSpinner from './LoadingSpinner';\nimport { SendIcon, SparklesIcon, UserIcon, MagicWandIcon, CubeTransparentIcon } from './IconComponents';\nimport { knowledgeBase } from '../services/knowledgeService';\n\ninterface ChatAssistantProps {\n  messages: Message[];\n  isLoading: boolean;\n  generatedOutput: string;\n  onSendMessage: (message: string) => void | Promise<unknown>;\n  project?: any;\n  onCreateAsset?: (asset: any) => void;\n  onUpdateAsset?: (assetId: string, updates: any) => void;\n  showMockNotice?: boolean;\n  onDismissMockNotice?: () => void;\n}\n\n// Helper to escape HTML to prevent XSS from user input being reflected in prompt\nconst htmlEscapes: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#039;'\n};\n\nconst escapeHtml = (unsafe: string) =>\n  unsafe.replace(/[&<>\"']/g, (char) => htmlEscapes[char as keyof typeof htmlEscapes] ?? char);\n\nconst formatPlainText = (content: string) =>\n  escapeHtml(content).replace(/\\n/g, '<br />');\n\nconst formatGeneratedOutput = (content: string): string => {\n    try {\n        const data = JSON.parse(content);\n        if (data.prompt && data.explanation) {\n            return `\n                <div class=\"prose max-w-none chat-output\">\n                    <h3 class=\"!mb-2 chat-output-heading\">Generated Content</h3>\n                    <pre class=\"chat-output-block p-4 whitespace-pre-wrap break-words font-mono text-sm\"><code>${escapeHtml(data.prompt)}</code></pre>\n                    <h3 class=\"!mt-6 !mb-2 chat-output-heading\">AI Commentary</h3>\n                    <p class=\"!mt-0 chat-meta\">${escapeHtml(data.explanation)}</p>\n                </div>\n            `.trim();\n        }\n    } catch (e) {\n        // Not a JSON object, or not a format we recognize, so just display as plain text\n        return `<p>${formatPlainText(content)}</p>`;\n    }\n    return `<p>${formatPlainText(content)}</p>`;\n};\n\nconst featurePalettes: Record<string, { accent: string; surface: string; highlight: string; edge: string }> = {\n  story: {\n    accent: '--timeline-story',\n    surface: '--timeline-story-surface',\n    highlight: '--timeline-story-highlight',\n    edge: '--timeline-story-edge'\n  },\n  shot: {\n    accent: '--timeline-image',\n    surface: '--timeline-image-surface',\n    highlight: '--timeline-image-highlight',\n    edge: '--timeline-image-edge'\n  },\n  img: {\n    accent: '--timeline-style',\n    surface: '--timeline-style-surface',\n    highlight: '--timeline-style-highlight',\n    edge: '--timeline-style-edge'\n  },\n  vid: {\n    accent: '--timeline-director',\n    surface: '--timeline-director-surface',\n    highlight: '--timeline-director-highlight',\n    edge: '--timeline-director-edge'\n  },\n  edit: {\n    accent: '--timeline-master',\n    surface: '--timeline-master-surface',\n    highlight: '--timeline-master-highlight',\n    edge: '--timeline-master-edge'\n  },\n  iteration: {\n    accent: '--timeline-master',\n    surface: '--timeline-master-surface',\n    highlight: '--timeline-master-highlight',\n    edge: '--timeline-master-edge'\n  },\n  shots: {\n    accent: '--timeline-image',\n    surface: '--timeline-image-surface',\n    highlight: '--timeline-image-highlight',\n    edge: '--timeline-image-edge'\n  },\n  menu: {\n    accent: '--primary',\n    surface: '--card',\n    highlight: '--muted',\n    edge: '--ring'\n  },\n  default: {\n    accent: '--primary',\n    surface: '--card',\n    highlight: '--muted',\n    edge: '--ring'\n  }\n};\n\nconst getFeatureStyles = (feature: string) => {\n  const palette = featurePalettes[feature] ?? featurePalettes.default;\n  return {\n    '--chat-accent': `var(${palette.accent})`,\n    '--chat-surface': `var(${palette.surface})`,\n    '--chat-highlight': `var(${palette.highlight})`,\n    '--chat-edge': `var(${palette.edge})`\n  } as React.CSSProperties;\n};\n\nconst ChatAssistant: React.FC<ChatAssistantProps> = ({\n  messages,\n  isLoading,\n  generatedOutput,\n  onSendMessage,\n  project,\n  onCreateAsset,\n  onUpdateAsset,\n  showMockNotice = false,\n  onDismissMockNotice\n}) => {\n  const [prompt, setPrompt] = useState('');\n  const [isSuggestionOpen, setIsSuggestionOpen] = useState(false);\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const blurTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const suggestionPool = useMemo(() => {\n    const combined = [\n      ...knowledgeBase.storyStructures,\n      ...knowledgeBase.filmTechniques,\n      ...knowledgeBase.cameraMovements,\n      ...knowledgeBase.sceneWritingTechniques,\n      ...knowledgeBase.screenplayArchetypes\n    ].filter(Boolean);\n\n    return Array.from(new Set(combined)).sort((a, b) => a.localeCompare(b));\n  }, [knowledgeBase]);\n\n  const filteredSuggestions = useMemo(() => {\n    const query = prompt.trim().toLowerCase();\n\n    if (!query) {\n      return suggestionPool.slice(0, 8);\n    }\n\n    return suggestionPool\n      .filter((item) => item.toLowerCase().includes(query))\n      .slice(0, 8);\n  }, [prompt, suggestionPool]);\n\n  // Build system state\n  const [isBuildMode, setIsBuildMode] = useState(false);\n  const [currentBuild, setCurrentBuild] = useState<string | null>(null);\n  const [buildAnswers, setBuildAnswers] = useState<Record<string, string>>({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showBuildMenu, setShowBuildMenu] = useState(false);\n\n  // Master asset iteration state\n  const [selectedMasterAsset, setSelectedMasterAsset] = useState<string | null>(null);\n  const [showMasterIteration, setShowMasterIteration] = useState(false);\n  const [iterationPrompt, setIterationPrompt] = useState('');\n\n  // Shot creation state\n  const [showShotCreation, setShowShotCreation] = useState(false);\n  const [shotCreationPrompt, setShotCreationPrompt] = useState('');\n  const [targetMasterAsset, setTargetMasterAsset] = useState<string | null>(null);\n\n  // Build types and their questions\n  const buildTypes: Record<string, { name: string; description: string; questions: { key: string; question: string; section: string; }[] }> = {\n    story: {\n      name: 'StoryBuild',\n      description: 'Create a comprehensive story with character arcs, world-building, and thematic depth',\n      questions: [\n        // Part 1 - Character & World\n        { key: 'character_name', question: 'What is the character\\'s full name? Any nicknames or titles?', section: 'Character Foundation' },\n        { key: 'character_age', question: 'Exact age or approximate age range?', section: 'Character Foundation' },\n        { key: 'character_gender', question: 'How does the character identify?', section: 'Character Foundation' },\n        { key: 'character_physical', question: 'Height, build, notable features, hair/eye color, scars/tattoos?', section: 'Character Foundation' },\n        { key: 'character_personality', question: 'Main personality traits (e.g., bold, insecure, cunning, empathetic)?', section: 'Character Foundation' },\n        { key: 'character_backstory', question: 'What events shaped them? Childhood, trauma, achievements?', section: 'Character Foundation' },\n        { key: 'character_wants', question: 'What does the character actively strive for?', section: 'Character Foundation' },\n        { key: 'character_needs', question: 'What do they actually need to learn or overcome internally?', section: 'Character Foundation' },\n        { key: 'character_flaws', question: 'What are their limitations, fears, or contradictions?', section: 'Character Foundation' },\n        { key: 'character_wound', question: 'What unresolved past pain or secret drives them?', section: 'Character Foundation' },\n        { key: 'world_tone', question: 'Urban, rural, fantastical, dystopian, sci-fi? Day/night, era, climate?', section: 'World & Opposition' },\n        { key: 'external_conflict', question: 'What forces outside the character oppose them? Physical, social, political?', section: 'World & Opposition' },\n        { key: 'conscious_forces', question: 'Who consciously helps or hinders them?', section: 'World & Opposition' },\n        { key: 'unconscious_forces', question: 'Hidden societal pressures, norms, or invisible antagonists?', section: 'World & Opposition' },\n        { key: 'story_linearity', question: 'Should events be chronological, fragmented, flashback-heavy?', section: 'World & Opposition' },\n        { key: 'core_theme', question: 'What is the story\\'s central message or question?', section: 'Thematic Suture' },\n        { key: 'opposing_values', question: 'What conflicts with the character\\'s beliefs?', section: 'Thematic Suture' },\n        { key: 'antagonist_goal', question: 'What does the antagonist want, and what do they need internally?', section: 'Thematic Suture' },\n        { key: 'character_mirror', question: 'How does the antagonist mirror or contrast the protagonist?', section: 'Thematic Suture' },\n        { key: 'first_line', question: 'How should the story open?', section: 'Dialogue & Contrast' },\n        { key: 'character_voice', question: 'Casual, formal, poetic, sarcastic, jargon-heavy?', section: 'Dialogue & Contrast' },\n        { key: 'stereotype_subversion', question: 'Does this character break or fulfill a cliché?', section: 'Dialogue & Contrast' },\n        { key: 'contradictions', question: 'Any internal vs external contradictions to highlight?', section: 'Dialogue & Contrast' },\n        // Part 2 - Plot & Resonance\n        { key: 'surface_conflict', question: 'What triggers the story?', section: 'Plot & Arc' },\n        { key: 'internal_contradiction', question: 'Where does the character struggle internally?', section: 'Plot & Arc' },\n        { key: 'inciting_incident', question: 'What event disrupts the normal world?', section: 'Plot & Arc' },\n        { key: 'midpoint', question: 'What shifts the story\\'s stakes or understanding?', section: 'Plot & Arc' },\n        { key: 'climax', question: 'How does the character confront the ultimate challenge?', section: 'Plot & Arc' },\n        { key: 'resolution', question: 'How does the character end the story? Success, failure, ambiguous?', section: 'Plot & Arc' },\n        { key: 'ordinary_traits', question: 'What human, relatable qualities do they have?', section: 'Relatability & Transcendence' },\n        { key: 'mythic_resonance', question: 'What timeless or universal traits emerge?', section: 'Relatability & Transcendence' },\n        { key: 'key_recognition', question: 'When does the audience empathize, reflect, or recognize themselves?', section: 'Relatability & Transcendence' },\n        { key: 'symbolic_objects', question: 'Items that symbolize character traits, theme, or conflict?', section: 'Symbolic Objects & Motivated Cuts' },\n        { key: 'object_symbolism', question: 'What deeper meaning do they carry?', section: 'Symbolic Objects & Motivated Cuts' },\n        { key: 'motivated_cuts', question: 'Scenes where objects or visual cues signal change? (Match cut, smash cut, echo cut, jump cut, etc.)', section: 'Symbolic Objects & Motivated Cuts' }\n      ]\n    },\n    shot: {\n      name: 'ShotBuild',\n      description: 'Define cinematic shots with camera work, lighting, and composition',\n      questions: [\n        { key: 'shot_name', question: 'What do you want to call this shot? (For reference and seed tracking)', section: 'Shot Identification' },\n        { key: 'shot_purpose', question: 'Is this establishing, dialogue, emotional, payoff, or action?', section: 'Shot Identification' },\n        { key: 'scene_context', question: 'Which part of the story does this shot belong to?', section: 'Shot Identification' },\n        { key: 'shot_type', question: 'Shot type: High-angle, Dutch angle, Extreme wide, POV, Over-the-shoulder, Silhouette, etc.', section: 'Shot Core & Camera' },\n        { key: 'framing_rule', question: 'Rule of thirds, Golden ratio, Negative space, Symmetry, Frame-in-frame?', section: 'Shot Core & Camera' },\n        { key: 'character_blocking', question: 'Subject foreground, antagonist rear, group center, left midground, etc.', section: 'Shot Core & Camera' },\n        { key: 'camera_type', question: 'Arri Alexa 65, Red Monstro 8K, Sony Venice 2, etc.', section: 'Shot Core & Camera' },\n        { key: 'focal_length', question: '10mm (ultra-wide), 35mm (standard), 50mm (natural), 100mm (portrait), 200mm (telephoto)', section: 'Shot Core & Camera' },\n        { key: 'depth_field', question: 'f/1.2 (dreamy), f/2.8 (cinematic), f/5.6 (balanced), f/11 (deep focus), f/22 (everything sharp)', section: 'Shot Core & Camera' },\n        { key: 'camera_movement', question: 'Pan, Tilt, Dolly, Track, Crane, Handheld, Steadicam, Zoom, Static', section: 'Movement & Dynamics' },\n        { key: 'character_movement', question: 'Walking, running, entering frame, reaction, gesture, POV interaction', section: 'Movement & Dynamics' },\n        { key: 'temporal_notes', question: 'Slow motion, real-time, long take, cut-heavy', section: 'Movement & Dynamics' },\n        { key: 'lighting_style', question: 'High-key, Low-key, Ambient, Golden hour, etc.', section: 'Lighting, Color & Atmosphere' },\n        { key: 'lighting_technical', question: 'Ratios, bloom, flare, practical sources, shadow emphasis', section: 'Lighting, Color & Atmosphere' },\n        { key: 'color_palette', question: 'Teal & Orange, Golden glow, Black & White, etc.', section: 'Lighting, Color & Atmosphere' },\n        { key: 'hex_codes', question: 'Specific hex codes for background, foreground, costume, props', section: 'Lighting, Color & Atmosphere' },\n        { key: 'film_stock', question: 'Kodak Vision3 5219, Fujifilm Eterna 250D, etc.', section: 'Lighting, Color & Atmosphere' },\n        { key: 'environmental_effects', question: 'Rain, Snow, Fog, Dust, Smoke, Haze, Light Shafts', section: 'Texture & Atmosphere' },\n        { key: 'lens_effects', question: 'Bloom, Lens flare, Vignette, Grain, Motion blur', section: 'Texture & Atmosphere' },\n        { key: 'important_props', question: 'Any symbolic or plot-driven objects?', section: 'Props & Visual Foreshadowing' }\n      ]\n    },\n    img: {\n      name: 'ImgBuild',\n      description: 'Generate AI image prompts with cinematic parameters',\n      questions: [\n        { key: 'shot_type', question: 'Shot type: High-angle, Dutch angle, Extreme wide, POV, etc.', section: 'Shot Parameters' },\n        { key: 'style_guide', question: 'Style reference: 1920s silent film, 80s cyberpunk, etc.', section: 'Style & Reference' },\n        { key: 'camera_type', question: 'Camera type for this image generation', section: 'Camera Settings' },\n        { key: 'focal_length', question: 'Focal length for composition', section: 'Camera Settings' },\n        { key: 'aperture', question: 'Depth of field / aperture setting', section: 'Camera Settings' },\n        { key: 'film_stock', question: 'Film stock / look emulation', section: 'Film & Lighting' },\n        { key: 'lighting_style', question: 'Overall lighting approach', section: 'Film & Lighting' },\n        { key: 'lighting_details', question: 'Technical lighting details', section: 'Film & Lighting' },\n        { key: 'color_grading', question: 'Color grading style', section: 'Color & Look' },\n        { key: 'hex_codes', question: 'Specific color hex codes', section: 'Color & Look' },\n        { key: 'framing', question: 'Framing and composition rules', section: 'Composition' },\n        { key: 'character_blocking', question: 'Character positioning', section: 'Composition' },\n        { key: 'texture_atmosphere', question: 'Environmental effects and atmosphere', section: 'Effects' },\n        { key: 'ai_model', question: 'Which AI model: MidJourney, Sora, Veo 3, etc.', section: 'AI Generation' }\n      ]\n    },\n    vid: {\n      name: 'VidBuild',\n      description: 'Create video sequences with motion and continuity',\n      questions: [\n        { key: 'subject_action', question: 'What is the main subject and their action?', section: 'Scene Parameters' },\n        { key: 'camera_movement', question: 'Camera movement for this sequence', section: 'Camera & Motion' },\n        { key: 'setting', question: 'Location and environment details', section: 'Environment' },\n        { key: 'lighting_mood', question: 'Lighting setup and emotional tone', section: 'Lighting & Mood' },\n        { key: 'style_reference', question: 'Visual style and film reference', section: 'Style & Continuity' },\n        { key: 'continuity_flags', question: 'Continuity requirements from previous shots', section: 'Continuity' }\n      ]\n    },\n    edit: {\n      name: 'EditBuild',\n      description: 'Plan video editing with cuts, transitions, and audio',\n      questions: [\n        { key: 'review_context', question: 'Import context from previous builds? (All, Selected, None)', section: 'Context Review' },\n        { key: 'selected_seeds', question: 'Which seeds/IDs should be included?', section: 'Context Review' },\n        { key: 'seed_mutations', question: 'For each seed: Keep as-is, Mutate, or Discard?', section: 'Context Review' },\n        { key: 'prompt_review', question: 'Review prompts in execution order? (Yes/No)', section: 'Sequential Review' },\n        { key: 'prompt_adjustments', question: 'For each prompt: Keep, adjust, or remove?', section: 'Sequential Review' },\n        { key: 'visual_suggestions', question: 'Additional B-roll, angles, or lighting variations?', section: 'Visual Suggestions' },\n        { key: 'cinematic_guidance', question: 'Framing, lighting, texture, or atmosphere improvements?', section: 'Cinematic Guidance' },\n        { key: 'editing_recommendations', question: 'Cut points, pacing, transitions, motion effects?', section: 'Video Editing' },\n        { key: 'audio_sfx', question: 'Background music, sound effects, audio timing?', section: 'Audio & Effects' },\n        { key: 'output_format', question: 'Copy-paste prompts, editing notes, or combined document?', section: 'Output Options' }\n      ]\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (filteredSuggestions.length === 0) {\n      setHighlightedIndex(-1);\n      return;\n    }\n\n    setHighlightedIndex((prev) => {\n      if (prev < 0 || prev >= filteredSuggestions.length) {\n        return 0;\n      }\n      return prev;\n    });\n  }, [filteredSuggestions]);\n\n  useEffect(() => {\n    return () => {\n      if (blurTimeout.current) {\n        clearTimeout(blurTimeout.current);\n      }\n    };\n  }, []);\n\n  const insertSuggestion = (text: string) => {\n    setPrompt((prev) => {\n      if (!prev) {\n        return `${text} `;\n      }\n\n      const needsSpace = /\\s$/.test(prev);\n      const base = needsSpace ? prev : `${prev} `;\n      return `${base}${text} `;\n    });\n    setIsSuggestionOpen(false);\n    setHighlightedIndex(-1);\n  };\n\n  const handlePromptKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (!filteredSuggestions.length) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setIsSuggestionOpen(true);\n      setHighlightedIndex((prev) => {\n        const next = prev + 1;\n        if (next >= filteredSuggestions.length) {\n          return 0;\n        }\n        return next;\n      });\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setIsSuggestionOpen(true);\n      setHighlightedIndex((prev) => {\n        const next = prev - 1;\n        if (next < 0) {\n          return filteredSuggestions.length - 1;\n        }\n        return next;\n      });\n    } else if (event.key === 'Enter' || event.key === 'Tab') {\n      if (highlightedIndex >= 0) {\n        event.preventDefault();\n        insertSuggestion(filteredSuggestions[highlightedIndex]);\n      }\n    } else if (event.key === 'Escape') {\n      setIsSuggestionOpen(false);\n      setHighlightedIndex(-1);\n    }\n  };\n\n  const suggestionListId = 'prompt-suggestion-list';\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isLoading, generatedOutput]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (prompt.trim() && !isLoading) {\n      onSendMessage(prompt);\n      setPrompt('');\n    }\n  };\n\n  // Master asset iteration functions\n  const handleIterateMasterAsset = async () => {\n    if (!selectedMasterAsset || !iterationPrompt.trim() || !project || !onUpdateAsset) return;\n\n    const asset = project.assets.find((a: any) => a.id === selectedMasterAsset);\n    if (!asset) return;\n\n    const iterationMessage = `Iterate on this ${asset.type} asset:\\n\\nCurrent content:\\n${asset.content}\\n\\nIteration request: ${iterationPrompt}\\n\\nPlease provide an improved version with the requested changes.`;\n\n    try {\n      onSendMessage(iterationMessage);\n      setShowMasterIteration(false);\n      setIterationPrompt('');\n      setSelectedMasterAsset(null);\n    } catch (error) {\n      console.error('Error iterating master asset:', error);\n    }\n  };\n\n  // Shot creation functions\n  const handleCreateShots = async () => {\n    if (!shotCreationPrompt.trim() || !targetMasterAsset || !project || !onCreateAsset) return;\n\n    const masterAsset = project.assets.find((a: any) => a.id === targetMasterAsset);\n    if (!masterAsset) return;\n\n    const shotCreationMessage = `Create multiple shot cards based on this master asset:\\n\\nMaster Asset (${masterAsset.type}):\\n${masterAsset.content}\\n\\nShot creation request: ${shotCreationPrompt}\\n\\nPlease create 3-5 detailed shot cards that break down this master asset into individual cinematic shots. Each shot should include: Shot Type, Style Reference, Camera Type, Focal Length, Depth of Field/Aperture, Film Stock/Look, Camera Movement, Lighting, Framing & Composition, Character Blocking, Texture/Atmosphere/Effects, and Duration.`;\n\n    try {\n      onSendMessage(shotCreationMessage);\n      setShowShotCreation(false);\n      setShotCreationPrompt('');\n      setTargetMasterAsset(null);\n    } catch (error) {\n      console.error('Error creating shots:', error);\n    }\n  };\n\n  // Get master assets for dropdowns\n  const getMasterAssets = () => {\n    if (!project) return [];\n    return project.assets.filter((asset: any) =>\n      asset.type === 'master_story' || asset.type === 'master_image'\n    );\n  };\n\n  const renderMessageContent = (message: Message) => {\n    if (message.role === ChatRole.MODEL) {\n      const formattedContent = formatGeneratedOutput(message.content);\n      return <div dangerouslySetInnerHTML={{ __html: formattedContent }} />;\n    }\n\n    const contentWithBreaks = formatPlainText(message.content);\n    return <div dangerouslySetInnerHTML={{ __html: contentWithBreaks }} />;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full chat-pane\">\n      <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"flex flex-col gap-6\">\n          {showMockNotice && (\n            <div className=\"flex items-start gap-3 rounded-xl border border-indigo-500/40 bg-indigo-500/10 p-4 text-indigo-100\">\n              <div className=\"w-8 h-8 rounded-full bg-indigo-500/60 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                <SparklesIcon className=\"w-5 h-5\" />\n              </div>\n              <div className=\"flex-1 space-y-1\">\n                <p className=\"font-semibold text-indigo-100\">Mock mode active</p>\n                <p className=\"text-sm text-indigo-100/80\">\n                  Gemini responses are simulated because the API key isn&apos;t configured yet. Add your key to unlock live Loop generations.\n                </p>\n              </div>\n              {onDismissMockNotice && (\n                <button\n                  type=\"button\"\n                  onClick={onDismissMockNotice}\n                  className=\"ml-2 text-indigo-200/80 hover:text-indigo-100\"\n                  aria-label=\"Dismiss mock mode notice\"\n                >\n                  ✕\n                </button>\n              )}\n            </div>\n          )}\n\n          {messages.map((msg, index) => (\n            <div key={index} className={`flex gap-4 items-start ${msg.role === ChatRole.USER ? 'justify-end' : ''}`}>\n              {msg.role !== ChatRole.USER && (\n                <div\n                  className=\"w-8 h-8 rounded-full chat-avatar flex items-center justify-center flex-shrink-0\"\n                  style={getFeatureStyles(currentBuild || 'menu')}\n                >\n                  <SparklesIcon className=\"w-5 h-5\" />\n                </div>\n              )}\n\n              <div\n                className={`${\n                  msg.role === ChatRole.MODEL ? 'w-full max-w-none' : 'max-w-xl'\n                } p-4 chat-bubble ${\n                  msg.role === ChatRole.USER\n                    ? 'chat-bubble--user'\n                    : msg.role === ChatRole.MODEL\n                    ? 'chat-bubble--model'\n                    : 'chat-bubble--meta'\n                }`}\n                style={msg.role === ChatRole.MODEL ? getFeatureStyles(currentBuild || 'menu') : undefined}\n              >\n                {renderMessageContent(msg)}\n              </div>\n\n              {msg.role === ChatRole.USER && (\n                <div className=\"w-8 h-8 rounded-full chat-avatar chat-avatar--user flex items-center justify-center flex-shrink-0\">\n                  <UserIcon className=\"w-5 h-5\" />\n                </div>\n              )}\n            </div>\n          ))}\n\n          {generatedOutput && (\n            <div className=\"flex gap-4 items-start\">\n              <div\n                className=\"w-8 h-8 rounded-full chat-avatar flex items-center justify-center flex-shrink-0\"\n                style={getFeatureStyles(currentBuild || 'menu')}\n              >\n                <SparklesIcon className=\"w-5 h-5\" />\n              </div>\n              <div\n                className=\"max-w-none w-full p-4 chat-bubble chat-bubble--model chat-bubble--generated\"\n                style={getFeatureStyles(currentBuild || 'menu')}\n              >\n                <div dangerouslySetInnerHTML={{ __html: formatGeneratedOutput(generatedOutput) }} />\n              </div>\n            </div>\n          )}\n\n          {isLoading && (\n            <div className=\"flex gap-4 items-start\">\n              <div\n                className=\"w-8 h-8 rounded-full chat-avatar flex items-center justify-center flex-shrink-0\"\n                style={getFeatureStyles(currentBuild || 'menu')}\n              >\n                  <SparklesIcon className=\"w-5 h-5 animate-pulse\" />\n              </div>\n              <div className=\"max-w-xl p-4 chat-bubble chat-bubble--model\">\n                <LoadingSpinner />\n              </div>\n            </div>\n          )}\n        </div>\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"p-4 chat-footer\">\n        {/* Master Asset Iteration Panel */}\n        {showMasterIteration && (\n          <div className=\"mb-4 p-4 chat-feature-surface\" style={getFeatureStyles('iteration')}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold chat-feature-header\">Iterate Master Asset</h3>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setShowMasterIteration(false);\n                  setSelectedMasterAsset(null);\n                  setIterationPrompt('');\n                }}\n                className=\"chat-close-button\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium chat-label mb-2\">Select Master Asset</label>\n                <select\n                  value={selectedMasterAsset || ''}\n                  onChange={(e) => setSelectedMasterAsset(e.target.value)}\n                  className=\"w-full chat-input\"\n                >\n                  <option value=\"\">Choose a master asset...</option>\n                  {getMasterAssets().map((asset: any) => (\n                    <option key={asset.id} value={asset.id}>\n                      {asset.name} ({asset.type})\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium chat-label mb-2\">Iteration Request</label>\n                <textarea\n                  value={iterationPrompt}\n                  onChange={(e) => setIterationPrompt(e.target.value)}\n                  placeholder=\"Describe what changes you'd like to make...\"\n                  className=\"w-full chat-input resize-none\"\n                  rows={4}\n                />\n              </div>\n              <button\n                onClick={handleIterateMasterAsset}\n                disabled={!selectedMasterAsset || !iterationPrompt.trim()}\n                className=\"w-full px-4 py-2 chat-feature-action\"\n              >\n                Iterate Asset\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Shot Creation Panel */}\n        {showShotCreation && (\n          <div className=\"mb-4 p-4 chat-feature-surface\" style={getFeatureStyles('shots')}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold chat-feature-header\">Create Shots from Master Asset</h3>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setShowShotCreation(false);\n                  setTargetMasterAsset(null);\n                  setShotCreationPrompt('');\n                }}\n                className=\"chat-close-button\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium chat-label mb-2\">Select Master Asset</label>\n                <select\n                  value={targetMasterAsset || ''}\n                  onChange={(e) => setTargetMasterAsset(e.target.value)}\n                  className=\"w-full chat-input\"\n                >\n                  <option value=\"\">Choose a master asset...</option>\n                  {getMasterAssets().map((asset: any) => (\n                    <option key={asset.id} value={asset.id}>\n                      {asset.name} ({asset.type})\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium chat-label mb-2\">Shot Creation Request</label>\n                <textarea\n                  value={shotCreationPrompt}\n                  onChange={(e) => setShotCreationPrompt(e.target.value)}\n                  placeholder=\"Describe the shots you want to create (e.g., key moments, emotional beats, visual style)...\"\n                  className=\"w-full chat-input resize-none\"\n                  rows={4}\n                />\n              </div>\n              <button\n                onClick={handleCreateShots}\n                disabled={!targetMasterAsset || !shotCreationPrompt.trim()}\n                className=\"w-full px-4 py-2 chat-feature-action\"\n              >\n                Create Shots\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Build Menu */}\n        {showBuildMenu && (\n          <div className=\"mb-4 p-4 chat-feature-surface\" style={getFeatureStyles('menu')}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold chat-feature-header\">Build System</h3>\n              <button\n                type=\"button\"\n                onClick={() => setShowBuildMenu(false)}\n                className=\"chat-close-button\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {Object.entries(buildTypes).map(([key, buildType]) => (\n                <button\n                  key={key}\n                  onClick={() => {\n                    setCurrentBuild(key);\n                    setIsBuildMode(true);\n                    setCurrentQuestionIndex(0);\n                    setBuildAnswers({});\n                    setShowBuildMenu(false);\n                  }}\n                  className=\"p-3 chat-feature-button text-left\"\n                  style={getFeatureStyles(key)}\n                >\n                  <div className=\"font-medium chat-feature-header\">{buildType.name}</div>\n                  <div className=\"text-sm chat-feature-description mt-1\">{buildType.description}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Build Mode Interface */}\n        {isBuildMode && currentBuild && (\n          <div className=\"mb-4 p-4 chat-feature-surface\" style={getFeatureStyles(currentBuild)}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold chat-feature-header\">\n                {buildTypes[currentBuild].name} - Question {currentQuestionIndex + 1} of {buildTypes[currentBuild].questions.length}\n              </h3>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setIsBuildMode(false);\n                  setCurrentBuild(null);\n                  setCurrentQuestionIndex(0);\n                  setBuildAnswers({});\n                }}\n                className=\"chat-close-button\"\n              >\n                ✕\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"text-sm font-medium chat-section-label\">\n                {buildTypes[currentBuild].questions[currentQuestionIndex].section}\n              </div>\n              <div className=\"chat-question\">\n                {buildTypes[currentBuild].questions[currentQuestionIndex].question}\n              </div>\n              <textarea\n                value={buildAnswers[buildTypes[currentBuild].questions[currentQuestionIndex].key] || ''}\n                onChange={(e) => {\n                  const key = buildTypes[currentBuild].questions[currentQuestionIndex].key;\n                  setBuildAnswers(prev => ({ ...prev, [key]: e.target.value }));\n                }}\n                placeholder=\"Your answer...\"\n                className=\"w-full chat-input resize-none\"\n                rows={3}\n              />\n              <div className=\"flex justify-between\">\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    if (currentQuestionIndex > 0) {\n                      setCurrentQuestionIndex(currentQuestionIndex - 1);\n                    }\n                  }}\n                  disabled={currentQuestionIndex === 0}\n                  className=\"px-4 py-2 chat-feature-secondary\"\n                >\n                  Previous\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    if (currentQuestionIndex < buildTypes[currentBuild].questions.length - 1) {\n                      setCurrentQuestionIndex(currentQuestionIndex + 1);\n                    } else {\n                      // Build complete - generate prompt\n                      const buildData = {\n                        type: currentBuild,\n                        answers: buildAnswers,\n                        timestamp: new Date().toISOString()\n                      };\n                      onSendMessage(`Build complete: ${JSON.stringify(buildData)}`);\n                      setIsBuildMode(false);\n                      setCurrentBuild(null);\n                      setCurrentQuestionIndex(0);\n                      setBuildAnswers({});\n                    }\n                  }}\n                  className=\"px-4 py-2 chat-feature-action\"\n                >\n                  {currentQuestionIndex < buildTypes[currentBuild].questions.length - 1 ? 'Next' : 'Complete Build'}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <input\n            type=\"text\"\n            value={prompt}\n            onChange={(e) => {\n              setPrompt(e.target.value);\n              setIsSuggestionOpen(true);\n            }}\n            placeholder=\"Ask the AI assistant...\"\n            disabled={isLoading}\n            className=\"w-full chat-input py-3 pl-4 pr-20\"\n            aria-label=\"Chat input\"\n            role=\"combobox\"\n            aria-expanded={isSuggestionOpen && filteredSuggestions.length > 0}\n            aria-autocomplete=\"list\"\n            aria-controls={suggestionListId}\n            aria-activedescendant={highlightedIndex >= 0 ? `${suggestionListId}-${highlightedIndex}` : undefined}\n            aria-haspopup=\"listbox\"\n            onKeyDown={handlePromptKeyDown}\n            onFocus={() => {\n              if (blurTimeout.current) {\n                clearTimeout(blurTimeout.current);\n              }\n              setIsSuggestionOpen(true);\n            }}\n            onBlur={() => {\n              blurTimeout.current = setTimeout(() => {\n                setIsSuggestionOpen(false);\n                setHighlightedIndex(-1);\n              }, 100);\n            }}\n          />\n          {isSuggestionOpen && filteredSuggestions.length > 0 && (\n            <div\n              className=\"absolute left-0 right-0 z-20 mt-2 glass-card border border-indigo-300/40 shadow-pastel-md bg-white/5 backdrop-blur\"\n              id={suggestionListId}\n            >\n              <ul className=\"max-h-60 overflow-y-auto custom-scrollbar py-1\" role=\"listbox\">\n                {filteredSuggestions.map((suggestion, index) => (\n                  <li\n                    key={`${suggestion}-${index}`}\n                    id={`${suggestionListId}-${index}`}\n                    role=\"option\"\n                    aria-selected={highlightedIndex === index}\n                    className={`mx-1 my-0.5 rounded-lg px-3 py-2 text-sm cursor-pointer transition-colors ${\n                      highlightedIndex === index\n                        ? 'bg-white/20 text-indigo-100 shadow-pastel-sm'\n                        : 'text-indigo-200 hover:bg-white/10'\n                    }`}\n                    onMouseDown={(event) => {\n                      event.preventDefault();\n                      insertSuggestion(suggestion);\n                    }}\n                    onMouseEnter={() => setHighlightedIndex(index)}\n                  >\n                    {suggestion}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex gap-2\">\n            <button\n              type=\"button\"\n              onClick={() => setShowMasterIteration(!showMasterIteration)}\n              className=\"p-2 chat-icon-button\"\n              style={getFeatureStyles('iteration')}\n              aria-label=\"Iterate master asset\"\n              title=\"Iterate on master assets\"\n            >\n              <CubeTransparentIcon className=\"w-5 h-5\" />\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setShowShotCreation(!showShotCreation)}\n              className=\"p-2 chat-icon-button\"\n              style={getFeatureStyles('shots')}\n              aria-label=\"Create shots\"\n              title=\"Create shots from master assets\"\n            >\n              <SparklesIcon className=\"w-5 h-5\" />\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setShowBuildMenu(!showBuildMenu)}\n              className=\"p-2 chat-icon-button\"\n              style={getFeatureStyles('menu')}\n              aria-label=\"Build menu\"\n            >\n              <MagicWandIcon className=\"w-5 h-5\" />\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isLoading || !prompt.trim()}\n              className=\"p-2 chat-icon-button\"\n              style={getFeatureStyles(currentBuild || 'story')}\n              aria-label=\"Send message\"\n            >\n              <SendIcon className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatAssistant;\n","size_bytes":40361},"loop/components/ChatWindow.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport type { Message } from '../types';\nimport { ChatRole } from '../types';\nimport LoadingSpinner from './LoadingSpinner';\nimport { SendIcon, SparklesIcon, UserIcon } from './IconComponents';\nimport { dispatchOpenKnowledgeEvent } from '../services/uiEvents';\n\nconst ImagePromptBlock = ({ prompt, imageData }: { prompt: string; imageData: string }) => {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-gray-900/50 p-4 rounded-lg\">\n        <h4 className=\"text-indigo-300 font-semibold mb-2\">Generated Image Prompt</h4>\n        <p className=\"text-gray-200 text-sm\">{prompt}</p>\n      </div>\n      <div className=\"bg-gray-900/50 p-4 rounded-lg\">\n        <img src={`data:image/png;base64,${imageData}`} alt=\"Generated image\" className=\"max-w-full h-auto rounded-lg\" />\n      </div>\n    </div>\n  );\n};\n\ninterface ChatWindowProps {\n  messages: Message[];\n  isLoading: boolean;\n  isInputDisabled: boolean;\n  placeholder: string;\n  error: string | null;\n  onSendMessage: (message: string) => void;\n  activeBuildType: string;\n}\n\n// Helper to escape HTML to prevent XSS from user input being reflected in prompt\nconst htmlEscapes: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#039;'\n};\n\nconst escapeHtml = (unsafe: string) =>\n  unsafe.replace(/[&<>\"']/g, (char) => htmlEscapes[char as keyof typeof htmlEscapes] ?? char);\n\nconst formatPlainText = (content: string) =>\n  escapeHtml(content).replace(/\\n/g, '<br />');\n\nconst formatSingleImageOutput = (data: any, index: number, total: number) => {\n    if (data.prompt && data.explanation) {\n        return `\n            <div class=\"prose prose-invert max-w-none\">\n                <h3 class=\"!mb-2\">Image Prompt ${total > 1 ? `#${index + 1}` : ''}</h3>\n                <pre class=\"bg-gray-900/50 p-4 rounded-lg text-indigo-300 whitespace-pre-wrap break-words font-mono text-sm\"><code>${escapeHtml(data.prompt)}</code></pre>\n                <h3 class=\"!mt-6 !mb-2\">Director's Commentary</h3>\n                <p class=\"!mt-0\">${escapeHtml(data.explanation)}</p>\n            </div>\n        `.trim();\n    }\n    return '';\n};\n\n\n// Helper to format the final build outputs for display\nconst formatBuildOutput = (content: string, buildType: string): string => {\n    try {\n        // Handle batch image output first\n        if (buildType === 'image' && content.trim().startsWith('[')) {\n            const batchData = JSON.parse(content);\n            if (Array.isArray(batchData)) {\n                return batchData.map((item, index) => formatSingleImageOutput(item, index, batchData.length)).join('<hr class=\"my-8 border-gray-700\" />');\n            }\n        }\n\n        const data = JSON.parse(content);\n        if (buildType === 'story' && data.characterProfile && data.potentialArc) {\n            return `\n                <div class=\"prose prose-invert max-w-none\">\n                    <h3>${escapeHtml(data.characterProfile.name)} - Character Profile</h3>\n                    <p>${escapeHtml(data.characterProfile.summary)}</p>\n                    <h3>Potential Character Arc</h3>\n                    <p>${escapeHtml(data.potentialArc)}</p>\n                </div>\n            `.trim();\n        }\n        if (buildType === 'shot' && data.shotCard) {\n            const { title, camera, lighting, composition, look } = data.shotCard;\n            return `\n                <div class=\"prose prose-invert max-w-none\">\n                    <h3>Shot Card: ${escapeHtml(title)}</h3>\n                    <ul class=\"list-none p-0\">\n                        <li><strong>Camera:</strong> ${escapeHtml(camera)}</li>\n                        <li><strong>Lighting:</strong> ${escapeHtml(lighting)}</li>\n                        <li><strong>Composition:</strong> ${escapeHtml(composition)}</li>\n                        <li><strong>Look & Feel:</strong> ${escapeHtml(look)}</li>\n                    </ul>\n                </div>\n            `.trim();\n        }\n        if (buildType === 'image') {\n            return formatSingleImageOutput(data, 0, 1);\n        }\n        if (buildType === 'video' && data.videoSceneCard) {\n            const { title, sequenceDescription, cinematography, audioVisualNotes } = data.videoSceneCard;\n            return `\n                 <div class=\"prose prose-invert max-w-none\">\n                    <h3>Video Scene: ${escapeHtml(title)}</h3>\n                    <p><strong>Sequence Description:</strong> ${escapeHtml(sequenceDescription)}</p>\n                    <p><strong>Cinematography:</strong> ${escapeHtml(cinematography)}</p>\n                    <p><strong>Audio/Visual Notes:</strong> ${escapeHtml(audioVisualNotes)}</p>\n                </div>\n            `.trim();\n        }\n        if (buildType === 'edit' && data.editReport) {\n            const { title, overallFeedback, pacingAndRhythm, visualSuggestions, audioSuggestions } = data.editReport;\n            return `\n                 <div class=\"prose prose-invert max-w-none\">\n                    <h3>Edit Report: ${escapeHtml(title)}</h3>\n                    <p><strong>Overall Feedback:</strong> ${escapeHtml(overallFeedback)}</p>\n                    <h4>Pacing & Rhythm</h4>\n                    <p>${escapeHtml(pacingAndRhythm)}</p>\n                    <h4>Visual Suggestions</h4>\n                    <p>${escapeHtml(visualSuggestions)}</p>\n                    <h4>Audio Suggestions</h4>\n                    <p>${escapeHtml(audioSuggestions)}</p>\n                </div>\n            `.trim();\n        }\n\n    } catch (e) {\n        // Not a JSON object, or not a format we recognize, so just display as plain text\n        return `<p>${formatPlainText(content)}</p>`;\n    }\n    return `<p>${formatPlainText(content)}</p>`;\n};\n\nconst ChatWindow: React.FC<ChatWindowProps> = ({ messages, isLoading, isInputDisabled, placeholder, error, onSendMessage, activeBuildType }) => {\n  const [prompt, setPrompt] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isLoading]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (prompt.trim() && !isInputDisabled) {\n      onSendMessage(prompt);\n      setPrompt('');\n    }\n  };\n\n  const handleOpenKnowledge = () => {\n    dispatchOpenKnowledgeEvent();\n  };\n\n  const renderMessageContent = (message: Message) => {\n    if (message.role === ChatRole.MODEL) {\n      const formattedContent = formatBuildOutput(message.content, activeBuildType);\n      return <div dangerouslySetInnerHTML={{ __html: formattedContent }} />;\n    }\n\n    const contentWithBreaks = formatPlainText(message.content);\n    return <div dangerouslySetInnerHTML={{ __html: contentWithBreaks }} />;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900/50\">\n      <div className=\"border-b border-gray-800 bg-gray-900/60 p-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <p className=\"text-sm font-semibold text-gray-200\">Need craft inspiration?</p>\n          <p className=\"text-xs text-gray-400\">Browse the same guidance powering the assistant.</p>\n        </div>\n        <button\n          type=\"button\"\n          onClick={handleOpenKnowledge}\n          className=\"inline-flex items-center justify-center px-3 py-1.5 text-xs font-medium rounded-md bg-indigo-600 text-white hover:bg-indigo-500 transition-colors\"\n        >\n          Open Knowledge Base\n        </button>\n      </div>\n      <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"flex flex-col gap-6\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`flex gap-4 items-start ${msg.role === ChatRole.USER ? 'justify-end' : ''}`}>\n              {msg.role !== ChatRole.USER && (\n                <div className=\"w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center flex-shrink-0\">\n                  <SparklesIcon className=\"w-5 h-5\" />\n                </div>\n              )}\n\n              <div className={`max-w-xl p-4 rounded-xl ${\n                msg.role === ChatRole.USER\n                  ? 'bg-gray-700 text-gray-100'\n                  : msg.role === ChatRole.MODEL\n                  ? 'bg-transparent border border-indigo-500/50 w-full max-w-none'\n                  : 'bg-gray-800 text-gray-200'\n              }`}>\n                {renderMessageContent(msg)}\n              </div>\n\n              {msg.role === ChatRole.USER && (\n                <div className=\"w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center flex-shrink-0\">\n                  <UserIcon className=\"w-5 h-5\" />\n                </div>\n              )}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"flex gap-4 items-start\">\n              <div className=\"w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center flex-shrink-0\">\n                  <SparklesIcon className=\"w-5 h-5 animate-pulse\" />\n              </div>\n              <div className=\"max-w-xl p-4 rounded-xl bg-gray-800 text-gray-200\">\n                <LoadingSpinner />\n              </div>\n            </div>\n          )}\n        </div>\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"p-4 border-t border-gray-700\">\n        {error && <div className=\"text-red-400 text-sm mb-2 text-center\">{error}</div>}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <input\n            type=\"text\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder={placeholder}\n            disabled={isInputDisabled}\n            className=\"w-full bg-gray-800 border border-gray-600 rounded-lg py-3 pl-4 pr-12 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:bg-gray-700 disabled:cursor-not-allowed\"\n            aria-label=\"Chat input\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isInputDisabled || !prompt.trim()}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 p-2 rounded-full text-gray-400 hover:bg-gray-700 hover:text-indigo-400 transition-colors duration-200 disabled:opacity-50 disabled:hover:bg-transparent disabled:cursor-not-allowed\"\n            aria-label=\"Send message\"\n          >\n            <SendIcon className=\"w-6 h-6\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","size_bytes":10570},"loop/components/ContextPanel.tsx":{"content":"\n\nimport React, { Suspense, lazy, useState } from 'react';\nimport type { BuildContext, Seed, Question } from '../types';\nimport { ALL_TAGS, TAG_GROUPS, NODE_TEMPLATES } from '../constants.tsx';\nimport { DocumentTextIcon, FilmIcon, PhotoIcon, ScissorsIcon, VideoCameraIcon, SparklesIcon, QuestionMarkCircleIcon } from './IconComponents';\nimport { OPEN_KNOWLEDGE_EVENT } from '../services/uiEvents';\n\ninterface ContextPanelProps {\n  mode: 'build' | 'sandbox';\n  buildContext?: BuildContext;\n  sandboxContext?: Record<string, string>;\n  isWeightingEnabled?: boolean;\n  onWeightingToggle?: (enabled: boolean) => void;\n  styleRigidity?: number;\n  onStyleRigidityChange?: (value: number) => void;\n  tagWeights?: Record<string, number>;\n  onTagWeightChange?: (tagId: string, weight: number) => void;\n}\n\nconst buildTypeToIcon: Record<string, React.ReactNode> = {\n    story: <FilmIcon className=\"w-5 h-5\" title=\"Story timeline\" />,\n    shot: <DocumentTextIcon className=\"w-5 h-5\" title=\"Shot timeline\" />,\n    image: <PhotoIcon className=\"w-5 h-5\" title=\"Image timeline\" />,\n    video: <VideoCameraIcon className=\"w-5 h-5\" title=\"Video timeline\" />,\n    edit: <ScissorsIcon className=\"w-5 h-5\" title=\"Edit timeline\" />,\n};\n\nconst SeedCard: React.FC<{ seed: Seed }> = ({ seed }) => {\n    return (\n        <div className=\"panel-section p-3\">\n            <div className=\"flex items-center gap-3\">\n                <div className=\"flex-shrink-0\">\n                    {buildTypeToIcon[seed.sourceBuild] || <DocumentTextIcon className=\"w-5 h-5\" title=\"Timeline\" />}\n                </div>\n                <div>\n                    <p className=\"font-semibold text-sm ink-strong\">{seed.id}</p>\n                    <p className=\"text-xs ink-subtle\">{seed.summary}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst SeedsView: React.FC<{ buildContext: BuildContext }> = ({ buildContext }) => {\n    const allSeeds = Object.keys(buildContext).flatMap(key => buildContext[key]?.seeds || []);\n\n    return (\n        <div className=\"flex flex-col gap-4 pb-6 pr-1\">\n            {allSeeds.length === 0 ? (\n                <div className=\"panel-section p-6 text-center text-sm ink-subtle\">\n                    <p className=\"font-semibold ink-strong\">No seeds generated yet.</p>\n                    <p className=\"mt-1\">Complete a build to create a seed.</p>\n                </div>\n            ) : (\n                <div className=\"space-y-4\">\n                {Object.keys(buildContext).map((buildType) => {\n                    const buildData = buildContext[buildType];\n                    if (!buildData || buildData.seeds.length === 0) return null;\n                    const buildTypeTitle = buildType.charAt(0).toUpperCase() + buildType.slice(1);\n                    return (\n                        <div key={buildType}>\n                            <h3 className=\"text-xs font-semibold uppercase ink-subtle mb-2 px-2\">{buildTypeTitle} Seeds</h3>\n                            <div className=\"space-y-2\">\n                               {buildData.seeds.map((seed: Seed) => <SeedCard key={seed.id} seed={seed} />)}\n                            </div>\n                        </div>\n                    )\n                })}\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst TagsView: React.FC<{ sandboxContext: Record<string, string> }> = ({ sandboxContext }) => {\n    const filledTags = Object.keys(sandboxContext);\n    \n    return (\n         <div className=\"flex flex-col gap-4 pb-6 pr-1\">\n            {filledTags.length === 0 ? (\n                <div className=\"panel-section p-6 text-center text-sm ink-subtle\">\n                    <SparklesIcon className=\"w-8 h-8 mx-auto mb-2\" title=\"Awaiting context\" />\n                    <p className=\"font-semibold ink-strong\">Your context will appear here.</p>\n                    <p className=\"mt-1\">Start chatting to build your project.</p>\n                </div>\n            ) : (\n                <div className=\"space-y-4\">\n                    {Object.keys(ALL_TAGS).map(buildType => {\n                        const tagsForBuild = ALL_TAGS[buildType as keyof typeof ALL_TAGS];\n                        const filledTagsForBuild = (tagsForBuild as Question[]).filter(tag => filledTags.includes(tag.id));\n                        \n                        if (filledTagsForBuild.length === 0) return null;\n\n                        const buildTypeTitle = buildType.charAt(0).toUpperCase() + buildType.slice(1);\n\n                        return (\n                            <div key={buildType}>\n                                <h3 className=\"text-xs font-semibold uppercase ink-subtle mb-2 px-2\">{buildTypeTitle} Tags</h3>\n                                <div className=\"space-y-2\">\n                                    {filledTagsForBuild.map((tag: Question) => (\n                                        <div key={tag.id} className=\"panel-section p-3\">\n                                            <p className=\"font-semibold ink-strong truncate\">{tag.text}</p>\n                                            <p className=\"mt-1 pl-2 border-l-2 border-[hsl(var(--ring))] ink-subtle text-sm\">\n                                                {sandboxContext[tag.id]}\n                                            </p>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            )}\n        </div>\n    )\n}\n\nconst WeightsView: React.FC<Omit<ContextPanelProps, 'mode' | 'buildContext' | 'sandboxContext'>> = ({\n    isWeightingEnabled, onWeightingToggle, styleRigidity, onStyleRigidityChange, tagWeights, onTagWeightChange\n}) => {\n    return (\n        <div className=\"flex flex-col gap-4 pb-6 pr-1\">\n            <div className=\"panel-section p-3\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                        <label htmlFor=\"enable-weighting\" className=\"font-bold ink-strong\">Enable Tag Weighting</label>\n                        <QuestionMarkCircleIcon className=\"w-4 h-4 opacity-70\" title=\"Weighting help\" />\n                    </div>\n                    <button\n                        role=\"switch\"\n                        aria-checked={isWeightingEnabled}\n                        onClick={() => onWeightingToggle?.(!isWeightingEnabled)}\n                        className={`relative inline-flex h-6 w-11 items-center rounded-full toggle-track ${\n                            isWeightingEnabled ? 'switch-on' : ''\n                        }`}\n                        id=\"enable-weighting\"\n                    >\n                        <span className={`inline-block h-4 w-4 transform rounded-full toggle-thumb ${\n                            isWeightingEnabled ? 'translate-x-6' : 'translate-x-1'\n                        }`} />\n                    </button>\n                </div>\n            </div>\n\n            <div className={`transition-opacity duration-300 ${isWeightingEnabled ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}>\n                 <div className=\"panel-section p-3 mb-4\">\n                    <label htmlFor=\"style-rigidity\" className=\"block font-bold ink-strong mb-2\">Style Rigidity</label>\n                    <input\n                        id=\"style-rigidity\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={styleRigidity}\n                        onChange={(e) => onStyleRigidityChange?.(parseInt(e.target.value, 10))}\n                        className=\"w-full\"\n                        disabled={!isWeightingEnabled}\n                    />\n                     <div className=\"text-xs ink-subtle flex justify-between\">\n                        <span>More AI Freedom</span>\n                        <span>Strict Adherence</span>\n                    </div>\n                </div>\n\n                {Object.entries(TAG_GROUPS).map(([groupName, tagIds]) => (\n                    <details key={groupName} className=\"panel-section mb-2 overflow-hidden\" open>\n                        <summary className=\"font-bold ink-strong p-3 cursor-pointer\">{groupName}</summary>\n                        <div className=\"p-3 border-t border-[hsl(var(--border))] space-y-3\">\n                            {tagIds.map((tagId: string) => {\n                                const tag = NODE_TEMPLATES[tagId];\n                                if (!tag) return null;\n                                return (\n                                    <div key={tagId}>\n                                        <label className=\"block text-sm ink-strong mb-1 line-clamp-1\" title={tag.name}>{tag.name}</label>\n                                        <input\n                                            type=\"range\"\n                                            min=\"0\"\n                                            max=\"200\"\n                                            value={Math.round((tagWeights?.[tagId] ?? 1.0) * 100)}\n                                            onChange={(e) => onTagWeightChange?.(tagId, parseInt(e.target.value, 10) / 100)}\n                                            className=\"w-full\"\n                                            disabled={!isWeightingEnabled}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </details>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n\nconst KnowledgeBasePanel = lazy(() => import('./KnowledgeBasePanel'));\n\nconst ContextPanel: React.FC<ContextPanelProps> = (props) => {\n  const { mode, buildContext, sandboxContext } = props;\n  const initialTab = mode === 'build' ? 'seeds' : 'tags';\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const TABS = {\n      build: [\n          {id: 'seeds', label: 'Project Seeds'},\n          {id: 'weights', label: 'Tag Weights'},\n          {id: 'knowledge', label: 'Knowledge'}\n      ],\n      sandbox: [\n          {id: 'tags', label: 'Sandbox Context'},\n          {id: 'weights', label: 'Tag Weights'},\n          {id: 'knowledge', label: 'Knowledge'}\n      ]\n  };\n\n  const currentTabs = TABS[mode];\n\n  // If the active tab is not in the current mode's tabs, reset it.\n  React.useEffect(() => {\n      if (!currentTabs.find(t => t.id === activeTab)) {\n          setActiveTab(initialTab);\n      }\n  }, [mode, activeTab, initialTab, currentTabs]);\n\n  React.useEffect(() => {\n      const openKnowledgeTab = () => setActiveTab('knowledge');\n      window.addEventListener(OPEN_KNOWLEDGE_EVENT, openKnowledgeTab);\n      return () => {\n          window.removeEventListener(OPEN_KNOWLEDGE_EVENT, openKnowledgeTab);\n      };\n  }, []);\n\n  return (\n    <aside className=\"glass-card w-full max-h-full flex flex-col p-4\">\n        <div className=\"flex-shrink-0 mb-3 border-b border-[hsl(var(--border))] pb-2\">\n            <nav className=\"flex -mb-px\">\n                {currentTabs.map(tab => (\n                    <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id)}\n                        className={`flex-1 py-2 px-1 text-center border-b-2 font-medium text-sm transition-colors ${\n                            activeTab === tab.id\n                            ? 'border-[hsl(var(--ring))] ink-strong'\n                            : 'border-transparent ink-subtle hover:ink-strong hover:border-[hsl(var(--border))]'}`\n                        }\n                    >\n                        {tab.label}\n                    </button>\n                ))}\n            </nav>\n        </div>\n       <div className=\"flex-1 min-h-0\">\n            {activeTab === 'seeds' && (\n                <div className=\"h-full overflow-y-auto custom-scrollbar pr-1\">\n                    <SeedsView buildContext={buildContext || {}} />\n                </div>\n            )}\n            {activeTab === 'tags' && (\n                <div className=\"h-full overflow-y-auto custom-scrollbar pr-1\">\n                    <TagsView sandboxContext={sandboxContext || {}} />\n                </div>\n            )}\n            {activeTab === 'weights' && (\n                <div className=\"h-full overflow-y-auto custom-scrollbar pr-1\">\n                    <WeightsView {...props} />\n                </div>\n            )}\n            {activeTab === 'knowledge' && (\n                <Suspense fallback={<div className=\"panel-section p-4 text-sm ink-subtle\">Loading knowledge base…</div>}>\n                    <div className=\"h-full\">\n                        <KnowledgeBasePanel />\n                    </div>\n                </Suspense>\n            )}\n       </div>\n    </aside>\n  );\n};\n\nexport default ContextPanel;","size_bytes":12874},"loop/components/IconComponents.tsx":{"content":"import React from 'react';\n\ntype IconProps = {\n  className?: string;\n  title?: string;\n};\n\nconst getAccessibilityProps = (title?: string) =>\n  title\n    ? { role: 'img' as const }\n    : ({ role: 'img' as const, 'aria-hidden': true as const } as const);\n\nconst renderTitle = (title?: string) => (title ? <title>{title}</title> : null);\n\nexport const FracturedLoopLogo: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const infinityId = `${gradientId}-infinity`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 120 120\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={infinityId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"50%\" stopColor=\"hsl(var(--primary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M30 60c0-16.6 13.4-30 30-30s30 13.4 30 30c0 16.6-13.4 30-30 30s-30-13.4-30-30zM60 30c-11 0-20 9-20 20s9 20 20 20 20-9 20-20-9-20-20-20z\"\n          fill={`url(#${infinityId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M45 45c5-5 13-5 18 0s5 13 0 18-13 5-18 0-5-13 0-18z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M75 45c5-5 13-5 18 0s5 13 0 18-13 5-18 0-5-13 0-18z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"54\" cy=\"54\" r=\"3\" fill=\"hsl(var(--ink))\" />\n        <circle cx=\"66\" cy=\"54\" r=\"3\" fill=\"hsl(var(--ink))\" />\n        <path\n          d=\"M42 78h36\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"3\"\n          strokeLinecap=\"round\"\n          strokeDasharray=\"6 4\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const ChatBubbleLeftRightIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-chat-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M5.4 4.2h7.9c1.6 0 2.9 1.3 2.9 2.9v3.8c0 1.6-1.3 2.9-2.9 2.9h-1.6l-3.3 3-.4-3H7.1c-1.6 0-2.9-1.3-2.9-2.9V7.1C4.2 5.5 4.6 4.2 5.4 4.2z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.3\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M14.4 11c.7-.7 1.6-1.1 2.6-1.1 1.9 0 3.5 1.4 3.5 3.2 0 1.1-.6 2.1-1.5 2.7l.6 2.7-3-1.8c-2 0-3.6-1.5-3.6-3.3 0-.8.2-1.5.7-2.1\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6.3 6.2h6.5\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6.3 8.8h5\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <rect\n          x=\"15\"\n          y=\"5\"\n          width=\"4.6\"\n          height=\"1.6\"\n          rx=\"0.6\"\n          fill=\"hsl(var(--accent))\"\n          transform=\"rotate(-12 15 5)\"\n        />\n        <circle cx=\"9.2\" cy=\"12.2\" r=\"1\" fill=\"hsl(var(--card))\" />\n        <circle cx=\"11.5\" cy=\"12.2\" r=\"1\" fill=\"hsl(var(--card))\" />\n        <circle cx=\"7\" cy=\"12.2\" r=\"1\" fill=\"hsl(var(--card))\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const ArrowRightOnRectangleIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-exit-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"3.5\"\n          y=\"4.2\"\n          width=\"10.5\"\n          height=\"15.6\"\n          rx=\"2.4\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n        />\n        <path\n          d=\"M5.8 8.4h6.4v6.4H5.8z\"\n          fill=\"none\"\n          stroke=\"hsl(var(--secondary-foreground))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"2 1.2\"\n        />\n        <path\n          d=\"M12.2 12h6.2\"\n          stroke={`url(#${fillId})`}\n          strokeWidth=\"1.8\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M15.7 9.2l3 2.8-3 2.8\"\n          fill=\"none\"\n          stroke={`url(#${fillId})`}\n          strokeWidth=\"1.8\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M7.4 6.4l3.4-2.4 1.6 2.4\"\n          fill=\"none\"\n          stroke=\"hsl(var(--secondary))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const CubeTransparentIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const faceId = `${gradientId}-cube-face`;\n  const edgeId = `${gradientId}-cube-edge`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={faceId} x1=\"20%\" y1=\"0%\" x2=\"80%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--card))\" />\n        </linearGradient>\n        <linearGradient id={edgeId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M12 3l7.2 4.2v9.6L12 21 4.8 16.8V7.2z\"\n          fill={`url(#${faceId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M12 3v18\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeDasharray=\"2.6 1.6\"\n        />\n        <path\n          d=\"M4.8 7.2l7.2 4.2 7.2-4.2\"\n          fill=\"none\"\n          stroke={`url(#${edgeId})`}\n          strokeWidth=\"1.3\"\n          strokeLinecap=\"round\"\n        />\n        <circle cx=\"12\" cy=\"11.4\" r=\"1.2\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"0.9\" />\n        <path\n          d=\"M7.2 14.8h2.8v2.8H7.2z\"\n          fill=\"hsl(var(--accent))\"\n          opacity=\"0.8\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const DocumentTextIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-doc-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M6.4 3.6h7.1l3.7 3.7V20c0 1.3-1.1 2.4-2.4 2.4H6.4C5.1 22.4 4 21.3 4 20V5.9C4 4.6 5.1 3.6 6.4 3.6z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M13.2 3.6v3.9h3.9\"\n          fill=\"none\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M7.8 10.2h8.4\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.8 13.3h5.7\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.8 16.5h6.9\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M9 6.3h4.3\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M15.6 15.6l2.6 1.4-2.6 1.4\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const FilmIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const boardId = `${gradientId}-board`;\n  const panelId = `${gradientId}-panel`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={boardId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n        <linearGradient id={panelId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M4.2 7.5L16.5 4l3.3 2.8v10.8l-12.3 3.5-3.3-2.8z\"\n          fill={`url(#${boardId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M4.2 10.4l12.3-3.5v7.6L4.2 18z\"\n          fill={`url(#${panelId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5.7 11.6h4.2v3.2H5.7zM11.2 10.1h4.2v3.2h-4.2z\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n        />\n        <path\n          d=\"M15 4l3.8 3.4\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.3 5.7l3.6-1\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M17.1 12.8c1.5-.7 3 .2 3.2 1.8.1.8-.2 1.6-.8 2.2l.5 2.2-2.6-1.5c-1.6.1-3-1.1-3-2.7 0-1.2.7-2.3 1.7-2.7z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PhotoIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const frameId = `${gradientId}-photo-frame`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={frameId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"3.5\"\n          y=\"4\"\n          width=\"17\"\n          height=\"15.5\"\n          rx=\"2.6\"\n          fill={`url(#${frameId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n        />\n        <path\n          d=\"M4.8 15.5l3.6-3.9c.5-.6 1.4-.6 1.9 0l1.9 2.1 2.9-3.1c.5-.5 1.3-.4 1.8.1l2.3 2.8\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.3\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"9.6\" cy=\"8.6\" r=\"2.1\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--primary-foreground))\" strokeWidth=\"1.1\" />\n        <path\n          d=\"M6.2 5.6h6.8\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n          strokeDasharray=\"1.4 1.4\"\n        />\n        <path\n          d=\"M5 18.5l2.2 2.5 2.1-2.5\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const ArrowUturnLeftIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const arrowId = `${gradientId}-uturn-arrow`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={arrowId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M18.5 6.2h-4.8c-3.8 0-6.9 3.1-6.9 6.9v1.1L4 11.7l3.4-4.8\"\n          fill=\"none\"\n          stroke={`url(#${arrowId})`}\n          strokeWidth=\"1.6\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M13.8 6.2c3.8 0 6.9 3.1 6.9 6.9s-3.1 6.9-6.9 6.9H9\"\n          fill=\"none\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinecap=\"round\"\n          strokeDasharray=\"3 1.4\"\n        />\n        <circle cx=\"13.8\" cy=\"13.1\" r=\"2.2\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--primary-foreground))\" strokeWidth=\"1\" />\n        <path\n          d=\"M12.6 12l1.2 1.2 1.6-1.6\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const QuestionMarkCircleIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-question-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <radialGradient id={fillId} cx=\"50%\" cy=\"42%\" r=\"65%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </radialGradient>\n      </defs>\n      <g>\n        <circle\n          cx=\"12\"\n          cy=\"12\"\n          r=\"9\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n        />\n        <path\n          d=\"M8.6 9.2c.5-1.7 2-2.8 3.7-2.8 2.1 0 3.8 1.5 3.8 3.5 0 1.6-1 2.4-2.1 3.2-.8.6-1.3 1.1-1.3 2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.4\"\n          strokeLinecap=\"round\"\n        />\n        <circle cx=\"12\" cy=\"17.4\" r=\"1.1\" fill=\"hsl(var(--card))\" />\n        <path\n          d=\"M7 6.8l2-2.3 2.1 1.2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const ScissorsIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-scissors-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <circle cx=\"6.4\" cy=\"7\" r=\"3.1\" fill={`url(#${fillId})`} stroke=\"hsl(var(--ink))\" strokeWidth=\"1.2\" />\n        <circle cx=\"17.6\" cy=\"7\" r=\"3.1\" fill={`url(#${fillId})`} stroke=\"hsl(var(--ink))\" strokeWidth=\"1.2\" />\n        <path\n          d=\"M6 9.8l6.1 4.5 5.9-4.5M12.1 14.3l5.3 7\"\n          fill=\"none\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M12 14.3L6.6 21\"\n          fill=\"none\"\n          stroke=\"hsl(var(--secondary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M4.2 11.5h15.8\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"2 1\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const VideoCameraIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const bodyId = `${gradientId}-camera-body`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={bodyId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"3.5\"\n          y=\"6\"\n          width=\"13\"\n          height=\"11.5\"\n          rx=\"2.4\"\n          fill={`url(#${bodyId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n        />\n        <circle cx=\"9.8\" cy=\"11.8\" r=\"2.9\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"1.2\" />\n        <path\n          d=\"M16.5 9l4-2.4v9l-4-2.4z\"\n          fill=\"hsl(var(--accent))\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5.8 8.4h4.6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M4.8 16.2l2.4 2.4 2.3-2.4\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const SparklesIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-spark-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <radialGradient id={fillId} cx=\"50%\" cy=\"50%\" r=\"60%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"60%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </radialGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M12 3l2 5.4 5.4 2-5.4 2-2 5.6-2-5.6-5.4-2 5.4-2z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"18.4\" cy=\"6.2\" r=\"1.5\" fill=\"hsl(var(--accent))\" opacity=\"0.85\" />\n        <circle cx=\"6\" cy=\"7.2\" r=\"1.1\" fill=\"hsl(var(--secondary))\" opacity=\"0.7\" />\n        <path\n          d=\"M5 17.5h6.2\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.6 1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const SendIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-send-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M3.5 4.4l16.8 7.4-16.8 7.4 5.8-7.4z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M9.3 11.8l10.5-.9-10.5-.9\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.3 7.2l2.4 2.4\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const UserIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-user-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <circle cx=\"12\" cy=\"8\" r=\"4.1\" fill={`url(#${fillId})`} stroke=\"hsl(var(--ink))\" strokeWidth=\"1.2\" />\n        <path\n          d=\"M5.4 18.1c1.6-3.4 4.1-5.2 6.6-5.2 2.6 0 5.2 1.8 6.7 5.2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinecap=\"round\"\n        />\n        <rect x=\"7.2\" y=\"15\" width=\"9.6\" height=\"4.3\" rx=\"2\" fill=\"hsl(var(--card))\" opacity=\"0.72\" />\n        <path\n          d=\"M14.4 6.2l3 1.6-1.4 1.2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const CheckCircleIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-check-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <radialGradient id={fillId} cx=\"50%\" cy=\"45%\" r=\"65%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </radialGradient>\n      </defs>\n      <g>\n        <circle cx=\"12\" cy=\"12\" r=\"9\" fill={`url(#${fillId})`} stroke=\"hsl(var(--primary-foreground))\" strokeWidth=\"1.4\" />\n        <path\n          d=\"M7.5 12l3.2 3.2 5.6-6.3\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.6\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5.6 7.6l2-2.2 2 1.4\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PaperAirplaneIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-paper-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M3.5 11.7L19.8 4 14 20l-3.4-5.1-3.3 3.8z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.3\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M10.6 14.9l4.8-7.8\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.3 10.4l2.6.9\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const FolderIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-folder-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"50%\" x2=\"100%\" y2=\"50%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M4 6.2c0-1.1.9-2 2-2h3.7l1.9 2.4h8.4c1.1 0 2 .9 2 2V17c0 1.1-.9 2-2 2H6c-1.1 0-2-.9-2-2z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M4 9.2h16\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6.4 12.2h5.2\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.8 1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const Cog6ToothIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-cog-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <radialGradient id={fillId} cx=\"50%\" cy=\"50%\" r=\"60%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </radialGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M12 4l2.1 1.3 2.4-.5 1 2.2 2 1-1 2.2 1 2.2-2 1-1 2.2-2.4-.5L12 20l-2.1-1.3-2.4.5-1-2.2-2-1 1-2.2-1-2.2 2-1 1-2.2 2.4.5z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"12\" cy=\"12\" r=\"2.7\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"1.2\" />\n        <path\n          d=\"M9 7.6l2.2-2.5 2.4 1.4\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const MagicWandIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-wand-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M9.8 4l1.4 2.8 3.1.6-2.5 2.1.6 3.2-2.6-1.5-2.8 1.5.8-3-2.3-2 3.2-.4z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5 18.4l8.2-7.9\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.4 20.6l9.4-9\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n          strokeDasharray=\"1.8 1.2\"\n        />\n        <circle cx=\"16.9\" cy=\"6.2\" r=\"1.4\" fill=\"hsl(var(--accent))\" opacity=\"0.8\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const ChevronDownIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const strokeId = `${gradientId}-chevron-down`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={strokeId} x1=\"0%\" y1=\"100%\" x2=\"0%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M6 9.5l6 6 6-6\"\n          fill=\"none\"\n          stroke={`url(#${strokeId})`}\n          strokeWidth=\"1.8\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6.2 7.4h11.6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.6 1.2\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const ChevronUpIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const strokeId = `${gradientId}-chevron-up`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={strokeId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M6 14.5l6-6 6 6\"\n          fill=\"none\"\n          stroke={`url(#${strokeId})`}\n          strokeWidth=\"1.8\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6.2 16.6h11.6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.6 1.2\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PlayIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-play-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <circle cx=\"12\" cy=\"12\" r=\"9\" fill={`url(#${fillId})`} stroke=\"hsl(var(--primary-foreground))\" strokeWidth=\"1.4\" />\n        <path\n          d=\"M10.1 8.3l5.5 3.7-5.5 3.7z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6.4 6.6l2-2.2 2.1 1.3\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PencilIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-pencil-fill`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M4.6 5.4c0-1.1.9-2 2-2H13l2 2h3.4c1.1 0 2 .9 2 2v11.3c0 1.1-.9 2-2 2H6.6c-1.1 0-2-.9-2-2z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M12.2 4.2l5.8 5.8-3.8 3.8-5.8-5.8z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n        />\n        <path\n          d=\"M8 16.4l2.4-.7\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6.4 7h6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.6 1.2\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const XMarkIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const strokeId = `${gradientId}-xmark`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={strokeId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--destructive))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M6 6l12 12M18 6L6 18\"\n          fill=\"none\"\n          stroke={`url(#${strokeId})`}\n          strokeWidth=\"1.8\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M4.6 4.8l2-2.2 2 1.3\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const TrashIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-trash`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"5.4\"\n          y=\"7.6\"\n          width=\"13.2\"\n          height=\"12.2\"\n          rx=\"2.2\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.4\"\n        />\n        <path\n          d=\"M4 7.6h16\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M9.2 4.6l1.2-1.6h3.2l1.2 1.6\"\n          fill=\"none\"\n          stroke=\"hsl(var(--secondary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M10.6 10.4v6.2M13.4 10.4v6.2\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7 14.4h10\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.6 1\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const RocketLaunchIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-rocket`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M12 3c3 1.2 5.4 4.6 5.4 7.8 0 3.2-2.4 5.6-5.4 5.6s-5.4-2.4-5.4-5.6C6.6 7.6 9 4.2 12 3z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n        />\n        <circle cx=\"12\" cy=\"9.6\" r=\"1.6\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"1\" />\n        <path\n          d=\"M8.2 14.4l-1 4 2.4-1.2M15.8 14.4l1 4-2.4-1.2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M10.2 18.6l1.8 3 1.8-3\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6.6 6.4l2-2.2 2.1 1.2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const StoryboardIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const topId = `${gradientId}-story-top`;\n  const panelId = `${gradientId}-story-panel`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={topId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n        <linearGradient id={panelId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M4.4 6.2L14.8 3l4.8 3.2v11L9.2 20.4l-4.8-3.2z\"\n          fill={`url(#${topId})`}\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"1.2\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M4.4 9.4l10.4-2.9v7.4L4.4 16.8z\"\n          fill={`url(#${panelId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6 10.8h4.4v3.1H6zM11.4 9.4h3.4v3H11.4z\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n        />\n        <path\n          d=\"M16 12.4c1.4-.7 3.1.3 3.1 1.9 0 .9-.5 1.7-1.3 2.1l.5 2.1-2.5-1.5c-1.4.2-2.8-1-2.8-2.6 0-1.2.7-2.2 1.6-2.5z\"\n          fill=\"hsl(var(--card))\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.1\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const TimelinePanelsIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const frameId = `${gradientId}-timeline-frame`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={frameId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--secondary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"3.6\"\n          y=\"5\"\n          width=\"16.8\"\n          height=\"14\"\n          rx=\"2.4\"\n          fill={`url(#${frameId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.3\"\n        />\n        <path\n          d=\"M5.4 9.4h13.2\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <rect x=\"6.4\" y=\"6.4\" width=\"3.2\" height=\"2.4\" rx=\"0.8\" fill=\"hsl(var(--card))\" />\n        <rect x=\"11\" y=\"6.4\" width=\"3.2\" height=\"2.4\" rx=\"0.8\" fill=\"hsl(var(--accent))\" opacity=\"0.9\" />\n        <rect x=\"15.6\" y=\"6.4\" width=\"3.2\" height=\"2.4\" rx=\"0.8\" fill=\"hsl(var(--card))\" opacity=\"0.8\" />\n        <path\n          d=\"M6.4 12.6h10.8\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.8 1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6.4 15.8h7.6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M15 15.8l2.2 1.8\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const AssetCrateIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-crate`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"4.2\"\n          y=\"6\"\n          width=\"15.6\"\n          height=\"12.8\"\n          rx=\"2.4\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.3\"\n        />\n        <path\n          d=\"M6 8.8h12\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6 12h12\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"1.8 1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6 15.2h12\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M8.2 7l3-2.8 3 2.8\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1.1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"12\" cy=\"13.6\" r=\"1.4\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--primary-foreground))\" strokeWidth=\"0.9\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const RobotAssistantIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const headId = `${gradientId}-robot-head`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={headId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <rect\n          x=\"5\"\n          y=\"6\"\n          width=\"14\"\n          height=\"12\"\n          rx=\"3\"\n          fill={`url(#${headId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.3\"\n        />\n        <path\n          d=\"M8 4l2.2-1.8 1.8 1.8\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <circle cx=\"9.5\" cy=\"11.2\" r=\"1.6\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"1\" />\n        <circle cx=\"14.5\" cy=\"11.2\" r=\"1.6\" fill=\"hsl(var(--card))\" stroke=\"hsl(var(--ink))\" strokeWidth=\"1\" />\n        <path\n          d=\"M9.5 15.2h5\"\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M5 12.4H3.4M18.6 12.4H21\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M7.4 18.4l2 2 2.6-2\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const DramaMasksIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const happyId = `${gradientId}-mask-happy`;\n  const sadId = `${gradientId}-mask-sad`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={happyId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n        <linearGradient id={sadId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--card))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M5 5.6l6.4-1.6v8.4c0 2.7-1.6 4.8-4 5.6-1.8.6-3.8-.6-3.8-2.6z\"\n          fill={`url(#${happyId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n        />\n        <path\n          d=\"M9.2 9.2l-1.1 1.2M6.6 9.2l-1.1 1.2\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"0.9\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M6 12.6c.7.6 1.6 1 2.6 1s1.9-.4 2.6-1\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M12.6 6.6l6.4-1.6V13c0 2.7-1.6 4.8-4 5.6-1.8.6-3.8-.6-3.8-2.6z\"\n          fill={`url(#${sadId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.2\"\n        />\n        <path\n          d=\"M16.8 10.2l1.2 1.1M14.2 10.2l1.2 1.1\"\n          stroke=\"hsl(var(--ink))\"\n          strokeWidth=\"0.9\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M14 13.4c.7-.6 1.6-1 2.6-1s1.9.4 2.6 1\"\n          fill=\"none\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PalettePanelIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const fillId = `${gradientId}-palette`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={fillId} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--secondary))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--accent))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M5 6.2c0-1.2 1-2.2 2.2-2.2h9.6c1.2 0 2.2 1 2.2 2.2v6.6c0 1.2-1 2.2-2.2 2.2h-1.8l-2.4 2.2-.4-2.2H7.2c-1.2 0-2.2-1-2.2-2.2z\"\n          fill={`url(#${fillId})`}\n          stroke=\"hsl(var(--primary-foreground))\"\n          strokeWidth=\"1.3\"\n          strokeLinejoin=\"round\"\n        />\n        <circle cx=\"9\" cy=\"8.6\" r=\"1.1\" fill=\"hsl(var(--card))\" />\n        <circle cx=\"12\" cy=\"8.6\" r=\"1.1\" fill=\"hsl(var(--card))\" />\n        <circle cx=\"15\" cy=\"8.6\" r=\"1.1\" fill=\"hsl(var(--card))\" />\n        <path\n          d=\"M7.4 12.2h8.6\"\n          stroke=\"hsl(var(--card))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          d=\"M9.6 15.8l2.4 1.8 2.6-1.8\"\n          fill=\"none\"\n          stroke=\"hsl(var(--accent))\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport const PlusIcon: React.FC<IconProps> = ({ className, title }) => {\n  const gradientId = React.useId();\n  const strokeId = `${gradientId}-plus`;\n\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      {...getAccessibilityProps(title)}\n    >\n      {renderTitle(title)}\n      <defs>\n        <linearGradient id={strokeId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"hsl(var(--accent))\" />\n          <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" />\n        </linearGradient>\n      </defs>\n      <g>\n        <path\n          d=\"M12 5v14M5 12h14\"\n          fill=\"none\"\n          stroke={`url(#${strokeId})`}\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n\n","size_bytes":48553},"loop/components/KnowledgeBasePanel.tsx":{"content":"import React, { useMemo, useState } from 'react';\nimport { knowledgeBase } from '../services/knowledgeService';\nimport { DocumentTextIcon, FilmIcon, SparklesIcon, VideoCameraIcon } from './IconComponents';\n\nconst SearchIcon: React.FC<{ className?: string; title?: string }> = ({ className, title }) => (\n  <svg\n    className={className}\n    viewBox=\"0 0 24 24\"\n    focusable=\"false\"\n    role={title ? 'img' : 'img'}\n    aria-hidden={title ? undefined : true}\n  >\n    {title ? <title>{title}</title> : null}\n    <circle\n      cx=\"11\"\n      cy=\"11\"\n      r=\"6\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.8\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"15.5\"\n      y1=\"15.5\"\n      x2=\"20\"\n      y2=\"20\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.8\"\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\ninterface KnowledgeCategory {\n  id: keyof typeof knowledgeBase;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  items: string[];\n}\n\nconst KnowledgeBasePanel: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const categories: KnowledgeCategory[] = useMemo(\n    () => [\n      {\n        id: 'cameraMovements',\n        label: 'Camera Movements',\n        description: 'Signature moves and techniques for dynamic shots.',\n        icon: <VideoCameraIcon className=\"w-5 h-5 text-indigo-300\" title=\"Camera\" />,\n        items: knowledgeBase.cameraMovements,\n      },\n      {\n        id: 'filmTechniques',\n        label: 'Film Techniques',\n        description: 'Cinematic devices to shape tone, pacing, and emotion.',\n        icon: <FilmIcon className=\"w-5 h-5 text-indigo-300\" title=\"Film\" />,\n        items: knowledgeBase.filmTechniques,\n      },\n      {\n        id: 'storyStructures',\n        label: 'Story Structures',\n        description: 'Narrative frameworks to organize your story arc.',\n        icon: <DocumentTextIcon className=\"w-5 h-5 text-indigo-300\" title=\"Story\" />,\n        items: knowledgeBase.storyStructures,\n      },\n      {\n        id: 'sceneWritingTechniques',\n        label: 'Scene Writing',\n        description: 'Hooks, beats, and tactics for compelling scenes.',\n        icon: <SparklesIcon className=\"w-5 h-5 text-indigo-300\" title=\"Scene\" />,\n        items: knowledgeBase.sceneWritingTechniques,\n      },\n      {\n        id: 'screenplayArchetypes',\n        label: 'Screenplay Archetypes',\n        description: 'Archetypal roles and conventions from screenwriting.',\n        icon: <DocumentTextIcon className=\"w-5 h-5 text-indigo-300\" title=\"Archetype\" />,\n        items: knowledgeBase.screenplayArchetypes,\n      },\n    ],\n    []\n  );\n\n  const normalizedSearch = searchTerm.trim().toLowerCase();\n\n  const filteredCategories = useMemo(() => {\n    if (!normalizedSearch) {\n      return categories;\n    }\n\n    return categories\n      .map((category) => {\n        const matchingItems = category.items.filter((item) =>\n          item.toLowerCase().includes(normalizedSearch)\n        );\n        return { ...category, items: matchingItems };\n      })\n      .filter((category) => category.items.length > 0);\n  }, [categories, normalizedSearch]);\n\n  const hasResults = filteredCategories.length > 0;\n\n  return (\n    <div className=\"flex h-full min-h-0 flex-col gap-4\">\n      <div className=\"panel-section px-3 py-2 flex items-center gap-2\">\n        <SearchIcon className=\"w-5 h-5 ink-subtle\" title=\"Search knowledge base\" />\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={(event) => setSearchTerm(event.target.value)}\n          placeholder=\"Search camera moves, story structures, and more...\"\n          className=\"flex-1 bg-transparent text-sm ink-strong placeholder:text-[hsl(var(--muted-foreground))] focus:outline-none\"\n          aria-label=\"Search knowledge base\"\n        />\n      </div>\n\n      {!hasResults ? (\n        <div className=\"panel-section flex-1 flex items-center justify-center px-6 py-8 text-center text-sm ink-subtle\">\n          <p>No results. Try a different term like “arc” or “dolly”.</p>\n        </div>\n      ) : (\n        <div className=\"flex-1 min-h-0 overflow-hidden\">\n          <div className=\"flex h-full min-h-0 flex-col gap-3 overflow-hidden\">\n            <div className=\"flex-1 min-h-0 overflow-y-auto custom-scrollbar space-y-3 pr-1\">\n              {filteredCategories.map((category) => (\n                <section key={category.id} className=\"panel-section overflow-hidden\">\n                  <header className=\"flex items-start gap-3 p-4 border-b border-[hsl(var(--border))]\">\n                    <div className=\"mt-1\">{category.icon}</div>\n                    <div>\n                      <h3 className=\"text-base font-semibold ink-strong\">{category.label}</h3>\n                      <p className=\"text-xs ink-subtle\">{category.description}</p>\n                    </div>\n                  </header>\n                  <ul className=\"p-4 grid gap-2 text-sm ink-strong\">\n                    {category.items.map((item) => (\n                      <li key={item} className=\"panel-surface rounded-lg px-3 py-2 text-sm\">\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </section>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default KnowledgeBasePanel;\n","size_bytes":5317},"loop/components/LoadingSpinner.tsx":{"content":"\nimport React from 'react';\nimport { SparklesIcon } from './IconComponents';\n\nconst LoadingSpinner: React.FC = () => {\n    return (\n        <div className=\"flex items-center gap-2 text-gray-400\">\n            <SparklesIcon className=\"w-5 h-5 animate-pulse\" />\n            <span>Thinking...</span>\n        </div>\n    );\n};\n\nexport default LoadingSpinner;\n","size_bytes":353},"loop/components/ReferenceViewer.tsx":{"content":"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { knowledgeBase } from '../services/knowledgeService';\nimport {\n  DocumentTextIcon,\n  FilmIcon,\n  SparklesIcon,\n  VideoCameraIcon,\n  XMarkIcon,\n} from './IconComponents';\n\ninterface ReferenceViewerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ntype KnowledgeCategoryId =\n  | 'cameraMovements'\n  | 'filmTechniques'\n  | 'storyStructures'\n  | 'sceneWritingTechniques'\n  | 'screenplayArchetypes';\n\ninterface KnowledgeCategory {\n  id: KnowledgeCategoryId;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  items: string[];\n}\n\ninterface ContextSection {\n  title: string;\n  content: string;\n}\n\nconst escapeRegExp = (value: string) => value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nconst ReferenceViewer: React.FC<ReferenceViewerProps> = ({ isOpen, onClose }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [activeCategory, setActiveCategory] = useState<'all' | KnowledgeCategoryId>('all');\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const dialogTitleId = React.useId();\n  const dialogDescriptionId = React.useId();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSearchTerm('');\n      setActiveCategory('all');\n      return;\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        event.preventDefault();\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    const timeout = window.setTimeout(() => {\n      searchInputRef.current?.focus();\n    }, 120);\n\n    const originalOverflow = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener('keydown', handleKeyDown);\n      document.body.style.overflow = originalOverflow;\n    };\n  }, [isOpen, onClose]);\n\n  const categories = useMemo<KnowledgeCategory[]>(\n    () => [\n      {\n        id: 'cameraMovements',\n        label: 'Camera Movements',\n        description: 'Signature moves and techniques for dynamic shots.',\n        icon: <VideoCameraIcon className=\"w-5 h-5 text-primary\" title=\"Camera\" />,\n        items: knowledgeBase.cameraMovements,\n      },\n      {\n        id: 'filmTechniques',\n        label: 'Film Techniques',\n        description: 'Cinematic devices to shape tone, pacing, and emotion.',\n        icon: <FilmIcon className=\"w-5 h-5 text-primary\" title=\"Film\" />,\n        items: knowledgeBase.filmTechniques,\n      },\n      {\n        id: 'storyStructures',\n        label: 'Story Structures',\n        description: 'Narrative frameworks to organize your story arc.',\n        icon: <DocumentTextIcon className=\"w-5 h-5 text-primary\" title=\"Story\" />,\n        items: knowledgeBase.storyStructures,\n      },\n      {\n        id: 'sceneWritingTechniques',\n        label: 'Scene Writing',\n        description: 'Hooks, beats, and tactics for compelling scenes.',\n        icon: <SparklesIcon className=\"w-5 h-5 text-primary\" title=\"Scene\" />,\n        items: knowledgeBase.sceneWritingTechniques,\n      },\n      {\n        id: 'screenplayArchetypes',\n        label: 'Screenplay Archetypes',\n        description: 'Archetypal roles and conventions from screenwriting.',\n        icon: <DocumentTextIcon className=\"w-5 h-5 text-primary\" title=\"Archetypes\" />,\n        items: knowledgeBase.screenplayArchetypes,\n      },\n    ],\n    []\n  );\n\n  const structuredContext = useMemo<ContextSection[]>(() => {\n    const rawSections = knowledgeBase.fullContext.split('\\n## ');\n    const sections: ContextSection[] = [];\n\n    rawSections.forEach((section, index) => {\n      const trimmed = section.trim();\n      if (!trimmed) return;\n\n      const lines = trimmed.split('\\n');\n      if (!lines.length) return;\n\n      if (index === 0) {\n        const titleLine = lines[0].replace(/^#\\s*/, '').trim();\n        const content = lines.slice(1).join('\\n').trim();\n        if (titleLine) {\n          sections.push({ title: titleLine, content });\n        }\n        return;\n      }\n\n      const titleLine = lines[0].trim();\n      const content = lines.slice(1).join('\\n').trim();\n      if (titleLine) {\n        sections.push({ title: titleLine, content });\n      }\n    });\n\n    return sections;\n  }, []);\n\n  const normalizedSearch = searchTerm.trim().toLowerCase();\n\n  const searchPattern = useMemo(() => {\n    if (!normalizedSearch) return null;\n    return new RegExp(`(${escapeRegExp(normalizedSearch)})`, 'ig');\n  }, [normalizedSearch]);\n\n  const visibleCategories = useMemo(() => {\n    if (activeCategory === 'all') return categories;\n    return categories.filter((category) => category.id === activeCategory);\n  }, [activeCategory, categories]);\n\n  const filteredCategories = useMemo(() => {\n    if (!normalizedSearch) {\n      return visibleCategories;\n    }\n\n    return visibleCategories\n      .map((category) => {\n        const filteredItems = category.items.filter((item) =>\n          item.toLowerCase().includes(normalizedSearch)\n        );\n        return { ...category, items: filteredItems };\n      })\n      .filter((category) => category.items.length > 0);\n  }, [normalizedSearch, visibleCategories]);\n\n  const hasResults = filteredCategories.length > 0;\n\n  const totalItems = useMemo(\n    () => categories.reduce((sum, category) => sum + category.items.length, 0),\n    [categories]\n  );\n\n  const activeTotal = useMemo(() => {\n    if (activeCategory === 'all') return totalItems;\n    const category = categories.find((entry) => entry.id === activeCategory);\n    return category ? category.items.length : 0;\n  }, [activeCategory, categories, totalItems]);\n\n  const highlightMatches = useCallback(\n    (text: string) => {\n      if (!searchPattern) return text;\n      const segments = text.split(searchPattern);\n      return segments.map((segment, index) =>\n        index % 2 === 1 ? (\n          <mark\n            key={`${segment}-${index}`}\n            className=\"rounded-sm bg-primary/30 px-1 text-primary-foreground\"\n          >\n            {segment}\n          </mark>\n        ) : (\n          <React.Fragment key={`${segment}-${index}`}>{segment}</React.Fragment>\n        )\n      );\n    },\n    [searchPattern]\n  );\n\n  const contextMatches = useMemo(() => {\n    if (!normalizedSearch) return [] as ContextSection[];\n\n    return structuredContext.filter((section) => {\n      const haystack = `${section.title}\\n${section.content}`.toLowerCase();\n      return haystack.includes(normalizedSearch);\n    });\n  }, [normalizedSearch, structuredContext]);\n\n  const renderContextSnippet = useCallback(\n    (content: string) => {\n      if (!normalizedSearch) {\n        return content;\n      }\n\n      const lowerContent = content.toLowerCase();\n      const matchIndex = lowerContent.indexOf(normalizedSearch);\n      if (matchIndex === -1) {\n        return content;\n      }\n\n      const start = Math.max(0, matchIndex - 80);\n      const end = Math.min(content.length, matchIndex + normalizedSearch.length + 120);\n      const snippet = `${start > 0 ? '…' : ''}${content.slice(start, end)}${end < content.length ? '…' : ''}`;\n\n      if (!searchPattern) {\n        return snippet;\n      }\n\n      const segments = snippet.split(searchPattern);\n      return segments.map((segment, index) =>\n        index % 2 === 1 ? (\n          <mark\n            key={`context-${segment}-${index}`}\n            className=\"rounded-sm bg-primary/30 px-1 text-primary-foreground\"\n          >\n            {segment}\n          </mark>\n        ) : (\n          <React.Fragment key={`context-${segment}-${index}`}>{segment}</React.Fragment>\n        )\n      );\n    },\n    [normalizedSearch, searchPattern]\n  );\n\n  const handleOverlayClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.target === overlayRef.current) {\n      onClose();\n    }\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={overlayRef}\n      onMouseDown={handleOverlayClick}\n      className=\"fixed inset-0 z-[70] flex items-center justify-center bg-ink/70 backdrop-blur\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby={dialogTitleId}\n      aria-describedby={dialogDescriptionId}\n    >\n      <div className=\"relative mx-4 w-full max-w-5xl rounded-3xl border border-border bg-card/90 shadow-[0_45px_120px_rgba(0,0,0,0.45)]\">\n        <div className=\"flex items-start justify-between gap-4 border-b border-border px-6 py-5\">\n          <div className=\"space-y-1\">\n            <h2 id={dialogTitleId} className=\"text-xl font-semibold text-foreground\">\n              Creative Reference Library\n            </h2>\n            <p id={dialogDescriptionId} className=\"text-sm text-muted-foreground\">\n              Browse curated notes from the knowledge base without leaving your workspace flow.\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            onClick={onClose}\n            className=\"rounded-full border border-border bg-card/5 p-2 text-muted-foreground transition hover:bg-card/10\"\n            aria-label=\"Close reference viewer\"\n          >\n            <XMarkIcon className=\"h-5 w-5\" title=\"Close\" />\n          </button>\n        </div>\n\n        <div className=\"flex flex-col gap-5 px-6 py-5\">\n          <div className=\"flex flex-col gap-4 rounded-2xl border border-border bg-card/80 p-4 shadow-inner\">\n            <div className=\"flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n              <div className=\"text-xs uppercase tracking-[0.35em] text-primary/80\">\n                Reference Filters\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Showing <span className=\"text-primary\">{hasResults ? filteredCategories.reduce((sum, cat) => sum + cat.items.length, 0) : 0}</span> of{' '}\n                <span className=\"text-primary\">{activeTotal}</span> entries\n              </div>\n            </div>\n\n            <div className=\"flex flex-wrap gap-2\">\n              <button\n                type=\"button\"\n                onClick={() => setActiveCategory('all')}\n                className={`flex items-center gap-2 rounded-full border px-4 py-1.5 text-xs font-semibold transition ${\n                  activeCategory === 'all'\n                    ? 'border-primary/60 bg-primary/20 text-primary-foreground'\n                    : 'border-border bg-card/5 text-muted-foreground hover:border-primary/40 hover:text-primary-foreground'\n                }`}\n              >\n                All\n                <span className=\"rounded-full bg-card/40 px-2 py-0.5 text-[0.65rem] font-medium\">\n                  {totalItems}\n                </span>\n              </button>\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  type=\"button\"\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`flex items-center gap-2 rounded-full border px-4 py-1.5 text-xs font-semibold transition ${\n                    activeCategory === category.id\n                      ? 'border-primary/60 bg-primary/20 text-primary-foreground'\n                      : 'border-border bg-card/5 text-muted-foreground hover:border-primary/40 hover:text-primary-foreground'\n                  }`}\n                >\n                  {category.label}\n                  <span className=\"rounded-full bg-card/40 px-2 py-0.5 text-[0.65rem] font-medium\">\n                    {category.items.length}\n                  </span>\n                </button>\n              ))}\n            </div>\n\n            <label className=\"relative flex items-center gap-2 rounded-xl border border-border bg-card/40 px-4 py-2 text-sm text-foreground focus-within:border-primary/60\">\n              <span className=\"text-muted-foreground\">🔍</span>\n              <input\n                ref={searchInputRef}\n                type=\"search\"\n                value={searchTerm}\n                onChange={(event) => setSearchTerm(event.target.value)}\n                placeholder=\"Search camera moves, archetypes, structures...\"\n                className=\"w-full bg-transparent text-sm text-foreground placeholder:text-muted-foreground focus:outline-none\"\n                aria-label=\"Filter reference library\"\n              />\n              {searchTerm && (\n                <button\n                  type=\"button\"\n                  onClick={() => setSearchTerm('')}\n                  className=\"rounded-full bg-card/10 px-2 py-1 text-[0.65rem] uppercase tracking-[0.2em] text-foreground transition hover:bg-card/20\"\n                >\n                  Clear\n                </button>\n              )}\n            </label>\n          </div>\n\n          {normalizedSearch && contextMatches.length > 0 && (\n            <div className=\"rounded-2xl border border-primary/40 bg-primary/30 p-4\">\n              <h3 className=\"text-sm font-semibold text-primary-foreground\">\n                In-depth notes matching \"{searchTerm}\"\n              </h3>\n              <div className=\"mt-3 space-y-3\">\n                {contextMatches.map((section) => (\n                  <div\n                    key={section.title}\n                    className=\"rounded-xl border border-border bg-card/40 p-3 text-sm text-foreground\"\n                  >\n                    <div className=\"text-xs uppercase tracking-[0.3em] text-primary/80\">\n                      {section.title}\n                    </div>\n                    <p className=\"mt-2 whitespace-pre-wrap text-sm text-foreground\">\n                      {renderContextSnippet(section.content)}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid gap-4 sm:grid-cols-2\">\n            {!hasResults ? (\n              <div className=\"col-span-full rounded-2xl border border-border bg-card/80 p-10 text-center text-sm text-muted-foreground\">\n                No quick-reference results. Try a different term or view the full notes below.\n              </div>\n            ) : (\n              filteredCategories.map((category) => (\n                <section\n                  key={category.id}\n                  className=\"flex flex-col gap-3 rounded-2xl border border-border bg-card/80 p-4\"\n                >\n                  <header className=\"flex items-start gap-3\">\n                    <div className=\"mt-1 shrink-0\">{category.icon}</div>\n                    <div className=\"space-y-1\">\n                      <h3 className=\"text-base font-semibold text-foreground\">{category.label}</h3>\n                      <p className=\"text-xs text-muted-foreground\">{category.description}</p>\n                    </div>\n                  </header>\n                  <ul className=\"space-y-2 text-sm text-foreground\">\n                    {category.items.map((item) => (\n                      <li\n                        key={item}\n                        className=\"rounded-xl border border-border bg-card/5 px-3 py-2\"\n                      >\n                        {highlightMatches(item)}\n                      </li>\n                    ))}\n                  </ul>\n                </section>\n              ))\n            )}\n          </div>\n\n          <details className=\"group rounded-2xl border border-border bg-card/80 p-4 text-sm text-foreground\">\n            <summary className=\"flex cursor-pointer items-center justify-between gap-2 text-sm font-semibold text-foreground\">\n              <span>View full knowledge notes</span>\n              <span className=\"text-xs uppercase tracking-[0.3em] text-primary/70 transition group-open:text-primary-foreground\">\n                Expand\n              </span>\n            </summary>\n            <div className=\"mt-4 max-h-80 space-y-4 overflow-y-auto pr-2 text-sm text-foreground\">\n              {structuredContext.map((section) => (\n                <article key={section.title} className=\"space-y-2 rounded-xl border border-border bg-card/40 p-3\">\n                  <h4 className=\"text-xs uppercase tracking-[0.3em] text-primary/80\">\n                    {section.title}\n                  </h4>\n                  <div className=\"whitespace-pre-wrap text-sm text-muted-foreground\">\n                    {section.content}\n                  </div>\n                </article>\n              ))}\n            </div>\n          </details>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReferenceViewer;\n","size_bytes":16434},"loop/components/Sidebar.tsx":{"content":"import React from 'react';\nimport { BUILDS } from '../constants.tsx';\nimport type { Workflow } from '../types';\nimport { FracturedLoopLogo, ArrowUturnLeftIcon, CheckCircleIcon } from './IconComponents';\nimport { dispatchOpenKnowledgeEvent } from '../services/uiEvents';\n\ninterface SidebarProps {\n  selectedBuild: string;\n  onSelectBuild: (build: string) => void;\n  onGoBackToLanding: () => void;\n  workflow: Workflow | null;\n  completedBuilds: Set<string>;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ selectedBuild, onSelectBuild, onGoBackToLanding, workflow, completedBuilds }) => {\n  const handleOpenKnowledge = () => {\n    dispatchOpenKnowledgeEvent();\n  };\n\n  return (\n    <aside className=\"bg-gray-800/50 w-64 p-4 flex flex-col fixed inset-y-0 left-0\">\n      <div className=\"flex items-center gap-2 px-2 mb-4\">\n        <FracturedLoopLogo className=\"w-8 h-8\" title=\"Fractured Loop\" />\n        <h1 className=\"text-xl font-bold text-gray-100\">Fractured Loop</h1>\n      </div>\n      \n      <button \n        onClick={onGoBackToLanding}\n        className=\"flex items-center gap-3 w-full px-3 py-2 rounded-lg text-left transition-colors duration-200 text-gray-300 hover:bg-gray-700 hover:text-white\"\n        aria-label=\"Back to Home\"\n      >\n        <ArrowUturnLeftIcon className=\"w-5 h-5\" />\n        <span className=\"font-medium\">Back to Home</span>\n      </button>\n\n      <div className=\"border-t border-gray-700 my-4\"></div>\n\n      {workflow && (\n        <div className=\"px-3 mb-3\">\n          <p className=\"text-xs uppercase text-gray-500 font-semibold\">Workflow</p>\n          <h2 className=\"text-lg font-bold text-indigo-300\">{workflow.name}</h2>\n        </div>\n      )}\n\n      <nav className=\"flex flex-col gap-2\">\n        {BUILDS.map((build) => {\n          const isSelected = selectedBuild === build.id;\n          const isCompleted = completedBuilds.has(build.id);\n          const isInWorkflow = workflow ? workflow.builds.includes(build.id) : true;\n          \n          if (!isInWorkflow) {\n            return null;\n          }\n\n          return (\n            <button\n              key={build.id}\n              onClick={() => onSelectBuild(build.id)}\n              className={`flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-colors duration-200 ${\n                isSelected\n                  ? 'bg-indigo-600 text-white shadow-lg'\n                  : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n              }`}\n            >\n              {isCompleted ? <CheckCircleIcon className=\"w-6 h-6\" title=\"Build completed\" /> : build.icon}\n              <span className={`font-medium ${isCompleted ? 'line-through text-gray-400' : ''}`}>{build.name}</span>\n            </button>\n          )\n        })}\n      </nav>\n      <button\n        onClick={handleOpenKnowledge}\n        className=\"mt-6 px-3 py-2 rounded-lg text-sm font-medium border border-indigo-500/60 text-indigo-200 hover:bg-indigo-600/20 transition-colors\"\n        type=\"button\"\n      >\n        Open Knowledge Base\n      </button>\n      <div className=\"mt-auto text-center text-xs text-gray-500\">\n        <p>Powered by Gemini</p>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;","size_bytes":3177},"loop/components/Timeline.tsx":{"content":"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport type { Project, Track, Layer, TimelineItem } from '../types';\n\ninterface TimelineProps {\n  project: Project;\n  setProject: React.Dispatch<React.SetStateAction<Project>>;\n  selectedNodeId: string | null;\n  setSelectedNodeId: React.Dispatch<React.SetStateAction<string | null>>;\n  selectedConnectionId: string | null;\n  setSelectedConnectionId: React.Dispatch<React.SetStateAction<string | null>>;\n  onAssetDrop: (assetId: string, trackId: string, startTime: number, layerId?: string) => void;\n}\n\nconst Timeline: React.FC<TimelineProps> = ({\n  project,\n  setProject,\n  selectedNodeId,\n  setSelectedNodeId,\n  selectedConnectionId,\n  setSelectedConnectionId,\n  onAssetDrop\n}) => {\n  const [selectedItemId, setSelectedItemId] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isResizing, setIsResizing] = useState(false);\n  const dragRef = useRef<{ itemId: string; startX: number; startTime: number; startDuration: number; trackId: string; layerId?: string } | null>(null);\n\n  // Extract data from project\n  const tracks = project.tracks || [];\n  const timelineItems = project.timelineItems || [];\n  const assets = project.assets;\n\n  const handleItemMove = (itemId: string, newStartTime: number, newTrackId: string, newLayerId?: string) => {\n    setProject(prev => ({\n      ...prev,\n      timelineItems: prev.timelineItems ? prev.timelineItems.map((item: TimelineItem) =>\n        item.id === itemId\n          ? { ...item, startTime: newStartTime, trackId: newTrackId, layerId: newLayerId }\n          : item\n      ) : [],\n      updatedAt: new Date()\n    }));\n  };\n\n  const handleItemResize = (itemId: string, newDuration: number) => {\n    setProject(prev => ({\n      ...prev,\n      timelineItems: prev.timelineItems ? prev.timelineItems.map((item: TimelineItem) =>\n        item.id === itemId ? { ...item, duration: newDuration } : item\n      ) : [],\n      updatedAt: new Date()\n    }));\n  };\n\n  const handleItemSelect = (itemId: string) => {\n    setSelectedItemId(itemId);\n    setSelectedNodeId(null);\n    setSelectedConnectionId(null);\n  };\n\n  // Handle drop on timeline layer\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>, trackId: string, layerId?: string) => {\n    e.preventDefault();\n    const assetId = e.dataTransfer.getData('text/plain');\n    if (!assetId) return;\n\n    // Calculate start time based on drop position\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const startTime = Math.max(0, x / 10); // 10px per second\n\n    onAssetDrop(assetId, trackId, startTime, layerId);\n  }, [onAssetDrop]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); // Allow drop\n  }, []);\n\n  // Helper to get asset by id\n  const getAssetById = (id: string) => assets.find(a => a.id === id);\n\n  // Global mouse event handlers for drag and resize\n  useEffect(() => {\n    const handleGlobalMouseMove = (e: MouseEvent) => {\n      if (isDragging && dragRef.current) {\n        e.preventDefault();\n        const deltaX = e.clientX - dragRef.current.startX;\n        const deltaSeconds = deltaX / 10; // 10px per second\n        const newStartTime = Math.max(0, dragRef.current.startTime + deltaSeconds);\n        handleItemMove(dragRef.current.itemId, newStartTime, dragRef.current.trackId, dragRef.current.layerId);\n      } else if (isResizing && dragRef.current) {\n        e.preventDefault();\n        const deltaX = e.clientX - dragRef.current.startX;\n        const deltaSeconds = deltaX / 10; // 10px per second\n        const newDuration = Math.max(0.1, dragRef.current.startDuration + deltaSeconds);\n        handleItemResize(dragRef.current.itemId, newDuration);\n      }\n    };\n\n    const handleGlobalMouseUp = () => {\n      setIsDragging(false);\n      setIsResizing(false);\n      dragRef.current = null;\n    };\n\n    if (isDragging || isResizing) {\n      document.addEventListener('mousemove', handleGlobalMouseMove);\n      document.addEventListener('mouseup', handleGlobalMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\n      document.removeEventListener('mouseup', handleGlobalMouseUp);\n    };\n  }, [isDragging, isResizing, handleItemMove, handleItemResize]);\n\n  // Render timeline items for a track or layer\n  const renderItems = (trackId: string, layerId?: string) => {\n    return timelineItems\n      .filter(item => item.trackId === trackId && item.layerId === layerId)\n      .map(item => {\n        const asset = getAssetById(item.assetId);\n        if (!asset) return null;\n\n        // Calculate item style based on startTime and duration (assuming 1 second = 10px for example)\n        const left = item.startTime * 10;\n        const width = item.duration * 10;\n\n        const isSelected = selectedItemId === item.id;\n\n        const onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n          e.stopPropagation();\n          setSelectedItemId(item.id);\n          setSelectedNodeId(null);\n          setSelectedConnectionId(null);\n          setIsDragging(true);\n          dragRef.current = { itemId: item.id, startX: e.clientX, startTime: item.startTime, startDuration: item.duration, trackId, layerId };\n        };\n\n        const onResizeMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n          e.stopPropagation();\n          setIsResizing(true);\n          dragRef.current = { itemId: item.id, startX: e.clientX, startTime: item.startTime, startDuration: item.duration, trackId, layerId };\n        };\n\n        return (\n          <div\n            key={item.id}\n            className={`timeline-item ${isSelected ? 'selected' : ''}`}\n            style={{\n              position: 'absolute',\n              left,\n              width,\n              top: 2,\n              height: 'calc(100% - 4px)',\n              backgroundColor: isSelected ? '#6366f1' : '#4b5563',\n              borderRadius: 4,\n              cursor: 'pointer',\n              color: 'white',\n              padding: '2px 6px',\n              boxSizing: 'border-box',\n              userSelect: 'none',\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n            onClick={() => handleItemSelect(item.id)}\n            onMouseDown={onMouseDown}\n            title={asset.name}\n          >\n            <span>{asset.name}</span>\n            <div\n              style={{\n                width: 8,\n                height: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: isSelected ? '#4f46e5' : '#6b7280',\n                borderRadius: '0 4px 4px 0'\n              }}\n              onMouseDown={onResizeMouseDown}\n            />\n          </div>\n        );\n      });\n  };\n\n  return (\n    <div className=\"timeline-container\" style={{ overflowX: 'auto', whiteSpace: 'nowrap', position: 'relative', height: '300px', backgroundColor: '#1f2937', padding: '10px' }}>\n      {tracks.map((track: Track) => (\n        <div key={track.id} className=\"timeline-track\" style={{ position: 'relative', height: track.layers ? track.layers.length * 40 : 40, marginBottom: 10, borderBottom: '1px solid #374151' }}>\n          <div className=\"track-name\" style={{ color: '#9ca3af', fontWeight: 'bold', marginBottom: 4 }}>\n            {track.name}\n          </div>\n          {track.layers ? (\n            track.layers.map((layer: Layer) => (\n              <div\n                key={layer.id}\n                className=\"timeline-layer\"\n                style={{ position: 'relative', height: 36, marginBottom: 4, backgroundColor: '#374151', borderRadius: 4 }}\n                onDrop={(e) => handleDrop(e, track.id, layer.id)}\n                onDragOver={handleDragOver}\n              >\n                <div className=\"layer-name\" style={{ position: 'absolute', left: 4, top: 8, color: '#d1d5db', fontSize: 12, fontWeight: '600' }}>\n                  {layer.name}\n                </div>\n                {renderItems(track.id, layer.id)}\n              </div>\n            ))\n          ) : (\n            <div\n              className=\"timeline-layer\"\n              style={{ position: 'relative', height: 36, backgroundColor: '#374151', borderRadius: 4 }}\n              onDrop={(e) => handleDrop(e, track.id)}\n              onDragOver={handleDragOver}\n            >\n              {renderItems(track.id)}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Timeline;\n","size_bytes":8659},"loop/components/UserGuide.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  QuestionMarkCircleIcon,\n  XMarkIcon,\n  RocketLaunchIcon,\n  StoryboardIcon,\n  TimelinePanelsIcon,\n  AssetCrateIcon,\n  RobotAssistantIcon,\n  MagicWandIcon,\n  DramaMasksIcon,\n  FilmIcon,\n  PalettePanelIcon,\n} from './IconComponents';\n\ninterface UserGuideProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst UserGuide: React.FC<UserGuideProps> = ({ isOpen, onClose }) => {\n  const [activeTab, setActiveTab] = useState('getting-started');\n\n  if (!isOpen) return null;\n\n  const tabs = [\n    { id: 'getting-started', label: 'Meet Loop', icon: '🌈' },\n    { id: 'builds', label: 'Guided Modes', icon: '🪄' },\n    { id: 'timeline', label: 'Timelines', icon: '🧵' },\n    { id: 'assets', label: 'Sidebars & Assets', icon: '🗂️' },\n    { id: 'ai-chat', label: 'AI Studio', icon: '🤖' }\n  ];\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'getting-started':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-bold ink-strong\">Welcome to Loop</h3>\n              <p className=\"ink-subtle leading-relaxed\">\n                Loop is the pastel glass workspace for cinematic builders. Glide between timelines, curated sidebars, and an adaptive AI studio to spin ideas into master assets while the brand keeps everything feeling light, luminous, and precise.\n              </p>\n              <div className=\"flex flex-wrap gap-2\">\n                <span className=\"badge-accent px-3 py-1 text-[0.65rem] uppercase tracking-[0.2em]\">Pastel Glass UI</span>\n                <span className=\"badge-accent px-3 py-1 text-[0.65rem] uppercase tracking-[0.2em]\">Dual Timelines</span>\n                <span className=\"badge-accent px-3 py-1 text-[0.65rem] uppercase tracking-[0.2em]\">AI Knowledge Chips</span>\n              </div>\n            </div>\n\n            <div className=\"grid gap-4 sm:grid-cols-2\">\n              <div className=\"panel-section p-4 space-y-2\">\n                <h4 className=\"text-lg font-semibold ink-strong flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"workspace\">🪟</span>\n                  Workspace Layout\n                </h4>\n                <ul className=\"space-y-1 text-sm ink-subtle leading-relaxed list-disc list-inside\">\n                  <li><strong className=\"ink-strong\">Left sidebar:</strong> drag pastel asset chips onto the Primary Timeline.</li>\n                  <li><strong className=\"ink-strong\">Center canvas:</strong> swap between Timelines and Chat with the glass toggles.</li>\n                  <li><strong className=\"ink-strong\">Right sidebar:</strong> dial in controls, knowledge weights, and detail panels.</li>\n                </ul>\n              </div>\n              <div className=\"panel-section p-4 space-y-2\">\n                <h4 className=\"text-lg font-semibold ink-strong flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"themes\">🎨</span>\n                  Chat Themes & Knowledge\n                </h4>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Choose a chat theme that matches your creative vibe and tap the shimmering knowledge suggestions under the composer to instantly load context-rich prompts.\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'builds':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-bold ink-strong\">Guided Modes</h3>\n              <p className=\"ink-subtle leading-relaxed\">\n                Loop’s guided modes weave AI expertise into every step. Each mode mirrors the redesigned controls—sidebar assets, timeline handles, and chat suggestions—so your answers become ready-to-drop blocks.\n              </p>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-3\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Launch a Mode</h4>\n              <ol className=\"list-decimal list-inside space-y-2 ink-subtle leading-relaxed text-sm\">\n                <li>Open the <strong className=\"ink-strong\">Chat</strong> panel and tap the <span className=\"badge-accent px-2 py-0.5 text-[0.65rem] uppercase tracking-[0.18em]\">🪄 Magic Wand</span> beside the composer.</li>\n                <li>Select a mode card—each mirrors a column in the workspace.</li>\n                <li>Answer the prompts; progress chips light up as you move through sections.</li>\n                <li>Choose <strong className=\"ink-strong\">Complete Mode</strong> to send the results straight into the timeline or asset list.</li>\n              </ol>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <div className=\"panel-section p-4 space-y-2\">\n                <h5 className=\"font-semibold ink-strong text-base flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"narrative\">📖</span>\n                  Narrative Mode\n                </h5>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Plot your characters, arcs, and thematic beats. Answers land as story seeds on the <strong className=\"ink-strong\">Primary Timeline</strong> with lineage IDs ready for promotion.\n                </p>\n              </div>\n              <div className=\"panel-section p-4 space-y-2\">\n                <h5 className=\"font-semibold ink-strong text-base flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"frame\">🎬</span>\n                  Frame Mode\n                </h5>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Define camera language, lenses, and motion. Generated shot blocks snap into the Secondary Timeline when a master story is active.\n                </p>\n              </div>\n              <div className=\"panel-section p-4 space-y-2\">\n                <h5 className=\"font-semibold ink-strong text-base flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"style\">🖌️</span>\n                  Style Mode\n                </h5>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Craft AI-ready image prompts, sync palettes, and apply pastel style chips across selected shots using the styling timeline controls.\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'timeline':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-bold ink-strong\">Timelines</h3>\n              <p className=\"ink-subtle leading-relaxed\">\n                Every project flows through layered timelines. Use the pastel tabs above the canvas to hop between Primary seeds, Master assemblies, Styling sweeps, and Director suggestions.\n              </p>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-3\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Primary Timeline (Seed Loop)</h4>\n              <ul className=\"space-y-2 ink-subtle leading-relaxed text-sm list-disc list-inside\">\n                <li><strong className=\"ink-strong\">Drop:</strong> drag chips from the Asset Library or complete a guided mode.</li>\n                <li><strong className=\"ink-strong\">Expand:</strong> click a block to open the chat editor with contextual suggestions.</li>\n                <li><strong className=\"ink-strong\">Promote:</strong> use the floating action to lock in a Master asset when it feels right.</li>\n              </ul>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-3\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Secondary Timeline (Master Loop)</h4>\n              <ul className=\"space-y-2 ink-subtle leading-relaxed text-sm list-disc list-inside\">\n                <li>Generated Masters appear as frosted blocks—non-destructive and lineage-aware.</li>\n                <li>Trigger <strong className=\"ink-strong\">Frame Mode</strong> continuations to spawn shot stacks under each story beat.</li>\n                <li>Use the end-cap <span className=\"badge-accent px-2 py-0.5 text-[0.65rem] uppercase tracking-[0.18em]\">✂️ Edit</span> button for transition and B-roll suggestions.</li>\n              </ul>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-3\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Styling & Director Timelines</h4>\n              <p className=\"ink-subtle leading-relaxed text-sm\">\n                Apply global looks via pastel style chips, then review director notes for pacing, texture, and sound. Each adjustment respects seed IDs, so continuity stays intact across loops.\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'assets':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-bold ink-strong\">Sidebars & Assets</h3>\n              <p className=\"ink-subtle leading-relaxed\">\n                Loop’s sidebars carry the brand glow—frosted folders on the left, precision controls on the right. Everything you drop into a timeline flows from these panels.\n              </p>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <div className=\"panel-section p-4 space-y-2\">\n                <h4 className=\"text-lg font-semibold ink-strong flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"library\">🗂️</span>\n                  Asset Library\n                </h4>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Expand folders to reveal draggable chips for Story, Image, and Video inputs. Hover to see pastel halos, then drag directly to any timeline lane.\n                </p>\n                <ul className=\"text-sm ink-subtle space-y-1 list-disc list-inside\">\n                  <li>Primary: characters, arcs, story beats.</li>\n                  <li>Secondary: locations, props, sonic cues.</li>\n                  <li>Tertiary: transitions, textures, technical specs.</li>\n                </ul>\n              </div>\n              <div className=\"panel-section p-4 space-y-2\">\n                <h4 className=\"text-lg font-semibold ink-strong flex items-center gap-2\">\n                  <span role=\"img\" aria-label=\"inspector\">🧪</span>\n                  Inspector & Controls\n                </h4>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  Select any block to open the frosted inspector on the right. Adjust fields with dropdowns, fine-tune weights, or add tags without losing seed lineage.\n                </p>\n                <p className=\"text-sm ink-subtle leading-relaxed\">\n                  The Control deck beneath lets you toggle Tag Weighting, tweak Style Rigidity, and trigger Generate for rapid iterations.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-2\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Knowledge Suggestions</h4>\n              <p className=\"text-sm ink-subtle leading-relaxed\">\n                Keep an eye on the contextual knowledge chips appearing below chat prompts and inside expanded blocks. Apply them to auto-fill fields with studio-grade references sourced from Loop’s knowledge base.\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'ai-chat':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-xl font-bold ink-strong\">AI Studio</h3>\n              <p className=\"ink-subtle leading-relaxed\">\n                The chat is Loop’s studio brain. Swap themes, stack knowledge suggestions, and let the assistant translate your direction into timeline-ready outputs.\n              </p>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-2\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Studio Features</h4>\n              <ul className=\"space-y-2 ink-subtle leading-relaxed text-sm list-disc list-inside\">\n                <li><strong className=\"ink-strong\">Theme selector:</strong> shift the interface palette and tone for brainstorming, technical breakdowns, or director notes.</li>\n                <li><strong className=\"ink-strong\">Knowledge suggestions:</strong> tap chips to instantly cite references, lighting setups, or narrative frameworks.</li>\n                <li><strong className=\"ink-strong\">Mode shortcuts:</strong> Magic Wand toggles Narrative, Frame, and Style modes without leaving the chat.</li>\n                <li><strong className=\"ink-strong\">Master iteration:</strong> use the cube icon to remix promoted assets while preserving their seed lineage.</li>\n              </ul>\n            </div>\n\n            <div className=\"panel-section p-4 space-y-2\">\n              <h4 className=\"text-lg font-semibold ink-strong\">Tips for Best Results</h4>\n              <ul className=\"space-y-2 ink-subtle leading-relaxed text-sm list-disc list-inside\">\n                <li>Reference the timeline block ID you’re refining for precise callbacks.</li>\n                <li>Pair cinematic references (directors, lenses, palettes) with knowledge chips for high-fidelity prompts.</li>\n                <li>Ask for remix paths—Loop can suggest alternate shots, tones, or edit passes while honoring your master assets.</li>\n                <li>Use chat themes to set the tone: playful for ideation, technical for production planning.</li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-xl z-50 flex items-center justify-center p-4\">\n      <div className=\"glass-card max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        <div className=\"flex items-center justify-between px-6 py-5 border-b border-[hsl(var(--border))]\">\n          <div className=\"flex items-center gap-3\">\n            <QuestionMarkCircleIcon className=\"w-8 h-8\" title=\"User guide\" />\n            <h2 className=\"text-2xl font-bold ink-strong\">User Guide</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-[hsl(var(--muted-foreground))] hover:text-[hsl(var(--ink))] transition-colors\"\n            aria-label=\"Close user guide\"\n          >\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"flex h-[calc(90vh-80px)]\">\n          <div className=\"w-64 border-r border-[hsl(var(--border))] p-4 bg-[hsl(var(--card)/0.6)]\">\n            <nav className=\"space-y-2\">\n              {tabs.map(tab => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`w-full text-left px-3 py-2 rounded-xl transition-all border ${\n                    activeTab === tab.id\n                      ? 'bg-card ink-strong border-[hsl(var(--ring))] shadow-[0_12px_24px_hsl(var(--primary)/0.25)]'\n                      : 'text-[hsl(var(--muted-foreground))] border-transparent hover:bg-[hsl(var(--card)/0.45)] hover:text-[hsl(var(--ink))]'\n                  }`}\n                >\n                  <span className=\"mr-2\">{tab.icon}</span>\n                  {tab.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          <div className=\"flex-1 p-6 overflow-y-auto custom-scrollbar bg-[hsl(var(--card)/0.35)]\">\n            {renderTabContent()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserGuide;\n","size_bytes":15823},"loop/components/Workspace.tsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { ChatRole } from '../types';\nimport type { Project, Asset, Message, TimelineBlock } from '../types';\nimport { ASSET_TEMPLATES, FIELD_OPTIONS } from '../constants';\nimport { generateFromWorkspace, generateSandboxResponse, isMockMode } from '../services/geminiService';\nimport { FolderIcon, SparklesIcon, CubeTransparentIcon, ChatBubbleLeftRightIcon, Cog6ToothIcon, MagicWandIcon, QuestionMarkCircleIcon, DocumentTextIcon, TrashIcon, XMarkIcon, FracturedLoopLogo, PlusIcon } from './IconComponents';\nimport ChatAssistant from './ChatAssistant';\nimport UserGuide from './UserGuide';\n\nimport { createCollection, addDocuments, queryDocuments } from '../services/mcpService';\nimport { apiConfig } from '../services/config';\nimport { ApiConfig } from './ApiConfig';\n\nconst ReferenceViewer = React.lazy(() => import('./ReferenceViewer'));\n\nconst getTimelineAssetColor = (asset: Asset) => {\n  const template = ASSET_TEMPLATES[asset.type];\n  if (template?.category === 'story') {\n    return 'rgba(255, 250, 205, 0.3)'; // faded warm yellow\n  } else if (template?.category === 'visual') {\n    return 'rgba(224, 246, 255, 0.3)'; // faded cool blue\n  }\n  return undefined;\n};\n\ninterface WorkspaceProps {\n  appLabel: string;\n  project: Project;\n  setProject: React.Dispatch<React.SetStateAction<Project>>;\n  tagWeights: Record<string, number>;\n  styleRigidity: number;\n  isWeightingEnabled: boolean;\n  onTagWeightChange: (tagId: string, weight: number) => void;\n  onStyleRigidityChange: (value: number) => void;\n  onWeightingToggle: (enabled: boolean) => void;\n}\n\n// Optimized Dropdown Component\nconst OptimizedDropdown = ({\n  value,\n  options,\n  onChange,\n  placeholder,\n  className = \"\"\n}: {\n  value: string;\n  options: string[];\n  onChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\n\n  const filteredOptions = options.filter(option =>\n    option.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleSelect = (option: string) => {\n    onChange(option);\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n      setSearchTerm('');\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const selectedOption = options.find(option => option === value);\n\n  return (\n    <div ref={dropdownRef} className={`relative ${className}`}>\n      <div\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full dropdown-trigger px-3 py-2 flex items-center justify-between\"\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            setIsOpen(!isOpen);\n          }\n        }}\n      >\n        <span className={selectedOption ? 'ink-strong' : 'dropdown-placeholder'}>\n          {selectedOption || placeholder || 'Select option...'}\n        </span>\n        <span className=\"dropdown-icon ml-2\">\n          {isOpen ? '▲' : '▼'}\n        </span>\n      </div>\n\n      {isOpen && (\n        <div className=\"absolute z-50 w-full mt-1 dropdown-menu max-h-60\">\n          {options.length > 5 && (\n            <div className=\"p-2\" style={{ borderBottom: '1px solid hsl(var(--border))' }}>\n              <input\n                type=\"text\"\n                placeholder=\"Search options...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full dropdown-search px-2 py-1 text-sm\"\n                onClick={(e) => e.stopPropagation()}\n              />\n            </div>\n          )}\n\n          <div className=\"max-h-48 overflow-y-auto\">\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option) => (\n                <div\n                  key={option}\n                  onClick={() => handleSelect(option)}\n                  className={`px-3 py-2 cursor-pointer dropdown-option ${\n                    option === value ? 'is-active' : ''\n                  }`}\n                >\n                  {option}\n                </div>\n              ))\n            ) : (\n              <div className=\"px-3 py-2 text-sm dropdown-empty\">\n                No options found\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Sub-components\nfunction AssetLibraryPanel({ onAddAsset }: { onAddAsset: (templateType: string, folder?: string) => void }) {\n  const [expandedFolders, setExpandedFolders] = useState<Record<string, boolean>>({\n    story: true,\n    visual: true\n  });\n\n  const handleMouseEnter = (folder: string) => {\n    setExpandedFolders(prev => ({ ...prev, [folder]: true }));\n  };\n\n  const handleMouseLeave = (folder: string) => {\n    setExpandedFolders(prev => ({ ...prev, [folder]: false }));\n  };\n\n  const groupedTemplates = Object.values(ASSET_TEMPLATES).reduce((acc, template) => {\n    if (!acc[template.category]) acc[template.category] = [];\n    acc[template.category].push(template);\n    return acc;\n  }, {} as Record<string, typeof ASSET_TEMPLATES[keyof typeof ASSET_TEMPLATES][]>);\n\n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, templateType: string) => {\n    e.dataTransfer.setData('text/plain', templateType);\n  };\n\n  const getAssetCardColor = (templateType: string) => {\n    const template = ASSET_TEMPLATES[templateType];\n    if (template?.category === 'story') {\n      return '#FFFACD'; // muted warm yellow\n    } else if (template?.category === 'visual') {\n      return '#E0F6FF'; // muted cool blue\n    }\n    return undefined;\n  };\n\n  return (\n    <aside className=\"glass-card h-full w-full p-4 flex flex-col overflow-y-auto custom-scrollbar\">\n      <div className=\"flex items-center gap-2 px-2 mb-4\">\n        <h1 className=\"text-xl font-bold ink-strong\">Library</h1>\n      </div>\n      <div className=\"space-y-4\">\n        {Object.keys(groupedTemplates).map(folder => (\n          <div key={folder} className=\"space-y-2\">\n            <div\n              onClick={() => setExpandedFolders(prev => ({ ...prev, [folder]: !prev[folder] }))}\n              className=\"w-full text-left font-medium folder-toggle cursor-pointer\"\n            >\n              {folder.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n              <span className=\"float-right transition-transform duration-200\">\n                <svg\n                  className={`w-4 h-4 transition-transform duration-200 ${expandedFolders[folder] ? 'rotate-0' : '-rotate-90'}`}\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </span>\n            </div>\n            {expandedFolders[folder] && (\n              <div className=\"space-y-1 ml-4\">\n                {groupedTemplates[folder].map(template => (\n                  <div\n                    key={template.type}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, template.type)}\n                    className=\"p-2 asset-card cursor-move group\"\n                    style={{ backgroundColor: getAssetCardColor(template.type) }}\n                  >\n                    <div className=\"font-medium ink-strong\">{template.name}</div>\n                    <div className=\"overflow-hidden max-h-0 group-hover:max-h-96 opacity-0 group-hover:opacity-100 transition-all duration-200 text-xs\">\n                      <div className=\"mt-2\">\n                        <div className=\"mb-1\">{template.description}</div>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {template.tags?.map((tag) => (\n                            <span key={tag} className=\"badge-accent px-1 py-0.5 text-xs\">\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </aside>\n  );\n};\n\ntype FolderKey = string;\n\ninterface UndoState {\n  asset: Asset;\n  blocks: TimelineBlock[];\n  folderAssignments: { folder: FolderKey; block: TimelineBlock }[];\n}\n\ntype ToastKind = 'info' | 'success' | 'warning';\n\ninterface ToastState {\n  id: string;\n  message: string;\n  allowUndo?: boolean;\n  kind?: ToastKind;\n}\n\ninterface ConfirmModalProps {\n  isOpen: boolean;\n  title: string;\n  description: string;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nconst ConfirmModal: React.FC<ConfirmModalProps> = ({\n  isOpen,\n  title,\n  description,\n  confirmLabel = 'Confirm',\n  cancelLabel = 'Cancel',\n  onConfirm,\n  onCancel\n}) => {\n  const dialogRef = React.useRef<HTMLDivElement>(null);\n  const confirmButtonRef = React.useRef<HTMLButtonElement>(null);\n  const titleId = React.useId();\n  const descriptionId = React.useId();\n\n  React.useEffect(() => {\n    if (!isOpen) return;\n    const dialogNode = dialogRef.current;\n    if (!dialogNode) return;\n\n    const previouslyFocusedElement = document.activeElement as HTMLElement | null;\n    const focusableElements = Array.from(\n      dialogNode.querySelectorAll<HTMLElement>(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      )\n    ).filter(element => !element.hasAttribute('disabled'));\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        event.preventDefault();\n        onCancel();\n      }\n\n      if (event.key === 'Tab' && focusableElements.length > 0) {\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        if (event.shiftKey) {\n          if (document.activeElement === firstElement) {\n            event.preventDefault();\n            lastElement.focus();\n          }\n        } else if (document.activeElement === lastElement) {\n          event.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n\n    const focusTimeout = window.setTimeout(() => {\n      (confirmButtonRef.current || focusableElements[0])?.focus();\n    }, 0);\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.clearTimeout(focusTimeout);\n      document.removeEventListener('keydown', handleKeyDown);\n      previouslyFocusedElement?.focus();\n    };\n  }, [isOpen, onCancel]);\n\n  if (!isOpen) return null;\n\n  const handleBackdropClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.target === event.currentTarget) {\n      onCancel();\n    }\n  };\n\n  return (\n    <div\n      className=\"glass-modal-backdrop\"\n      onMouseDown={handleBackdropClick}\n      role=\"presentation\"\n    >\n      <div\n        ref={dialogRef}\n        className=\"glass-modal\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n      >\n        <div className=\"glass-modal__header\">\n          <h2 id={titleId} className=\"glass-modal__title ink-strong\">{title}</h2>\n        </div>\n        <p id={descriptionId} className=\"glass-modal__description\">\n          {description}\n        </p>\n        <div className=\"glass-modal__actions\">\n          <button\n            ref={confirmButtonRef}\n            className=\"modal-button modal-button--destructive\"\n            onClick={onConfirm}\n          >\n            {confirmLabel}\n          </button>\n          <button\n            className=\"modal-button modal-button--ghost\"\n            onClick={onCancel}\n          >\n            {cancelLabel}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface ToastNotificationProps {\n  toast: ToastState | null;\n  onDismiss: () => void;\n  onUndo?: () => void;\n}\n\nconst ToastNotification: React.FC<ToastNotificationProps> = ({ toast, onDismiss, onUndo }) => {\n  if (!toast) return null;\n\n  return (\n    <div className=\"toast-container\">\n      <div\n        className=\"toast-notification\"\n        data-kind={toast.kind || 'info'}\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        tabIndex={0}\n      >\n        <span className=\"toast-message\">{toast.message}</span>\n        <div className=\"toast-actions\">\n          {toast.allowUndo && onUndo && (\n            <button className=\"toast-action\" onClick={onUndo}>\n              Undo\n            </button>\n          )}\n          <button\n            className=\"toast-dismiss\"\n            onClick={onDismiss}\n            aria-label=\"Dismiss notification\"\n          >\n            ✕\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst reindexBlocks = (blocks: TimelineBlock[]) =>\n  blocks.map((block, index) => ({ ...block, position: index }));\n\nconst restoreBlocksWithPositions = (\n  existingBlocks: TimelineBlock[],\n  restoredBlocks: TimelineBlock[]\n) => {\n  const sortedRestored = [...restoredBlocks].sort((a, b) => a.position - b.position);\n  const mergedBlocks = [...existingBlocks];\n\n  sortedRestored.forEach(block => {\n    const insertIndex = Math.min(block.position, mergedBlocks.length);\n    mergedBlocks.splice(insertIndex, 0, { ...block });\n  });\n\n  return reindexBlocks(mergedBlocks);\n};\n\nconst ASSET_NAME_SUGGESTION_KEY = 'asset_name';\n\nconst AssetDetailsPanel = ({\n  selectedAssetId,\n  project,\n  onUpdateAsset,\n  onDeleteAsset,\n  onClose,\n  onRequestSuggestion\n}: {\n  selectedAssetId: string | null;\n  project: Project;\n  onUpdateAsset: (assetId: string, updates: Partial<Asset>) => void;\n  onDeleteAsset: (asset: Asset) => void;\n  onClose: () => void;\n  onRequestSuggestion: (context: {\n    assetId: string;\n    fieldKey: string;\n    fieldLabel: string;\n    currentValue: string;\n  }) => Promise<string | null>;\n}) => {\n  const [suggestionStates, setSuggestionStates] = useState<Record<string, {\n    isLoading: boolean;\n    proposal: string | null;\n    error: string | null;\n  }>>({});\n\n  React.useEffect(() => {\n    setSuggestionStates({});\n  }, [selectedAssetId]);\n\n  if (!selectedAssetId) return null;\n\n  const asset = project.assets.find(a => a.id === selectedAssetId);\n  if (!asset) return null;\n\n  const handleDelete = () => {\n    onDeleteAsset(asset);\n  };\n\n  // Parse content into fields and values\n  const parseContent = (content: string) => {\n    const lines = content.split('\\n');\n    const fields: Record<string, string> = {};\n\n    lines.forEach(line => {\n      const colonIndex = line.indexOf(':');\n      if (colonIndex > 0) {\n        const fieldName = line.substring(0, colonIndex).trim().toLowerCase().replace(/\\s+/g, '_');\n        const fieldValue = line.substring(colonIndex + 1).trim();\n        fields[fieldName] = fieldValue;\n      }\n    });\n\n    return fields;\n  };\n\n  // Update content when a field changes\n  const updateField = (fieldName: string, value: string) => {\n    const fields = parseContent(asset.content);\n    fields[fieldName] = value;\n\n    // Reconstruct content\n    const newContent = Object.entries(fields)\n      .map(([key, val]) => `${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}: ${val}`)\n      .join('\\n');\n\n    onUpdateAsset(asset.id, { content: newContent });\n  };\n\n  const parsedFields = parseContent(asset.content);\n\n  const requestSuggestionForField = async (fieldKey: string, fieldLabel: string, currentValue: string) => {\n    setSuggestionStates(prev => ({\n      ...prev,\n      [fieldKey]: {\n        isLoading: true,\n        proposal: prev[fieldKey]?.proposal ?? null,\n        error: null\n      }\n    }));\n\n    try {\n      const suggestion = await onRequestSuggestion({\n        assetId: asset.id,\n        fieldKey,\n        fieldLabel,\n        currentValue\n      });\n\n      setSuggestionStates(prev => ({\n        ...prev,\n        [fieldKey]: {\n          isLoading: false,\n          proposal: suggestion ?? null,\n          error: suggestion ? null : 'No suggestion received.'\n        }\n      }));\n    } catch (error) {\n      if (import.meta.env?.DEV) {\n        console.error('Failed to fetch suggestion', error);\n      }\n      setSuggestionStates(prev => ({\n        ...prev,\n        [fieldKey]: {\n          isLoading: false,\n          proposal: null,\n          error: 'Unable to fetch suggestion.'\n        }\n      }));\n    }\n  };\n\n  const clearSuggestionForField = (fieldKey: string) => {\n    setSuggestionStates(prev => {\n      const next = { ...prev };\n      delete next[fieldKey];\n      return next;\n    });\n  };\n\n  const renderSuggestionPreview = (fieldKey: string, onApply: (value: string) => void) => {\n    const suggestionState = suggestionStates[fieldKey];\n    if (!suggestionState) return null;\n\n    if (suggestionState.isLoading) {\n      return (\n        <div className=\"mt-2 text-xs ink-subtle flex items-center gap-2\">\n          <SparklesIcon className=\"w-3 h-3 animate-spin\" />\n          Requesting suggestion...\n        </div>\n      );\n    }\n\n    if (suggestionState.error) {\n      return (\n        <div className=\"mt-2 text-xs text-red-500\">\n          {suggestionState.error}\n        </div>\n      );\n    }\n\n    if (!suggestionState.proposal) return null;\n\n    return (\n      <div className=\"mt-2 p-3 rounded-md border border-dashed border-[hsl(var(--border))] bg-[hsl(var(--card)/0.6)]\">\n        <div className=\"text-xs font-semibold uppercase tracking-wide ink-subtle mb-2\">Suggested update</div>\n        <div className=\"text-sm whitespace-pre-wrap ink-strong\">{suggestionState.proposal}</div>\n        <div className=\"flex items-center gap-2 mt-3\">\n          <button\n            type=\"button\"\n            className=\"text-xs font-semibold px-3 py-1 rounded-md bg-[hsl(var(--primary))] text-[hsl(var(--primary-foreground))] hover:opacity-90\"\n            onClick={() => {\n              onApply(suggestionState.proposal!);\n              clearSuggestionForField(fieldKey);\n            }}\n          >\n            Apply suggestion\n          </button>\n          <button\n            type=\"button\"\n            className=\"text-xs font-semibold px-3 py-1 rounded-md bg-[hsl(var(--muted))] text-[hsl(var(--muted-foreground))] hover:opacity-90\"\n            onClick={() => clearSuggestionForField(fieldKey)}\n          >\n            Dismiss\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  // Map field names to their dropdown options using FIELD_OPTIONS\n  const getFieldOptions = (fieldKey: string): string[] => {\n    // First, try if fieldKey is a key in FIELD_OPTIONS with options\n    if (FIELD_OPTIONS[fieldKey] && FIELD_OPTIONS[fieldKey].options) {\n      return FIELD_OPTIONS[fieldKey].options;\n    }\n\n    // Then, try to find fieldKey as subkey in nested FIELD_OPTIONS\n    const options: string[] = [];\n    for (const [_, value] of Object.entries(FIELD_OPTIONS)) {\n      if (value && typeof value === 'object' && value[fieldKey] && Array.isArray(value[fieldKey])) {\n        options.push(...value[fieldKey]);\n      }\n    }\n    if (options.length > 0) {\n      return [...new Set(options)];\n    }\n\n    // Fallback to special mappings for cases where fieldKey doesn't match\n    const specialMappings: Record<string, string> = {\n      'genre': 'story_genres',\n      'tone': 'story_tones',\n      'shot_type': 'shot_types',\n      'style_reference': 'style_references',\n      'camera_type': 'camera_types',\n      'focal_length': 'camera_focal_lengths',\n      'depth_of_field_/_aperture': 'camera_apertures',\n      'film_stock_/_look': 'film_stocks',\n      'camera_movement': 'camera_movements',\n      'lighting': 'lighting_styles',\n      'lighting_technical': 'lighting_technical_details',\n      'color_grading_style': 'color_grading_styles',\n      'color_technical': 'color_technical_details',\n      'framing_&_composition': 'framing_composition',\n      'character_blocking': 'character_blocking',\n      'texture_/_atmosphere_/_effects': 'texture_atmosphere',\n      'film_emulation_/_grain': 'film_emulation',\n      'color_palette': 'color_palettes',\n      'aperture': 'camera_apertures',\n      'pacing': 'video_pacing',\n      'duration': 'video_durations',\n      'aspect_ratio': 'aspect_ratios',\n      'layout': 'storyboard_output',\n      'annotations': 'storyboard_output',\n      'style': 'storyboard_output',\n      'lut': 'color_grading',\n      'contrast': 'color_grading',\n      'saturation': 'color_grading',\n      'key_light': 'lighting_setup',\n      'color_temperature': 'lighting_setup',\n      'intensity': 'lighting_setup',\n      'shutter_speed': 'camera_settings',\n      'iso': 'camera_settings',\n      'quality': 'image_output',\n      'color_space': 'image_output',\n      'bitrate': 'video_output',\n      'codec': 'video_output',\n      'frame_rate': 'video_output',\n      'format': 'video_output',\n      'resolution': 'video_output' // but since it's handled above, but for special, but since it's handled above\n    };\n\n    const optionsKey = specialMappings[fieldKey];\n    if (optionsKey) {\n      const fieldOptions = FIELD_OPTIONS[optionsKey];\n      if (fieldOptions) {\n        if (fieldOptions.options) {\n          return fieldOptions.options;\n        } else if (fieldOptions[fieldKey] && Array.isArray(fieldOptions[fieldKey])) {\n          return fieldOptions[fieldKey];\n        }\n      }\n    }\n\n    return [];\n  };\n\n  return (\n    <aside className=\"glass-card h-full w-full p-4 flex flex-col overflow-y-auto custom-scrollbar\">\n      <div className=\"flex items-center justify-between px-2 mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <h1 className=\"text-lg font-bold ink-strong\">Details</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={handleDelete}\n            className=\"icon-button-destructive text-lg\"\n            title=\"Delete asset\"\n          >\n            <TrashIcon className=\"w-5 h-5\" title=\"Delete asset\" />\n          </button>\n          <button\n            onClick={onClose}\n            className=\"icon-button-soft\"\n            title=\"Close panel\"\n          >\n            <XMarkIcon className=\"w-5 h-5\" title=\"Close panel\" />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center justify-between gap-2 mb-2\">\n            <label className=\"block font-bold ink-strong\">Name</label>\n            <button\n              type=\"button\"\n              className=\"icon-button-soft shrink-0\"\n              onClick={() => requestSuggestionForField(ASSET_NAME_SUGGESTION_KEY, 'Name', asset.name)}\n              disabled={suggestionStates[ASSET_NAME_SUGGESTION_KEY]?.isLoading}\n              title=\"Ask AI to suggest a name\"\n            >\n              <SparklesIcon className=\"w-4 h-4\" />\n            </button>\n          </div>\n          <input\n            type=\"text\"\n            value={asset.name}\n            onChange={(e) => onUpdateAsset(asset.id, { name: e.target.value })}\n            className=\"panel-input w-full px-3 py-2\"\n            placeholder=\"Enter name...\"\n          />\n          {renderSuggestionPreview(ASSET_NAME_SUGGESTION_KEY, (value) => onUpdateAsset(asset.id, { name: value }))}\n        </div>\n\n        <div>\n          <label className=\"block font-bold ink-strong mb-2\">Type</label>\n          <div className=\"text-sm panel-surface-strong px-3 py-2 rounded\">\n            {asset.type.replace('_', ' ').toUpperCase()}\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block font-bold ink-strong mb-2\">Fields</label>\n          <div className=\"space-y-3\">\n            {Object.entries(parsedFields).map(([fieldKey, fieldValue]) => {\n              const displayName = fieldKey.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n              const options = getFieldOptions(fieldKey);\n\n              if (options && options.length > 0) {\n                // Render optimized dropdown for fields with predefined options\n                return (\n                  <div key={fieldKey}>\n                    <label className=\"block font-medium ink-strong mb-1 text-sm\">{displayName}</label>\n                    <OptimizedDropdown\n                      value={fieldValue}\n                      options={options}\n                      onChange={(value) => updateField(fieldKey, value)}\n                      placeholder={`Select ${displayName.toLowerCase()}...`}\n                      className=\"panel-input\"\n                    />\n                  </div>\n                );\n              } else {\n                // Render text input for free-form fields\n                return (\n                  <div key={fieldKey}>\n                    <div className=\"flex items-center justify-between gap-2 mb-1\">\n                      <label className=\"block font-medium ink-strong text-sm\">{displayName}</label>\n                      <button\n                        type=\"button\"\n                        className=\"icon-button-soft shrink-0\"\n                        onClick={(event) => {\n                          event.preventDefault();\n                          event.stopPropagation();\n                          requestSuggestionForField(fieldKey, displayName, fieldValue);\n                        }}\n                        disabled={suggestionStates[fieldKey]?.isLoading}\n                        title={`Ask AI to suggest a ${displayName.toLowerCase()}`}\n                      >\n                        <SparklesIcon className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                    <input\n                      type=\"text\"\n                      value={fieldValue}\n                      onChange={(e) => updateField(fieldKey, e.target.value)}\n                      className=\"panel-input w-full px-3 py-2\"\n                      placeholder={`Enter ${displayName.toLowerCase()}...`}\n                    />\n                    {renderSuggestionPreview(fieldKey, (value) => updateField(fieldKey, value))}\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n\n        <div>\n          <div className=\"flex items-center justify-between gap-2 mb-2\">\n            <label className=\"block font-bold ink-strong\">Raw Content</label>\n            <button\n              type=\"button\"\n              className=\"icon-button-soft shrink-0\"\n              onClick={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                requestSuggestionForField('raw_content', 'Raw Content', asset.content);\n              }}\n              disabled={suggestionStates.raw_content?.isLoading}\n              title=\"Ask AI to suggest raw content\"\n            >\n              <SparklesIcon className=\"w-4 h-4\" />\n            </button>\n          </div>\n          <textarea\n            value={asset.content}\n            onChange={(e) => onUpdateAsset(asset.id, { content: e.target.value })}\n            className=\"panel-input w-full px-3 py-2 min-h-24 resize-y text-xs\"\n            placeholder=\"Raw content...\"\n          />\n          {renderSuggestionPreview('raw_content', (value) => onUpdateAsset(asset.id, { content: value }))}\n        </div>\n\n        <div>\n          <label className=\"block font-bold ink-strong mb-2\">Tags</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {asset.tags?.map((tag) => (\n              <span\n                key={tag}\n                className=\"badge-accent px-2 py-1 text-xs\"\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"text-xs ink-subtle\">\n          Created: {asset.createdAt.toLocaleDateString()}\n        </div>\n      </div>\n    </aside>\n  );\n};\n\n\n\nconst ControlPanel = ({\n  tagWeights: _tagWeights,\n  onTagWeightChange: _onTagWeightChange,\n  onGenerate,\n  isGenerating,\n  onSyncAssetsToMcp,\n  isMcpLoading\n}: {\n  tagWeights: Record<string, number>;\n  onTagWeightChange: (tagId: string, weight: number) => void;\n  onGenerate: () => void;\n  isGenerating: boolean;\n  onSyncAssetsToMcp: () => void;\n  isMcpLoading: boolean;\n}) => {\n  return (\n    <aside className=\"glass-card w-full p-4 flex flex-col overflow-y-auto custom-scrollbar max-h-full flex-shrink-0 transition-all duration-300\">\n      <div className=\"flex items-center gap-2 px-2 mb-4\">\n        <Cog6ToothIcon className=\"w-8 h-8\" title=\"Creative controls\" />\n        <h1 className=\"text-xl font-bold ink-strong\">Controls</h1>\n      </div>\n\n      <div className=\"space-y-4\">\n        <button\n          onClick={onSyncAssetsToMcp}\n          disabled={isMcpLoading}\n          className={`w-full cta-button py-3 px-4 ${isMcpLoading ? 'is-disabled' : ''}`}\n        >\n          Save\n        </button>\n      </div>\n    </aside>\n  );\n};\n\ntype TimelineVariant = 'story' | 'image' | 'master' | 'style' | 'director';\n\n// Simple Timeline View Component\nconst SimpleTimelineView = ({\n  project,\n  selectedAssetId,\n  setSelectedAssetId,\n  onAssetDrop,\n  onGenerateOutput,\n  onGenerate,\n  activeTimeline,\n  setActiveTimeline,\n  onCreateShots,\n  isWeightingEnabled,\n  onWeightingToggle,\n  styleRigidity,\n  onStyleRigidityChange,\n  selectedAssetIdForShots,\n  setSelectedAssetIdForShots,\n  isCreateShotsModalOpen,\n  setIsCreateShotsModalOpen\n}: {\n  project: Project;\n  selectedAssetId: string | null;\n  setSelectedAssetId: (id: string | null) => void;\n  onAssetDrop: (assetId: string, timelineId: string) => void;\n  onGenerateOutput: (folder: string) => void;\n  onGenerate: () => void;\n  activeTimeline: 'primary' | 'secondary' | 'third' | 'fourth';\n  setActiveTimeline: (timeline: 'primary' | 'secondary' | 'third' | 'fourth') => void;\n  onCreateShots: (assetId: string) => void;\n  isWeightingEnabled: boolean;\n  onWeightingToggle: (enabled: boolean) => void;\n  styleRigidity: number;\n  onStyleRigidityChange: (value: number) => void;\n  selectedAssetIdForShots: string | null;\n  setSelectedAssetIdForShots: (id: string | null) => void;\n  isCreateShotsModalOpen: boolean;\n  setIsCreateShotsModalOpen: (open: boolean) => void;\n}) => {\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>, folder?: string) => {\n    e.preventDefault();\n    const templateType = e.dataTransfer.getData('text/plain');\n    if (templateType) {\n      onAssetDrop(templateType, folder || 'combined');\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\nconst renderAssetBlock = (block: TimelineBlock, index: number, assetTypeCounts?: Record<string, number>) => {\n    const asset = project.assets.find(a => a.id === block.assetId);\n    if (!asset) return null;\n\n    const template = ASSET_TEMPLATES[asset.type];\n    const hoverClass = template?.category === 'story' ? '!hover:bg-[rgba(255,250,205,0.8)]' : template?.category === 'visual' ? '!hover:bg-[rgba(224,240,255,0.8)]' : '';\n    const count = assetTypeCounts ? assetTypeCounts[asset.type] : 0;\n    const hasMultipleSameType = count > 1;\n\n    // Determine main dot color based on category\n    const mainDotColor = template?.category === 'story' ? 'bg-yellow-400' : template?.category === 'visual' ? 'bg-blue-400' : 'bg-purple-400';\n\n    // Limit max orbiting dots to 8 for visual clarity\n    const maxOrbitDots = 8;\n    const orbitDotsCount = Math.min(count - 1, maxOrbitDots);\n\n    // Calculate positions for orbiting dots in a circle\n    const orbitDots = [];\n    const radius = 10; // radius in px for orbit circle\n    for (let i = 0; i < orbitDotsCount; i++) {\n      const angle = (2 * Math.PI / orbitDotsCount) * i;\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      orbitDots.push({ x, y });\n    }\n\n    return (\n      <div\n        key={block.id}\n        className={`p-5 cursor-pointer timeline-card group ${\n          selectedAssetId === asset.id ? 'timeline-card--active' : ''\n        } ${hoverClass}`}\n        onClick={(event) => {\n          event.preventDefault();\n          event.stopPropagation();\n          setSelectedAssetId(asset.id);\n        }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-8 h-8 flex items-center justify-center font-bold timeline-index relative\">\n              {/* Main dot */}\n              <div className={`w-4 h-4 rounded-full ${mainDotColor} opacity-0 group-hover:opacity-100`}></div>\n              {/* Orbiting dots */}\n              {hasMultipleSameType && orbitDots.map((pos, idx) => (\n                <div\n                  key={idx}\n                  className=\"w-2 h-2 rounded-full bg-pink-300 absolute opacity-0 group-hover:opacity-100\"\n                  style={{\n                    top: '50%',\n                    left: '50%',\n                    marginTop: pos.y - 8,\n                    marginLeft: pos.x - 8,\n                    transform: 'translate(-50%, -50%)'\n                  }}\n                />\n              ))}\n            </div>\n            <div>\n              <h3 className=\"font-semibold ink-strong\">{asset.name}</h3>\n              <p className=\"text-sm ink-subtle\">{asset.type.replace('_', ' ')}</p>\n            </div>\n          </div>\n          <div className=\"text-xs ink-subtle\">\n            {asset.createdAt.toLocaleDateString()}\n          </div>\n        </div>\n        {asset.summary && (\n          <p className=\"text-sm ink-subtle mt-3\">{asset.summary}</p>\n        )}\n      </div>\n    );\n  };\n\n  const renderPrimaryTimeline = () => {\n    // Combine all blocks from story and image folders, sorted by category (story first, then visual)\n    const allBlocks = [\n      ...project.primaryTimeline.folders.story.map(block => ({ ...block, category: 'story' as const })),\n      ...project.primaryTimeline.folders.image.map(block => ({ ...block, category: 'visual' as const }))\n    ].sort((a, b) => {\n      // Sort by category first (story before visual), then by position\n      if (a.category !== b.category) {\n        return a.category === 'story' ? -1 : 1;\n      }\n      return a.position - b.position;\n    });\n\n    // Count assets by type to determine if we need notification dots\n    const assetTypeCounts = allBlocks.reduce((acc, block) => {\n      const asset = project.assets.find(a => a.id === block.assetId);\n      if (asset) {\n        acc[asset.type] = (acc[asset.type] || 0) + 1;\n      }\n      return acc;\n    }, {} as Record<string, number>);\n\n    return (\n      <div className=\"space-y-8\" style={{ background: 'rgba(255, 182, 193, 0.05)' }}>\n        <div className=\"flex justify-center md:justify-center relative\">\n          <div className=\"group inline-flex items-center gap-2\">\n            {/* Left dropdown for Story */}\n            <div className=\"relative\">\n              <button\n                className=\"timeline-action px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 flex items-center gap-2\"\n                style={{ backgroundColor: '#FFFACD', color: '#8B7355' }}\n                onClick={() => onGenerateOutput('story')}\n              >\n                <MagicWandIcon className=\"w-5 h-5\" />\n                Story\n              </button>\n            </div>\n\n            {/* Center button - 3D effect */}\n            <button\n              className=\"timeline-action px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 flex items-center gap-2 shadow-lg transform hover:scale-105 transition-all duration-200\"\n              style={{\n                background: 'linear-gradient(145deg, #ffffff, #e6e6e6)',\n                boxShadow: '0 8px 16px rgba(0,0,0,0.2), inset 0 1px 0 rgba(255,255,255,0.8)',\n                border: '2px solid #ccc'\n              }}\n            >\n              <MagicWandIcon className=\"w-5 h-5\" />\n              Generate\n            </button>\n\n            {/* Right dropdown for Image */}\n            <div className=\"relative\">\n              <button\n                className=\"timeline-action px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 flex items-center gap-2\"\n                style={{ backgroundColor: '#E0F6FF', color: '#4682B4' }}\n                onClick={() => onGenerateOutput('image')}\n              >\n                <MagicWandIcon className=\"w-5 h-5\" />\n                Image\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Style Controls */}\n        <div className=\"flex justify-center\">\n          <div className=\"panel-section p-4 max-w-md\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <label htmlFor=\"weighting-enabled-timeline\" className=\"font-bold ink-strong\">Enable Tag Weighting</label>\n              <button\n                role=\"switch\"\n                aria-checked={isWeightingEnabled}\n                onClick={() => onWeightingToggle(!isWeightingEnabled)}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full toggle-track ${isWeightingEnabled ? 'switch-on' : ''}`}\n                id=\"weighting-enabled-timeline\"\n              >\n                <span className={`inline-block h-4 w-4 transform rounded-full toggle-thumb ${isWeightingEnabled ? 'translate-x-6' : 'translate-x-1'}`} />\n              </button>\n            </div>\n\n            <div className={`transition-opacity duration-300 ${isWeightingEnabled ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}>\n              <label htmlFor=\"style-rigidity-timeline\" className=\"block font-bold ink-strong mb-2\">Style Rigidity</label>\n              <input\n                id=\"style-rigidity-timeline\"\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={styleRigidity}\n                onChange={(e) => onStyleRigidityChange(parseInt(e.target.value, 10))}\n                className=\"w-full\"\n                disabled={!isWeightingEnabled}\n              />\n              <div className=\"text-xs ink-subtle flex justify-between\">\n                <span>More AI Freedom</span>\n                <span>Strict Adherence</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Single Drop Zone */}\n        <div className=\"space-y-3\">\n          <div\n            className=\"min-h-32 p-6 timeline-placeholder\"\n            onDrop={(e) => handleDrop(e)}\n            onDragOver={handleDragOver}\n          >\n            {allBlocks.length > 0 ? (\n              <div className=\"space-y-3\">\n                {allBlocks.map((block, index) => renderAssetBlock(block, index, assetTypeCounts))}\n              </div>\n            ) : (\n              <p className=\"ink-subtle text-center py-8\">start building - drag and drop blocks</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderSecondaryTimeline = () => (\n    <div className=\"space-y-8\" style={{ background: 'rgba(230, 230, 250, 0.05)' }}>\n\n{project.secondaryTimeline ? (\n  <div className=\"space-y-5\">\n    {project.secondaryTimeline.masterAssets.map((asset, index) => (\n      <div\n        key={asset.id}\n        className=\"p-5 timeline-card cursor-pointer\"\n        onClick={() => setSelectedAssetId(asset.id)}\n      >\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-8 h-8 flex items-center justify-center font-bold timeline-index secondary\">\n            {index + 1}\n          </div>\n          <div>\n            <h3 className=\"font-semibold ink-strong\">{asset.name}</h3>\n            <p className=\"text-sm ink-subtle\">{asset.type.replace('_', ' ')}</p>\n          </div>\n        </div>\n        {asset.summary && (\n          <p className=\"text-sm ink-subtle mt-3\">{asset.summary}</p>\n        )}\n        <div className=\"flex justify-end mt-3\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setSelectedAssetIdForShots(asset.id);\n              setIsCreateShotsModalOpen(true);\n            }}\n            className=\"timeline-action px-3 py-1.5 text-sm\"\n            style={{ backgroundColor: '#98FB98', color: '#2E8B57' }}\n          >\n            <MagicWandIcon className=\"w-4 h-4 mr-1\" />\n            Create Shots\n          </button>\n        </div>\n      </div>\n    ))}\n  </div>\n) : (\n  <p className=\"ink-subtle\">No multi-shots yet. Generate from primary timeline first.</p>\n)}\n    </div>\n  );\n\n  const renderThirdTimeline = () => (\n    <div className=\"space-y-8\" style={{ background: 'rgba(152, 251, 152, 0.05)' }}>\n\n      {project.thirdTimeline ? (\n        <div className=\"space-y-5\">\n          {project.thirdTimeline.styledShots.map((shot, index) => (\n            <div key={shot.id} className=\"p-5 timeline-card\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-8 h-8 flex items-center justify-center font-bold timeline-index secondary\">\n                  {index + 1}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold ink-strong\">{shot.name}</h3>\n                  <p className=\"text-sm ink-subtle\">{shot.type.replace('_', ' ')}</p>\n                </div>\n              </div>\n              {shot.summary && (\n                <p className=\"text-sm ink-subtle mt-3\">{shot.summary}</p>\n              )}\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p className=\"ink-subtle\">No styled shots yet. Generate from secondary timeline first.</p>\n      )}\n    </div>\n  );\n\n  const renderFourthTimeline = () => (\n    <div className=\"space-y-8\" style={{ background: 'rgba(255, 218, 185, 0.05)' }}>\n\n      {project.fourthTimeline ? (\n        <div className=\"space-y-5\">\n          <h3 className=\"text-lg font-semibold ink-strong\">Suggestions</h3>\n          {project.fourthTimeline.suggestions.map((suggestion, index) => (\n            <div key={suggestion.id} className=\"p-5 timeline-card\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-semibold ink-strong\">{suggestion.type.toUpperCase()}</h4>\n                  <p className=\"text-sm ink-subtle\">{suggestion.description}</p>\n                </div>\n                <div className={`timeline-chip ${suggestion.accepted ? 'is-affirmative' : ''}`}>\n                  {suggestion.accepted ? 'Accepted' : 'Pending'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p className=\"ink-subtle\">No director suggestions yet.</p>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"h-full w-full\">\n      <div className=\"flex w-full flex-col gap-8 px-0\">\n        {/* Timeline Navigation */}\n        <div className=\"flex flex-wrap justify-center gap-3 mb-6\">\n          <button\n            onClick={() => setActiveTimeline('primary')}\n            className={`px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 timeline-tab ${activeTimeline === 'primary' ? 'timeline-tab--active' : ''}`}\n            style={{\n              background: activeTimeline === 'primary' ? 'linear-gradient(135deg, #FFB6C1, #FF8FA3)' : undefined,\n              boxShadow: activeTimeline === 'primary' ? '0 4px 8px rgba(255, 182, 193, 0.3)' : undefined\n            }}\n          >\n            Scene\n          </button>\n          <button\n            onClick={() => setActiveTimeline('secondary')}\n            className={`px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 timeline-tab ${activeTimeline === 'secondary' ? 'timeline-tab--active' : ''}`}\n            style={{\n        background: activeTimeline === 'secondary' ? 'linear-gradient(135deg, #E6E6FA, #D1D1F0)' : undefined,\n        boxShadow: activeTimeline === 'secondary' ? '0 4px 8px rgba(230, 230, 250, 0.3)' : undefined\n      }}\n    >\n      Multi-Shot\n    </button>\n    <button\n      onClick={() => setActiveTimeline('third')}\n      className={`px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 timeline-tab ${activeTimeline === 'third' ? 'timeline-tab--active' : ''}`}\n      style={{\n        background: activeTimeline === 'third' ? 'linear-gradient(135deg, #98FB98, #7AE67A)' : undefined,\n        boxShadow: activeTimeline === 'third' ? '0 4px 8px rgba(152, 251, 152, 0.3)' : undefined\n      }}\n    >\n      Batch Style\n    </button>\n          <button\n            onClick={() => setActiveTimeline('fourth')}\n            className={`px-4 py-2.5 text-sm font-semibold md:text-base md:px-5 md:py-3 timeline-tab ${activeTimeline === 'fourth' ? 'timeline-tab--active' : ''}`}\n            style={{\n              background: activeTimeline === 'fourth' ? 'linear-gradient(135deg, #FFDAB9, #FFCBA4)' : undefined,\n              boxShadow: activeTimeline === 'fourth' ? '0 4px 8px rgba(255, 218, 185, 0.3)' : undefined\n            }}\n          >\n            Director’s Advice\n          </button>\n        </div>\n\n        {/* Timeline Content */}\n        {activeTimeline === 'primary' && renderPrimaryTimeline()}\n        {activeTimeline === 'secondary' && renderSecondaryTimeline()}\n        {activeTimeline === 'third' && renderThirdTimeline()}\n        {activeTimeline === 'fourth' && renderFourthTimeline()}\n      </div>\n    </div>\n  );\n};\n\n// @ts-ignore - tagWeights and onTagWeightChange are used in ControlPanel and generateFromWorkspace\nconst Workspace: React.FC<WorkspaceProps> = ({\n  appLabel,\n  project,\n  setProject,\n  tagWeights: _tagWeights,\n  styleRigidity,\n  isWeightingEnabled,\n  onTagWeightChange: _onTagWeightChange,\n  onStyleRigidityChange,\n  onWeightingToggle\n}) => {\n  const [selectedAssetId, setSelectedAssetId] = useState<string | null>(null);\n  const [activePanel, setActivePanel] = useState<'canvas' | 'chat' | 'timeline'>('timeline');\n  const [activeTimeline, setActiveTimeline] = useState<'primary' | 'secondary' | 'third' | 'fourth'>('primary');\n  const [generatedOutput, setGeneratedOutput] = useState<string>('');\n  const [outputType] = useState<'text' | 'image'>('text');\n  const [chatMessages, setChatMessages] = useState<Message[]>([]);\n  const [hasDismissedMockNotice, setHasDismissedMockNotice] = useState(false);\n  const [isChatLoading, setIsChatLoading] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  // New state for UserGuide modal\n  const [isUserGuideOpen, setIsUserGuideOpen] = useState(false);\n  const [isReferenceViewerOpen, setIsReferenceViewerOpen] = useState(false);\n  const [isApiConfigOpen, setIsApiConfigOpen] = useState(false);\n  const [pendingDeleteAsset, setPendingDeleteAsset] = useState<Asset | null>(null);\n  const [undoState, setUndoState] = useState<UndoState | null>(null);\n  const [toastState, setToastState] = useState<ToastState | null>(null);\n\n  // New state for multi-shot modal\n  const [isMultiShotModalOpen, setIsMultiShotModalOpen] = useState(false);\n  const [selectedStoryAssets, setSelectedStoryAssets] = useState<string[]>([]);\n  const [selectedVisualAssets, setSelectedVisualAssets] = useState<string[]>([]);\n\n  // New state for create shots modal\n  const [isCreateShotsModalOpen, setIsCreateShotsModalOpen] = useState(false);\n  const [selectedAssetIdForShots, setSelectedAssetIdForShots] = useState<string | null>(null);\n  const [numberOfShots, setNumberOfShots] = useState(3);\n\n  // New state for MCP\n  const [isMcpLoading, setIsMcpLoading] = useState(false);\n\n  // New function to create multi-shot asset from selected story assets\n  const createMultiShotAsset = () => {\n    if (selectedStoryAssets.length === 0) {\n      setToastState({\n        id: crypto.randomUUID(),\n        message: 'Please select at least one story asset to create a multi-shot.',\n        kind: 'warning'\n      });\n      return;\n    }\n\n    const storyAssets = project.assets.filter(asset => selectedStoryAssets.includes(asset.id));\n    const combinedContent = storyAssets.map(a => a.content).join('\\n\\n');\n    const combinedTags = Array.from(new Set(storyAssets.flatMap(a => a.tags)));\n\n    const multiShotAsset: Asset = {\n      id: crypto.randomUUID(),\n      seedId: crypto.randomUUID(),\n      type: 'master_story',\n      name: 'Multi-Shot',\n      content: combinedContent,\n      tags: combinedTags,\n      createdAt: new Date(),\n      summary: 'Generated multi-shot from selected story assets',\n      isMaster: true,\n      lineage: storyAssets.map(a => a.id)\n    };\n\n    setProject(prev => ({\n      ...prev,\n      assets: [...prev.assets, multiShotAsset],\n      secondaryTimeline: {\n        masterAssets: [...(prev.secondaryTimeline?.masterAssets || []), multiShotAsset],\n        shotLists: prev.secondaryTimeline?.shotLists || [],\n        appliedStyles: prev.secondaryTimeline?.appliedStyles || {}\n      },\n      updatedAt: new Date()\n    }));\n\n    setIsMultiShotModalOpen(false);\n    setSelectedStoryAssets([]);\n    setToastState({\n      id: crypto.randomUUID(),\n      message: 'Multi-shot asset created successfully.',\n      kind: 'success'\n    });\n  };\n\n  // New function to create batch style asset from selected visual assets\n  const createBatchStyleAsset = () => {\n    if (selectedVisualAssets.length === 0) {\n      setToastState({\n        id: crypto.randomUUID(),\n        message: 'Please select at least one visual asset to create a batch style.',\n        kind: 'warning'\n      });\n      return;\n    }\n\n    const visualAssets = project.assets.filter(asset => selectedVisualAssets.includes(asset.id));\n    const combinedContent = visualAssets.map(a => a.content).join('\\n\\n');\n    const combinedTags = Array.from(new Set(visualAssets.flatMap(a => a.tags)));\n\n    const batchStyleAsset: Asset = {\n      id: crypto.randomUUID(),\n      seedId: crypto.randomUUID(),\n      type: 'master_image',\n      name: 'Batch Style',\n      content: combinedContent,\n      tags: combinedTags,\n      createdAt: new Date(),\n      summary: 'Generated batch style from selected visual assets',\n      isMaster: true,\n      lineage: visualAssets.map(a => a.id)\n    };\n\n    setProject(prev => ({\n      ...prev,\n      assets: [...prev.assets, batchStyleAsset],\n      thirdTimeline: {\n        styledShots: [...(prev.thirdTimeline?.styledShots || []), batchStyleAsset],\n        videoPrompts: prev.thirdTimeline?.videoPrompts || []\n      },\n      updatedAt: new Date()\n    }));\n\n    setIsMultiShotModalOpen(false);\n    setSelectedVisualAssets([]);\n    setToastState({\n      id: crypto.randomUUID(),\n      message: 'Batch style asset created successfully.',\n      kind: 'success'\n    });\n  };\n\n  React.useEffect(() => {\n    if (!toastState) return;\n    if (typeof window === 'undefined') return;\n\n    const timeout = window.setTimeout(() => {\n      setToastState(null);\n    }, toastState.allowUndo ? 8000 : 4000);\n\n    return () => window.clearTimeout(timeout);\n  }, [toastState, setToastState]);\n\n  const handleDismissToast = useCallback(() => {\n    setToastState(null);\n  }, [setToastState]);\n\n  const handleRequestDeleteAsset = useCallback((asset: Asset) => {\n    setPendingDeleteAsset(asset);\n  }, [setPendingDeleteAsset]);\n\n  const performAssetRemoval = useCallback((asset: Asset) => {\n    let assetRemoved = false;\n\n    setProject(prev => {\n      const existingAsset = prev.assets.find(existing => existing.id === asset.id);\n      if (!existingAsset) {\n        return prev;\n      }\n\n      assetRemoved = true;\n\n      const removedBlocks = prev.primaryTimeline.blocks\n        .filter(block => block.assetId === asset.id)\n        .map(block => ({ ...block }));\n\n      const remainingBlocks = reindexBlocks(\n        prev.primaryTimeline.blocks\n          .filter(block => block.assetId !== asset.id)\n          .map(block => ({ ...block }))\n      );\n\n      const removedFolderAssignments: UndoState['folderAssignments'] = [];\n      const updatedFoldersEntries = Object.entries(prev.primaryTimeline.folders).map(([folderKey, blocks]) => {\n        const keptBlocks: TimelineBlock[] = [];\n\n        blocks.forEach(block => {\n          if (block.assetId === asset.id) {\n            removedFolderAssignments.push({ folder: folderKey, block: { ...block } });\n          } else {\n            keptBlocks.push({ ...block });\n          }\n        });\n\n        return [folderKey, reindexBlocks(keptBlocks)] as [string, TimelineBlock[]];\n      });\n\n      const updatedFolders = Object.fromEntries(updatedFoldersEntries) as typeof prev.primaryTimeline.folders;\n\n      setUndoState({\n        asset,\n        blocks: removedBlocks,\n        folderAssignments: removedFolderAssignments\n      });\n\n      return {\n        ...prev,\n        assets: prev.assets.filter(existing => existing.id !== asset.id),\n        primaryTimeline: {\n          ...prev.primaryTimeline,\n          blocks: remainingBlocks,\n          folders: updatedFolders\n        },\n        updatedAt: new Date()\n      };\n    });\n\n    if (assetRemoved) {\n      setSelectedAssetId(prevSelected => (prevSelected === asset.id ? null : prevSelected));\n      setToastState({\n        id: crypto.randomUUID(),\n        message: `Removed \"${asset.name}\"`,\n        allowUndo: true,\n        kind: 'warning'\n      });\n    }\n  }, [setProject, setSelectedAssetId, setToastState, setUndoState]);\n\n  const handleConfirmDelete = useCallback(() => {\n    if (!pendingDeleteAsset) return;\n    performAssetRemoval(pendingDeleteAsset);\n    setPendingDeleteAsset(null);\n  }, [pendingDeleteAsset, performAssetRemoval]);\n\n  const handleCancelDelete = useCallback(() => {\n    setPendingDeleteAsset(null);\n  }, [setPendingDeleteAsset]);\n\n  const handleUndoDelete = useCallback(() => {\n    if (!undoState) return;\n\n    const stateToRestore = undoState;\n\n    setProject(prev => {\n      if (prev.assets.some(existing => existing.id === stateToRestore.asset.id)) {\n        return prev;\n      }\n\n      const restoredBlocks = restoreBlocksWithPositions(\n        prev.primaryTimeline.blocks.map(block => ({ ...block })),\n        stateToRestore.blocks\n      );\n\n      const assignmentsByFolder = stateToRestore.folderAssignments.reduce((acc, assignment) => {\n        if (!acc[assignment.folder]) {\n          acc[assignment.folder] = [];\n        }\n        acc[assignment.folder].push({ ...assignment.block });\n        return acc;\n      }, {} as Record<string, TimelineBlock[]>);\n\n      const restoredFoldersEntries = Object.entries(prev.primaryTimeline.folders).map(([folderKey, blocks]) => {\n        const restoredForFolder = assignmentsByFolder[folderKey] || [];\n        delete assignmentsByFolder[folderKey];\n        return [\n          folderKey,\n          restoreBlocksWithPositions(blocks.map(block => ({ ...block })), restoredForFolder)\n        ] as [string, TimelineBlock[]];\n      });\n\n      Object.entries(assignmentsByFolder).forEach(([folderKey, blocks]) => {\n        restoredFoldersEntries.push([\n          folderKey,\n          restoreBlocksWithPositions([], blocks)\n        ]);\n      });\n\n      const restoredFolders = Object.fromEntries(restoredFoldersEntries) as typeof prev.primaryTimeline.folders;\n\n      return {\n        ...prev,\n        assets: [...prev.assets, stateToRestore.asset],\n        primaryTimeline: {\n          ...prev.primaryTimeline,\n          blocks: restoredBlocks,\n          folders: restoredFolders\n        },\n        updatedAt: new Date()\n      };\n    });\n\n    setUndoState(null);\n    setSelectedAssetId(stateToRestore.asset.id);\n    setToastState({\n      id: crypto.randomUUID(),\n      message: `Restored \"${stateToRestore.asset.name}\"`,\n      kind: 'success'\n    });\n  }, [undoState, setProject, setSelectedAssetId, setToastState]);\n\n\n  const isDev = Boolean(import.meta.env?.DEV);\n  const showMockNotice = isMockMode && !hasDismissedMockNotice;\n\n\n\n  const handleGenerate = async () => {\n    setGeneratedOutput('');\n    setActivePanel('chat');\n    setIsGenerating(true);\n\n    try {\n      const canvas = {\n        nodes: project.primaryTimeline.blocks.map(block => ({\n          id: block.id,\n          assetId: block.assetId,\n          position: { x: 0, y: 0 },\n          size: 1\n        })),\n        connections: []\n      };\n\n      const response = await generateFromWorkspace({\n        assets: project.assets,\n        canvas\n      }, _tagWeights, styleRigidity, outputType);\n\n      const outputSections: string[] = [];\n      if (response.data) {\n        outputSections.push(response.data);\n      }\n      if (response.error) {\n        outputSections.push(`⚠️ ${response.error}`);\n      }\n      if (!outputSections.length) {\n        outputSections.push('No content was returned. Please try again in a moment.');\n      }\n\n      setGeneratedOutput(outputSections.join('\\n\\n---\\n\\n'));\n    } catch (error) {\n      if (isDev) {\n        console.error('Generation error:', error);\n      }\n      setGeneratedOutput('An unexpected error occurred while generating content. Please try again.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleSendMessage = useCallback(async (message: string): Promise<string | null> => {\n    if (!message.trim()) return null;\n\n    // Add user message\n    const userMessage: Message = {\n      role: ChatRole.USER,\n      content: message\n    };\n    setChatMessages(prev => [...prev, userMessage]);\n    setIsChatLoading(true);\n\n    try {\n      const conversationHistory: { role: 'user' | 'assistant'; content: string }[] = [...chatMessages, userMessage].map(msg => ({\n        role: msg.role === ChatRole.USER ? 'user' as const : 'assistant' as const,\n        content: msg.content\n      }));\n\n      const response = await generateSandboxResponse(\n        message,\n        conversationHistory,\n        _tagWeights,\n        styleRigidity\n      );\n\n      setChatMessages(prev => {\n        const next = [...prev];\n        if (response.data) {\n          next.push({ role: ChatRole.MODEL, content: response.data });\n        }\n        if (response.error) {\n          next.push({ role: ChatRole.MODEL, content: `⚠️ ${response.error}` });\n        }\n        if (!response.data && !response.error) {\n          next.push({\n            role: ChatRole.MODEL,\n            content: 'I did not receive a response from Gemini. Please try again.'\n          });\n        }\n        return next;\n      });\n\n      if (response.error) {\n        return null;\n      }\n\n      return response.data ?? null;\n    } catch (error) {\n      if (isDev) {\n        console.error('Chat error:', error);\n      }\n      setChatMessages(prev => [...prev, {\n        role: ChatRole.MODEL,\n        content: 'Sorry, I encountered an unexpected error while processing your message.'\n      }]);\n      return null;\n    } finally {\n      setIsChatLoading(false);\n    }\n  }, [chatMessages, _tagWeights, styleRigidity, isDev]);\n\n  const handleRequestFieldSuggestion = useCallback(async ({\n    assetId,\n    fieldKey,\n    fieldLabel,\n    currentValue\n  }: {\n    assetId: string;\n    fieldKey: string;\n    fieldLabel: string;\n    currentValue: string;\n  }) => {\n    const asset = project.assets.find(existing => existing.id === assetId);\n    const assetName = asset?.name || 'Unnamed asset';\n    const assetType = asset?.type?.replace('_', ' ') || 'asset';\n\n    const formattedValue = currentValue?.trim()\n      ? currentValue.trim()\n      : 'This field is currently empty.';\n\n    const prompt = [\n      'You are helping edit a creative project asset.',\n      `Asset name: ${assetName}`,\n      `Asset type: ${assetType}`,\n      `Field key: ${fieldKey}`,\n      `Field label: ${fieldLabel}`,\n      'Current value:',\n      formattedValue,\n      '',\n      'Suggest an improved replacement for this field that preserves intent, is concise, and formatted as plain text only. Do not include explanations or extra commentary.'\n    ].join('\\n');\n\n    const suggestion = await handleSendMessage(prompt);\n    return suggestion ? suggestion.trim() : null;\n  }, [handleSendMessage, project.assets]);\n\n  const handleUpdateAsset = useCallback((assetId: string, updates: Partial<Asset>) => {\n    setProject(prev => ({\n      ...prev,\n      assets: prev.assets.map(asset =>\n        asset.id === assetId ? { ...asset, ...updates } : asset\n      ),\n      updatedAt: new Date()\n    }));\n  }, [setProject]);\n\n  const handleAssetDropOnTimeline = useCallback((templateType: string, folder?: string) => {\n    // Create new asset from template\n    const template = ASSET_TEMPLATES[templateType];\n    if (!template) return;\n\n    // Map template type to Asset type\n    const typeMap: Record<string, Asset['type']> = {\n      'character': 'master_story',\n      'plot_point': 'master_story',\n      'scene': 'master_story',\n      'image_input': 'master_image',\n      'camera_settings': 'shot',\n      'depth_of_field': 'shot',\n      'lighting_setup': 'shot',\n      'color_grading': 'shot',\n      'audio_design': 'shot',\n      'vfx_compositing': 'shot'\n    };\n\n    const newAsset: Asset = {\n      id: crypto.randomUUID(),\n      seedId: crypto.randomUUID(),\n      type: typeMap[template.type] || 'shot',\n      name: template.name,\n      content: template.defaultContent || '',\n      tags: template.tags || [],\n      createdAt: new Date(),\n      summary: template.description,\n      isMaster: template.type.includes('master') || template.type.includes('output'),\n      lineage: []\n    };\n\n    // Determine which folder the block should be added to.\n    let actualTargetFolder: string;\n    if (folder === 'combined') {\n      actualTargetFolder = template.category === 'story' ? 'story' : 'image';\n    } else {\n      const requestedFolder = folder || 'story';\n      const isTextToVideoRedirect = requestedFolder === 'text_to_video';\n      actualTargetFolder = isTextToVideoRedirect ? 'image' : requestedFolder;\n    }\n    const foldersRecord = project.primaryTimeline.folders as Record<string, TimelineBlock[]>;\n    const existingBlocks = foldersRecord[actualTargetFolder] || [];\n\n    const newBlock: TimelineBlock = {\n      id: crypto.randomUUID(),\n      assetId: newAsset.id,\n      position: existingBlocks.length,\n      isExpanded: false,\n      createdAt: new Date()\n    };\n\n    setProject(prev => {\n      const prevFolders = prev.primaryTimeline.folders as Record<string, TimelineBlock[]>;\n      const targetBlocks = prevFolders[actualTargetFolder] || [];\n      const updatedFolders: Record<string, TimelineBlock[]> = {\n        ...prevFolders,\n        [actualTargetFolder]: [...targetBlocks, newBlock]\n      };\n\n      if (folder === 'text_to_video' && prevFolders.text_to_video) {\n        // Preserve any existing text_to_video blocks instead of clearing them.\n        updatedFolders.text_to_video = prevFolders.text_to_video;\n      }\n\n      return {\n        ...prev,\n        assets: [...prev.assets, newAsset],\n        primaryTimeline: {\n          ...prev.primaryTimeline,\n          blocks: [...prev.primaryTimeline.blocks, newBlock],\n          folders: updatedFolders as typeof prev.primaryTimeline.folders\n        },\n        updatedAt: new Date()\n      };\n    });\n  }, [setProject, project.primaryTimeline.folders]);\n\n  const handleGenerateOutput = useCallback((folder: string) => {\n    // Generate output from the specified folder\n    const folderBlocks = project.primaryTimeline.folders[folder as keyof typeof project.primaryTimeline.folders];\n    if (folderBlocks.length === 0) return;\n\n    // Only consider story folder blocks for master asset (multi-shot)\n    if (folder !== 'story') {\n      // For non-story folders, fallback to previous behavior (first asset)\n      const firstAsset = project.assets.find(a => a.id === folderBlocks[0].assetId);\n      if (!firstAsset) return;\n\n      const masterAsset: Asset = {\n        id: crypto.randomUUID(),\n        seedId: crypto.randomUUID(),\n        type: folder === 'image' ? 'master_image' : 'master_video',\n        name: `Master ${folder.charAt(0).toUpperCase() + folder.slice(1)}`,\n        content: firstAsset.content,\n        tags: firstAsset.tags,\n        createdAt: new Date(),\n        summary: `Generated master ${folder} from user inputs`,\n        isMaster: true,\n        lineage: folderBlocks.map(b => b.assetId)\n      };\n\n      setProject(prev => ({\n        ...prev,\n        assets: [...prev.assets, masterAsset],\n        secondaryTimeline: {\n          masterAssets: [...(prev.secondaryTimeline?.masterAssets || []), masterAsset],\n          shotLists: prev.secondaryTimeline?.shotLists || [],\n          appliedStyles: prev.secondaryTimeline?.appliedStyles || {}\n        },\n        updatedAt: new Date()\n      }));\n\n      // Navigate to secondary timeline after generation\n      setActivePanel('timeline');\n      setActiveTimeline('secondary');\n      return;\n    }\n\n    // For story folder, combine all story assets content and tags\n    const storyAssets = folderBlocks\n      .map(b => project.assets.find(a => a.id === b.assetId))\n      .filter((a): a is Asset => a !== undefined);\n\n    const combinedContent = storyAssets.map(a => a.content).join('\\n\\n');\n    const combinedTags = Array.from(new Set(storyAssets.flatMap(a => a.tags)));\n\n    const masterAsset: Asset = {\n      id: crypto.randomUUID(),\n      seedId: crypto.randomUUID(),\n      type: 'master_story',\n      name: 'Multi-Shot',\n      content: combinedContent,\n      tags: combinedTags,\n      createdAt: new Date(),\n      summary: 'Generated multi-shot from story assets',\n      isMaster: true,\n      lineage: storyAssets.map(a => a.id)\n    };\n\n    setProject(prev => ({\n      ...prev,\n      assets: [...prev.assets, masterAsset],\n      secondaryTimeline: {\n        masterAssets: [...(prev.secondaryTimeline?.masterAssets || []), masterAsset],\n        shotLists: prev.secondaryTimeline?.shotLists || [],\n        appliedStyles: prev.secondaryTimeline?.appliedStyles || {}\n      },\n      updatedAt: new Date()\n    }));\n\n    // Navigate to secondary timeline after generation\n    setActivePanel('timeline');\n    setActiveTimeline('secondary');\n  }, [setProject, project.primaryTimeline.folders, project.assets, setActivePanel, setActiveTimeline]);\n\n  const handleCreateShots = useCallback((assetId: string) => {\n    // Create shots from the selected master asset\n    const asset = project.assets.find(a => a.id === assetId);\n    if (!asset) return;\n\n    // For now, create a simple shot based on the master asset\n    const shotAsset: Asset = {\n      id: crypto.randomUUID(),\n      seedId: crypto.randomUUID(),\n      type: 'shot',\n      name: `Shot from ${asset.name}`,\n      content: asset.content,\n      tags: asset.tags,\n      createdAt: new Date(),\n      summary: `Generated shot from ${asset.name}`,\n      isMaster: false,\n      lineage: [assetId]\n    };\n\n    setProject(prev => ({\n      ...prev,\n      assets: [...prev.assets, shotAsset],\n      thirdTimeline: {\n        styledShots: [...(prev.thirdTimeline?.styledShots || []), shotAsset],\n        videoPrompts: prev.thirdTimeline?.videoPrompts || []\n      },\n      updatedAt: new Date()\n    }));\n\n    // Navigate to third timeline\n    setActivePanel('timeline');\n    setActiveTimeline('third');\n  }, [project.assets, setProject, setActivePanel, setActiveTimeline]);\n\n  const syncAssetsToMcp = async () => {\n    setIsMcpLoading(true);\n    try {\n      await createCollection('project_assets');\n      const documents = project.assets.map(asset => asset.content);\n      const metadatas = project.assets.map(asset => ({ name: asset.name, type: asset.type, tags: asset.tags }));\n      const ids = project.assets.map(asset => asset.id);\n      await addDocuments('project_assets', documents, metadatas, ids);\n      setToastState({\n        id: crypto.randomUUID(),\n        message: 'Assets synced to MCP successfully',\n        kind: 'success'\n      });\n    } catch (error) {\n      console.error('Failed to sync assets to MCP:', error);\n      setToastState({\n        id: crypto.randomUUID(),\n        message: 'Unable to save',\n        kind: 'warning'\n      });\n    } finally {\n      setIsMcpLoading(false);\n    }\n  };\n\n\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <header className=\"workspace-header relative flex-shrink-0 z-10 px-6 py-6 md:px-10 md:py-8 overflow-hidden rounded-3xl\">\n        <div className=\"pointer-events-none absolute inset-0 bg-white/10 backdrop-blur-xl shadow-[0_30px_60px_rgba(0,0,0,0.08)]\" />\n        <div className=\"relative flex flex-col gap-6\">\n          <div className=\"flex flex-col items-center gap-2 text-center\">\n            <div className=\"flex items-center gap-3\">\n              <FracturedLoopLogo className=\"w-10 h-10\" />\n              <span className=\"text-3xl md:text-4xl font-black uppercase tracking-[0.45em] text-[hsl(var(--ink))]\">\n                {appLabel}\n              </span>\n            </div>\n            <p className=\"text-xs font-semibold uppercase tracking-[0.35em] text-[hsl(var(--foreground)/0.7)] md:text-sm\">\n              Idea · Prompt · Visualisation\n            </p>\n          </div>\n\n          <div className=\"flex flex-col gap-6 md:flex-row md:items-center md:justify-center\">\n            <nav className=\"flex flex-wrap items-center justify-center gap-3\">\n              <button\n                type=\"button\"\n                onClick={() => setActivePanel('chat')}\n                className={`glass-nav-button ${activePanel === 'chat' ? 'is-active' : ''}`}\n                aria-pressed={activePanel === 'chat'}\n              >\n                <ChatBubbleLeftRightIcon className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-[0.2em] text-xs font-semibold md:text-sm\">Chat</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setActivePanel('timeline')}\n                className={`glass-nav-button ${activePanel === 'timeline' ? 'is-active' : ''}`}\n                aria-pressed={activePanel === 'timeline'}\n              >\n                <MagicWandIcon className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-[0.2em] text-xs font-semibold md:text-sm\">Timeline</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsReferenceViewerOpen(true)}\n                className=\"glass-nav-button\"\n                aria-haspopup=\"dialog\"\n              >\n                <DocumentTextIcon className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-[0.2em] text-xs font-semibold md:text-sm\">Reference</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsUserGuideOpen(true)}\n                className=\"glass-nav-button\"\n              >\n                <QuestionMarkCircleIcon className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-[0.2em] text-xs font-semibold md:text-sm\">Help</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsApiConfigOpen(true)}\n                className=\"glass-nav-button\"\n              >\n                <Cog6ToothIcon className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-[0.2em] text-xs font-semibold md:text-sm\">API</span>\n              </button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1 min-h-0 px-4 py-4 lg:px-6 lg:py-6\">\n        <div className=\"flex h-full min-h-0 flex-col gap-6 lg:flex-row\">\n          <div className=\"flex-shrink-0 w-full lg:w-[19rem]\">\n            <div className=\"h-full min-h-0\">\n              <AssetLibraryPanel onAddAsset={handleAssetDropOnTimeline} />\n            </div>\n          </div>\n\n          <div className=\"min-h-0 h-full flex-1 flex flex-col overflow-y-auto custom-scrollbar lg:mr-[20rem]\">\n            <div className=\"flex h-full min-h-0 w-full\">\n              <div className=\"flex h-full min-h-0 flex-1 flex-col overflow-hidden\">\n                <div className=\"flex-1 min-h-0 flex flex-col\">\n                  {activePanel === 'timeline' && (\n              <div className=\"flex-1 min-h-0 w-full overflow-y-auto\">\n                <SimpleTimelineView\n                  project={project}\n                  selectedAssetId={selectedAssetId}\n                  setSelectedAssetId={setSelectedAssetId}\n                  onAssetDrop={handleAssetDropOnTimeline}\n                  onGenerateOutput={handleGenerateOutput}\n                  onGenerate={handleGenerate}\n                  isWeightingEnabled={isWeightingEnabled}\n                  onWeightingToggle={onWeightingToggle}\n                  styleRigidity={styleRigidity}\n                  onStyleRigidityChange={onStyleRigidityChange}\n                  activeTimeline={activeTimeline}\n                  setActiveTimeline={setActiveTimeline}\n                  onCreateShots={handleCreateShots}\n                  selectedAssetIdForShots={selectedAssetIdForShots}\n                  setSelectedAssetIdForShots={setSelectedAssetIdForShots}\n                  isCreateShotsModalOpen={isCreateShotsModalOpen}\n                  setIsCreateShotsModalOpen={setIsCreateShotsModalOpen}\n                />\n              </div>\n            )}\n\n            {activePanel === 'chat' && (\n              <div className=\"flex-1 min-h-0 w-full overflow-y-auto\">\n                <ChatAssistant\n                  messages={chatMessages}\n                  isLoading={isChatLoading}\n                  generatedOutput={generatedOutput}\n                  onSendMessage={handleSendMessage}\n                  project={project}\n                  showMockNotice={showMockNotice}\n                  onDismissMockNotice={() => setHasDismissedMockNotice(true)}\n                  onCreateAsset={(asset) => {\n                    setProject(prev => ({\n                      ...prev,\n                      assets: [...prev.assets, asset],\n                      updatedAt: new Date()\n                    }));\n                  }}\n                  onUpdateAsset={handleUpdateAsset}\n                />\n              </div>\n            )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-shrink-0 w-full lg:fixed lg:right-6 lg:top-[14rem] lg:bottom-6 lg:w-[19rem] h-full flex flex-col gap-6\">\n            {selectedAssetId && (\n              <div className=\"flex-shrink-0 max-h-128 overflow-hidden\">\n                <AssetDetailsPanel\n                  selectedAssetId={selectedAssetId}\n                  project={project}\n                  onUpdateAsset={handleUpdateAsset}\n                  onDeleteAsset={handleRequestDeleteAsset}\n                  onClose={() => setSelectedAssetId(null)}\n                  onRequestSuggestion={handleRequestFieldSuggestion}\n                />\n              </div>\n            )}\n\n            <div className=\"min-h-0 flex-1\">\n              <ControlPanel\n                tagWeights={_tagWeights}\n                onTagWeightChange={_onTagWeightChange}\n                onGenerate={handleGenerate}\n                isGenerating={isGenerating}\n                onSyncAssetsToMcp={syncAssetsToMcp}\n                isMcpLoading={isMcpLoading}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {isReferenceViewerOpen && (\n        <React.Suspense\n          fallback={(\n            <div className=\"fixed inset-0 z-[65] flex items-center justify-center bg-gray-950/70 backdrop-blur\">\n              <div className=\"flex items-center gap-3 rounded-2xl border border-white/10 bg-gray-900/90 px-6 py-4 text-sm text-gray-200\">\n                <SparklesIcon className=\"h-5 w-5 animate-pulse text-indigo-200\" title=\"Loading\" />\n                <span>Loading reference library…</span>\n              </div>\n            </div>\n          )}\n        >\n          <ReferenceViewer\n            isOpen={isReferenceViewerOpen}\n            onClose={() => setIsReferenceViewerOpen(false)}\n          />\n        </React.Suspense>\n      )}\n\n      {isUserGuideOpen && (\n        <UserGuide\n          isOpen={isUserGuideOpen}\n          onClose={() => setIsUserGuideOpen(false)}\n        />\n      )}\n\n      {isApiConfigOpen && (\n        <ApiConfig\n          isOpen={isApiConfigOpen}\n          onClose={() => setIsApiConfigOpen(false)}\n        />\n      )}\n\n      <ConfirmModal\n        isOpen={Boolean(pendingDeleteAsset)}\n        title=\"Delete asset?\"\n        description={pendingDeleteAsset\n          ? `Removing \"${pendingDeleteAsset.name}\" will clear it from all timelines. You can undo shortly after.`\n          : 'Removing this asset will clear it from all timelines. You can undo shortly after.'}\n        confirmLabel=\"Delete\"\n        cancelLabel=\"Cancel\"\n        onConfirm={handleConfirmDelete}\n        onCancel={handleCancelDelete}\n      />\n\n      <ToastNotification\n        toast={toastState}\n        onDismiss={handleDismissToast}\n        onUndo={toastState?.allowUndo ? handleUndoDelete : undefined}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n","size_bytes":76582},"loop/knowledge/camera_movement_notes.md":{"content":"Day : 6 \nSave the Cat is a screenwriting concept where the protagonist does something early in the story \nto make them relatable or likable, often referred to as \"saving the cat.\" It establishes an \nemotional connection with the audience. \nIn Batman Begins, Bruce Wayne's key \"Save the Cat\" moment is when he decides not to kill \nRa's al Ghul and saves Gotham from destruction. This decision shifts him from a \nvengeance-driven character to a hero driven by justice and hope, aligning with the Save the Cat \nstructure of a protagonist's moral transformation. \n\nEnter Late, Exit Early (Dialogue & Scene Writing) \nA storytelling principle used to keep scenes tight and impactful. \nEnter Late: Start scenes at the latest possible moment — right when the tension or action \nbegins. \nExit Early: Leave the scene before everything is wrapped up — let the audience fill in the blanks \nor move forward with momentum. \nIn dialogue, this means cutting out greetings, small talk, or over-explaining. Stick to the essence \nof what’s being said or revealed. \n\nLinear vs Non-Linear Storylines \nLinear: Events unfold in chronological order. Clear cause and effect. Easier to follow. \nNon-Linear: Events are out of sequence (e.g., flashbacks, parallel timelines). Used to build \nmystery, reveal character depth, or play with audience expectations. \n\nExposition \nThe method of conveying backstory or world-building. \nGood exposition feels natural and is integrated into the story. \nTechniques include: \nDialogues (character reveals info through conversation) \nPhotographs/Documents (visual cues) \nFlashbacks (showing past events instead of telling) \nEnvironment/Props (set design that hints at history or conflict) \nPurpose: Add depth, motivation, and emotional stakes to the characters and world. \n\nHighlight the ordinary... Make it extraordinary. People should relate but it makes them to nah I \nam not even it that bad situation \nThe real unity of opposites is one in which compromise is impossible.\" - to write conflict \ndialogue becomes powerful when characters have hidden agendas \nThe Unity of Opposites is the theory that great conflict comes from characters with opposing \nneeds, values, or goals, who are locked together in a situation where neither can back down or \nwalk away. - to write conflict \nMake the character do somthing that contradict it's behaviour i.e old lady we imagine to be all go \nwith the flow but what if they turn out to be mean. \nBreak the stereotype of the character... Like whatever the character is.. \nWhat is the first thing character says...like sherlock's first dialogue is deduction.. that's first \nimpression. \nShow what is the problem of character \nMake him likeable \nWiden the perception of about themselves.... \nLike walter white tell he is doing all for his family but he was doing all because his ego. \nCharacter should be spilt between 3 time... \nPast- he should have a past that affect his present \nPresent - the immediate problem he faces ... Could be one personal conflict and one internal \nconflict.# Camera Movement Notes - Day 5\n\n## 1. Slow Push-In\n- What it is: The camera slowly moves closer to the subject, usually in a straight line (dolly or track in).\n- Effect: Builds tension or draws the audience into a character’s internal world. Creates intimacy or anxiety.\n- Used in: Emotional realizations, suspenseful moments.\n- Example: In Interstellar, when Cooper watches the video messages from Earth — slow push-in adds emotional weight.\n\n## 2. Creep-Out\n- What it is: A slow backward camera movement, often away from a character.\n- Effect: Makes the subject feel isolated, distant, or lost in their environment. Adds a haunting or reflective vibe.\n- Mood: Loneliness, detachment, revelation.\n- Think: The world keeps moving but the character is stuck.\n\n## 3. The Moment\n- What it is: Not a movement, but a concept — “The Moment” refers to the emotional or narrative peak in a scene. Camera moves are used to highlight it.\n- Camera behavior: Often a slow push-in, or a steady lock on the actor’s face. Sometimes silence + stillness.\n- Goal: Let the actor carry it. Don’t distract.\n\n## 4. Distraction\n- What it is: A purposeful use of movement, composition, or visual elements to mislead or redirect the audience’s focus.\n- Camera trick: Pan or rack focus to something irrelevant before revealing the real subject.\n- Usage: Builds suspense, surprise, or contrast.\n- Example: A character talks calmly, but in the background — a small, crucial movement hints something’s wrong.\n\n## 5. The Candidate\n- Refers to: A famous use of paranoid, slow zooms or wide shots from The Candidate (1972) and other political thrillers.\n- Camera style: Wide frame, subject small and distant, often zooming or pulling back.\n- Effect: Powerlessness, surveillance vibe. The system is watching. You're just a pawn.\n- Mood: Paranoia, bureaucracy, loss of control.\n","size_bytes":4904},"loop/knowledge/film_techniques_notes.md":{"content":"# Film Techniques Notes\n\n## Lighting\n- Use of lighting to set mood and atmosphere.\n- Highlight subjects or create shadows for dramatic effect.\n- Different lighting styles can convey different emotions.\n\n## Sound\n- Use of sound effects and music to enhance storytelling.\n- Sound can indicate off-screen action or create tension.\n\n## Camera Movement\n- Movement of the camera to follow action or reveal information.\n- Types include pan, tilt, dolly, tracking, handheld.\n- Camera movement can influence viewer engagement and emotion.\n\n## Aspect Ratio\n- The width-to-height ratio of the frame.\n- Different aspect ratios create different visual experiences.\n- Common ratios: 16:9, 4:3, Cinemascope.\n\n## Character Movement\n- How characters move within the frame.\n- Movement can express emotion, intention, or narrative progression.\n\n## Framing and Composition\n- Arrangement of visual elements within the frame.\n- Use of rule of thirds, leading lines, balance, and symmetry.\n- Guides viewer’s attention and conveys meaning.\n\n## Angle\n- The perspective from which the camera views the subject.\n- High angle, low angle, eye level, bird’s eye view, etc.\n- Angles affect perception of characters and scenes.\n\n## Transition Between Two Frames\n- Techniques to move from one shot to another.\n- Cuts, fades, dissolves, wipes, and other transitions.\n- Transitions can indicate passage of time, change of location, or mood shifts.\n\n## Depth of Field\n- The range of distance within a shot that appears acceptably sharp.\n- Use of shallow depth of field to isolate subjects by blurring background.\n- Crossing out or blurring out-of-focus elements to direct viewer focus.\n","size_bytes":1654},"loop/knowledge/fractured_loop_build_system_notes.md":{"content":"\n\n# Fractured Loop Build System Notes\n\n## Fractured Loop v1 – Core Knowledge Base\n1. Overview\n- AI-assisted filmmaking system for story, shot, image, video, and edit planning\n- Provides stepwise guidance while keeping full context awareness\n- Supports seed/ID logic for transferring creative context between builds\n- Each build can run independently if no prior context exists\n- All builds: Story → Shot → Img → Vid → Edit\n- Allows confirmation before applying context or mutation\n\n2. Core Logic\n- Seed & ID System:\n  - Every transferable data point is a seed\n  - Seeds may include: character info, shot IDs, framing, props, lighting, colors, camera, story beats\n  - Seeds have IDs for tracking through builds\n  - Builds ask confirmation before using a seed\n  - Users can choose:\n    1. Keep seed and override question\n    2. Ask question and discard seed\n    3. Mutate seed with approval\n  - Seeds can propagate through:\n    - Story → Shot\n    - Shot → Img\n    - Img → Vid\n    - Vid → Edit\n- Context Awareness:\n  - If context exists: builds prefill questions and mark them as context-filled\n  - User chooses to accept, override, or mutate\n  - Builds can work without context, asking all standard questions\n\n3. StoryBuild (Full Control)\n- Part 1 – Character & World:\n  - Character: Name, Age, Backstory, Want, Need, Flaw, Wound\n  - World & Opposition: Tone, Conscious/Unconscious forces, External conflict, Linear/Non-linear\n  - Theme Suture: Theme, Opposing Values, Antagonist Want/Need, Mirror to Protagonist\n  - Dialogue & Contrast: First line, stereotype/subversion, contradictions\n- Part 2 – Plot & Resonance:\n  - Surface conflict, Internal contradiction, Inciting crisis, Midpoint, Transformation/Failure\n  - Relatability & transcendence: ordinary traits, mythic resonance, key recognition moment\n  - Symbolic objects & motivated cuts: objects/motifs, what they symbolize, motivated editing\n- Outputs:\n  - Character arc grid\n  - Opposition map\n  - One-page story beat outline\n  - Key dialogue excerpts\n  - Motivated visual motifs & cuts\n  - Suggested color palette & setting echoes\n  - Thematic realization\n- Hard-coded Questions:\n  - All above elements prompted individually\n  - Includes confirmation for seeds\n\n4. ShotBuild\n- Shot Parameters:\n  - Type / Composition, Style Guide, Camera Type, Focal Length, Depth of Field\n  - Film Stock / Look, Lighting Style / Technical Details, Color Grading / Hex codes\n  - Framing / Composition, Character Blocking, Texture / Atmosphere / Effects\n  - Film Emulation / Grain\n- Seed/ID Logic:\n  - Shot selections create IDs\n  - Prepares prompts for ImgBuild\n  - User confirms seed transfer, mutation\n- Hard-coded Questions:\n  - All above parameters prompted individually\n  - Option to auto-adapt selected shot IDs into ImgBuild\n\n5. ImgBuild\n- Parameters (from original MJBuild logic):\n  - Shot Type / Composition\n  - Style Guide / Reference\n  - Camera Type / Focal Length / Aperture\n  - Film Stock / Look / Lighting / Color Grading / Hex codes\n  - Framing / Character Blocking / Texture / Atmosphere / Effects / Grain\n- Seed/ID Logic:\n  - Accepts seeds/IDs from ShotBuild\n  - Offers full questions, prefilled with context if available\n  - User chooses for each field: keep context, override, or mutate\n  - Next, choose AI model for prompt generation\n  - Option: auto-adapt prompt style to all selected shot IDs\n- Outputs seeds/IDs for VidBuild\n\n6. VidBuild\n- Uses ImgBuild outputs (IDs/seeds)\n- Prompts user for: Subject, Action, Camera Movement, Setting, Lighting, Mood, Style, Continuity flags\n- Auto-suggests choreography or shot sequencing\n- Offers confirmation for each seed usage/mutation\n- Outputs seeds/IDs for EditBuild\n\n7. EditBuild\n- Suggests video editing steps\n- Lists prompts for Img & Vid generation in execution order\n- Suggests B-roll generation prompts to fill visual gaps\n- Includes audio, SFX, and transition tag recommendations\n- Acts as veteran filmmaker advisor: addition/removal, storytelling improvements, context-aware\n\n8. General Rules Across Builds\n- Each build: asks questions individually\n- Context presence triggers: prefill + note + confirmation\n- All seed/ID propagation requires user confirmation\n- Builds can run independently without prior context\n- Outputs include: seeds, IDs, logs for future reference\n- /lab command logs all activities with seed and ID history & mutation\n\n9. Prompt & Technical Options\n- Each build contains full cinematic options: camera, lighting, color, framing, lens, depth of field, film emulation, style, composition, texture, atmosphere\n- Models supported: MJ, Sora, Seedream, Imagen, Nano Banana, Reve AI, Soul Higgsfield, Luma Ray, Kling AI, Veo 3, Seedance, MJ Video\n- Auto-adaptable for video or image prompts from IDs/seeds\n\n## Build Rules (All Builds)\n1. Start with a brief overview of the build: Explain the purpose and what the output will be used for.\n2. Ask questions to the user one by one: Verbose with examples, never all at once, wait for input.\n3. If context available from previous builds, ask if user wants to: Use as-is, Mutate, or Ignore.\n4. Mark prefilled fields from context and allow override.\n5. After all questions: Ask about selectively carrying forward seeds/IDs for context-aware flow.\n6. Each seed/ID tracks evolution across builds for continuity.\n7. Provide confirmation before any seed is applied to next build.\n\n## Example Build Structure\n**Overview:** \"This is the Shotbuild. Here you define cinematic shots for your story, including angles, framing, lighting, and props. The output will be used for Imgbuild and Vidbuild to maintain continuity and cinematic flow.\"\n\n**Step-by-step questions:**\n1. Shot Type / Composition - Examples: High-angle, Dutch angle, Extreme wide, POV, Silhouette, Over-the-shoulder\n2. Style Reference (Optional) - Examples: 1920s silent film, 80s cyberpunk, noir-steampunk blend\n3. Camera Type - Examples: Arri Alexa 65, Red Monstro 8K, Sony Venice 2, IMAX MSM 9802\n4. Focal Length - Examples with context: 10mm for ultra-wide drama, 50mm for natural human perspective\n...continue through all fields (depth of field, lighting, color, composition, props, atmosphere, texture, etc.)\n5. Context & Seed Application - Options: Use / Mutate / Ignore, ask which seed IDs to transfer forward\n6. Confirmation - Summarize selections and seeds applied, ask for final approval before saving output.\n\n## AI Model Prompt Conversion Table\n\n| Build Field / Data Description | MidJourney Prompt | Sora Prompt | Veo 3 / Seedance | Notes |\n|-------------------------------|-------------------|-------------|-----------------|-------|\n| Storybuild Character Name & Traits | [Character Name], [Key Trait], cinematic portrait | [Character Name], [Key Trait], action, emotion | [Character Name], [Key Trait], [Action Sequence], [Emotion] | Character traits guide subject & behavior |\n| Setting / World | in [Setting], cinematic style | [Setting], background, cinematic lens | [Setting], full sequence backdrop, lighting cues | Story world informs environment and B-roll |\n| Emotion / Mood | mood: [Emotion], [Lighting Style] | [Emotion], camera pans or tracking | [Emotion], color grading & shot continuity | Controls atmosphere |\n| Plot Beats | scene: [Plot Beat], cinematic composition | [Plot Beat], action verb, scene continuity | [Plot Beat], shot sequence IDs, transitions | Story arc dictates scene order & motion |\n| Shotbuild Shot Type | shot: [Shot Type], [Camera Type], [Focal Length] | [Shot Type], camera movement, perspective | [Shot Type], lens, angle, continuity ID | Ensures correct cinematic grammar |\n| Camera Type / Lens | camera: [Camera Type], [Lens] | [Camera Type], movement, cinematic lens | [Camera Type], shot-specific lens & focal | Used for realism & motion fidelity |\n| Depth of Field | aperture: [f-stop] | [f-stop], focus tracking | [f-stop], depth continuity | Bokeh / focus control |\n| Lighting Style | lighting: [Style], [Technical Details] | [Lighting Style], scene lighting, shadows | [Lighting Style], match previous shot ID | Guides shadows, time of day, mood |\n| Color Grading | grading: [Style], hex [colors] | [Style], background/foreground colors | [Style], consistent palette across IDs | Controls final color tone |\n| Props / Composition | props: [Props], framing: [Rule] | [Props], midground/foreground placement | [Props], continuity with previous shots | Foreshadowing, visual motifs |\n| Imgbuild Subject / Action | subject: [Character/Obj], action: [Verb] | [Subject], [Action], environment cues | [Subject], [Action], scene continuity IDs | Motion or stills, defines central element |\n| Environment / Setting | setting: [Location], [Lighting], style | [Location], background movement | [Location], shot sequence continuity | Background context & mood |\n| Style / Film Look | style: [Genre], [Film Stock], [Lens], [Grading] | [Style], cinematic lens, lighting | [Style], visual continuity across IDs | Visual consistency |\n| Texture / Atmosphere | effects: [Texture/Atmosphere] | [Texture], particle effects | [Texture], continuity with shot IDs | Immersive environment |\n| Seed / ID Context | seed: [Seed ID], adapt? yes/no | [Seed ID], apply to sequence? | [Seed ID], evolve for next shots | Transfers context & ensures continuity |\n| Vidbuild Scene / Action | scene: [Action], camera: [Type & Move] | [Action], camera movement, duration | [Action], shot IDs, B-roll addition | Generates short clip instructions |\n| Continuity / Seeds | seed: [Seed IDs], maintain/adapt | [Seed IDs], keep context? yes/no | [Seed IDs], evolve for video sequence | Ensures seamless continuity |\n| Style / Lighting / Mood | style: [Film Look], lighting: [Style], grading: [Hex] | [Style], motion continuity | [Style], match color & mood across IDs | Keeps cinematic feel |\n| Extra Suggestions | suggest: [Extra Shots/Props] | [Extra Shots], fill gaps | [Extra Shots], maintain story coherence | Fills narrative or visual gaps |\n| Editbuild Footage Prompt List | edit: [Prompt List] | [Prompt List], audio, SFX, transitions | [Prompt List], B-roll suggestions, continuity | Suggests editing and additions, does not render new media |\n| Editing Notes | audio: [Track], effects: [FX], timing: [Cut Notes] | [Audio/SFX/FX Notes] | [Audio/SFX/FX Notes], maintain story rhythm | Guides final edit |\n\n## Seed & ID Logic Across Builds\n1. Every key piece of data in Story → Shot → Img → Vid is assigned a Seed ID.\n2. IDs allow continuity across builds.\n3. For Imgbuild & Vidbuild, the system asks: Use seed from previous build? (Yes/No), Apply as-is or mutate values?, Confirm each adapted field individually.\n4. Seeds evolve in Vidbuild and Imgbuild to track motion, composition, and story changes.\n\n## Editbuild – Full Guided Flow\n**Overview:** Acts as your veteran filmmaker/editor. Reviews all story, shot, image, and video prompts, then provides: Context-aware visual suggestions (B-roll, extra angles, gaps), Editing recommendations (cuts, pacing, transitions, SFX, music cues), Seed/ID tracking for every element, Copy-paste prompts for final generation (image/video).\n\n### 1. Review Story & Shot Context\n- Question 1: Do you want to import context from previous builds (Storybuild, Shotbuild, Imgbuild, Vidbuild)? Options: All, Selected, None\n- Question 2: If importing, which seeds/IDs should be included? Display each seed/ID with brief description, allow multiple selection\n- Question 3: For each selected seed/ID: Keep context as-is, Mutate context (explain how), Discard context\n\n### 2. Sequential Prompt Review\n- Question 4: Would you like a step-by-step review of all selected prompts in execution order? Options: Yes (default), No\n- Question 5: For each prompt: Highlight story beat / visual intention, Display seed/ID source, Ask: Keep prompt, adjust, or remove\n\n### 3. Context-Aware Visual Suggestions\n- Question 6: Do you want additional visual suggestions? Additional B-roll to fill gaps, Alternate camera angles, Mood/lighting variations\n- Question 7: Should suggested prompts auto-adapt to seed/ID for continuity? Options: Yes (auto-fill context), Ask for confirmation before using\n- Question 8: For each suggestion: Describe scene, lighting, camera, composition, Display intended seed/ID if generated from existing context\n\n### 4. Cinematic Guidance\n- Question 9: Provide notes on cinematic style: Framing / composition improvements, Lighting adjustments, Texture, atmosphere, or effects suggestions, Color grading tweaks\n- Question 10: For each existing prompt: Suggest removal/trimming/replacement for pacing, Indicate why (story, mood, continuity, cinematic impact)\n\n### 5. Video Editing Guidance\n- Question 11: Provide editing recommendations for each prompt or scene: Cut points, pacing, shot duration, Transition types (crossfade, whip, jump cut, match cut), Motion/Speed effects (slow-mo, ramp, stabilizer notes), Overlay effects (text, graphics, overlays, lens flares)\n- Question 12: Audio/SFX guidance: Background score placement, theme matching, Sound effects (ambient, Foley, practical), Audio timing to match edits\n\n### 6. Output Options\n- Question 13: How do you want outputs formatted? Copy-paste ready Image Prompts, Copy-paste ready Video Prompts, Editing notes (transitions, SFX, pacing), Combined document (all above)\n- Question 14: Would you like to export the updated seed/ID log with notes from this edit session? Yes → generates JSON or text file with complete traceability, No\n\n## Storybuild – Full Detailed Questions\n**Disclaimer:** This build is designed to help you tackle creative block. It provides detailed outlines and prompts for your idea, but you remain in full creative control. Seeds will be generated for every answer to track context for later builds.\n\n### Part 1 – Character Core & World Reaction\n1. Character Foundation\n- Name: What is the character's full name? Any nicknames or titles?\n- Age: Exact age or approximate age range?\n- Gender / Identity: How does the character identify?\n- Physical Description: Height, build, notable features, hair/eye color, scars/tattoos?\n- Personality / Core Traits: How would you describe their main personality? (e.g., bold, insecure, cunning, empathetic)\n- Backstory: What events shaped them? Childhood, trauma, achievements?\n- Wants / Goals: What does the character actively strive for?\n- Needs / Emotional Growth: What do they actually need to learn or overcome internally?\n- Flaws / Weaknesses: What are their limitations, fears, or contradictions?\n- Internal Wound / Secret: What unresolved past pain or secret drives them?\n\n2. World & Opposition\n- World Tone / Setting: Urban, rural, fantastical, dystopian, sci-fi? Day/night, era, climate?\n- External Conflict / Obstacles: What forces outside the character oppose them? Physical, social, political?\n- Conscious Forces / Allies: Who consciously helps or hinders them?\n- Unconscious Forces / Themes: Hidden societal pressures, norms, or invisible antagonists?\n- Linear or Non-linear Storytelling: Should events be chronological, fragmented, flashback-heavy?\n\n3. Thematic Suture\n- Core Theme: What is the story's central message or question?\n- Opposing Values / Ideologies: What conflicts with the character's beliefs?\n- Antagonist Goal & Needs: What does the antagonist want, and what do they need internally?\n- Mirroring / Reflection: How does the antagonist mirror or contrast the protagonist?\n\n4. Dialogue & Contrast\n- First Line / Hook: How should the story open?\n- Character Voice / Dialogue Style: Casual, formal, poetic, sarcastic, jargon-heavy?\n- Stereotype / Subversion: Does this character break or fulfill a cliché?\n- Contradictions & Tensions: Any internal vs external contradictions to highlight?\n\n### Part 2 – Plot & Resonance\n5. Plot & Arc\n- Surface Conflict / Initial Problem: What triggers the story?\n- Internal Contradiction / Emotional Arc: Where does the character struggle internally?\n- Inciting Incident / Crisis: What event disrupts the normal world?\n- Midpoint / Turning Point: What shifts the story's stakes or understanding?\n- Climax / Transformation: How does the character confront the ultimate challenge?\n- Resolution / Failure: How does the character end the story? Success, failure, ambiguous?\n\n6. Relatability & Transcendence\n- Ordinary Traits / Quirks: What human, relatable qualities do they have?\n- Mythic or Archetypal Resonance: What timeless or universal traits emerge?\n- Key Moment of Recognition: When does the audience empathize, reflect, or recognize themselves in the character?\n\n7. Symbolic Objects & Motivated Cuts\n- Important Objects / Motifs: Items that symbolize character traits, theme, or conflict?\n- Object Symbolism: What deeper meaning do they carry?\n- Motivated Editing / Visual Beats: Scenes where objects or visual cues signal change? (Match cut, smash cut, echo cut, jump cut, etc.) Where in the story does this object gain or shift meaning?\n\n### Outputs / Seeds\nFor each answer, generate a seed ID so it can be referenced in later builds:\n- Character: STORY-ID-CHAR-001\n- Backstory: STORY-ID-BACK-001\n- Theme: STORY-ID-THEME-001\n- Plot Beat: STORY-ID-PLOT-001\n- Motif / Object: STORY-ID-MOTIF-001\n- Dialogue Example: STORY-ID-DLG-001\n\n### Context Awareness\nLater builds (Shot, Image, Video) can request seeds:\n\"Do you want to use STORY-ID-CHAR-001 in this shot?\"\nOptions: Keep as is, Override manually, Discard\n\n## AI Prompt for StoryBuild (AI 6)\nDesigned for use with Himanshu Singh Bais's character-want/need grid and emotionally structured storytelling logic. You are a storytelling AI trained to construct layered, psychologically rich, emotionally resonant cinematic stories using a unique want/need grid. Ask the following sections one at a time. Wait for user input after each before proceeding.\n\n### 1. CHARACTER FOUNDATION (Core of Inner War)\n- Who is the protagonist? (Name, age, current situation)\n- What is their formative past? (Traumas, social structures, obsessions)\n- What do they want? (What they believe they need to feel whole)\n- What do they need? (What they actually lack to become integrated)\n- What flaw or defense keeps them from seeing their need?\n- How did their past generate this flaw and their current behavior?\n\n### 2. WORLD & OPPOSITION (Psychosphere of Conflict)\n- What is the world like? (Tone, aesthetics, emotional physics)\n- What conscious forces (people, institutions, rules) oppose or support the protagonist's want/need?\n- What unconscious forces (myths, culture, memory, fate) oppose or support the want/need?\n- What is the core external conflict of this world?\n- Is the story linear or non-linear? Why? (What inner or thematic logic justifies this choice?)\n\n### 3. THEMATIC SUTURE (Unity of Opposites)\n- What is the core theme this story confronts or dismantles?\n- What two opposing values or philosophies are in direct conflict?\n- Who is the antagonist? What is their want or need?\n- How does the antagonist mirror, distort, or oppose the protagonist?\n\n### 4. DIALOGUE & CONTRAST (Character Revelation through Subversion)\n- What is the first line your character says? (Reflects their false belief)\n- What stereotype do they seem to be at first glance?\n- How will you subvert this expectation?\n- What core contradiction defines them emotionally or behaviorally?\n\n### 5. PLOT & ARC (From Fracture to Catharsis)\n- What external conflict drives the surface plot?\n- What internal contradiction will tear the protagonist open?\n- What inciting crisis starts the story?\n- What midpoint twist reveals their self-justification hides a deeper lie?\n- Do they transform, fracture, or fail by the end?\n\n### 6. RELATABILITY & TRANSCENDENCE (Audience Bond Layer)\n- What is ordinary or human about this character?\n- How do you make their life feel mythic, sacred, or transcendent even in pain?\n- What moment or line will make the viewer say: \"I thought I was the only one who felt that…\"?\n\n### 7. SYMBOLIC OBJECTS & MOTIVATED CUTS (Visual & Narrative Echoes)\n- Are there any specific symbolic objects or motifs you want to include? (e.g., snow globe, sketchbook, broken mirror)\n- What inner truth or shift does this object represent?\n- What kind of visual cut should it motivate? (Match cut, smash cut, echo cut, jump cut, etc.)\n- Where in the story does this object gain or shift meaning?\n\n### OUTPUT (after all inputs are gathered):\n- Character Arc using Want/Need Grid\n- Opposition Map: conscious + unconscious forces\n- One-Page Story Beat Outline\n- Key Dialogue Excerpts (flaw, fracture, insight)\n- Motivated Visual Motifs and Cut Design\n- Suggested Color Palette and Setting Echoes\n- Final Thematic Realization (the truth they realize but may never speak)\n\n## Enneagram Character Grid\nCustom Grid: Enneagram x Want/Need x Power Dynamics\n\n| Type | Core Want | Core Need | Reaction When Supported | Reaction When Opposed |\n|------|-----------|-----------|-------------------------|-----------------------|\n| 1 - Reformer | To be right / perfect | To accept imperfection | Doubles down on idealism, becomes a mentor | Becomes rigid, self-critical, judgmental |\n| 2 - Helper | To feel loved by giving | To receive love without giving | Overgives, emotionally intense | Feels rejected, manipulative, resentful |\n| 3 - Achiever | To be admired / succeed | To feel worth without performance | Overperforms, shape-shifts identity | Collapse of image, shame, avoids failure |\n| 4 - Individualist | To be unique / special | To be understood as they are | Embraces creative identity, vulnerable | Withdraws, melancholic, dramatic |\n| 5 - Investigator | To understand / be competent | To feel safe in connection | Becomes teacher or oracle figure | Detaches, isolates, intellectual arrogance |\n| 6 - Loyalist | To feel secure / safe | To trust themselves | Becomes a fierce protector | Doubts everything, projects anxiety |\n| 7 - Enthusiast | To experience / avoid pain | To be present in discomfort | Optimistic guide, inspiring | Escapes, denial, panic under pressure |\n| 8 - Challenger | To be in control | To be vulnerable safely | Protective leader, intense | Dominating, destructive, explosive |\n| 9 - Peacemaker | To keep peace / avoid conflict | To assert self-worth | Harmonious leader, bridge-builder | Numbs out, passive-aggressive, merges with others |\n\n## Keyframe Story Seed Structure\n### 1. KEYFRAME 1: Emotional Core Setup\n- Show who the character is when unobserved (true self).\n- Show how they change when observed (by someone they admire/hate/fear).\n- Reveal if the character is conscious or unconscious of this shift.\n\n### 2. KEYFRAME 2: Desire Collision\n- Introduce a want or need through an event or relationship.\n- The world/power structure either supports or resists this.\n- Define the tension: Is the power helping or blocking their goal?\n\n### 3. KEYFRAME 3: Mirror Scene\n- Character confronts another who embodies the opposite state (e.g., conscious vs unconscious, want vs need).\n- This scene acts like a mirror — a moment of potential awakening or deepening confusion.\n\n### 4. KEYFRAME 4: False Victory / Crisis\n- Character achieves a want or fails at a need (or vice versa).\n- This leads to a feeling of emptiness or chaos, sparking doubt or reflection.\n\n### 5. KEYFRAME 5: Internal Shift\n- Character begins to recognize the deeper truth (moves from unconscious to conscious).\n- A key choice is made that sacrifices want for need — or fails to.\n\n### 6. KEYFRAME 6: External Echo\n- The world/power either shifts (if the character transforms enough) or punishes/rewards based on the choice made.\n\n### 7. KEYFRAME 7: Final Expression\n- The final state: has the character truly changed?\n- Show who they are now — and how they behave when no one is watching.\n\n## Character–World Dynamic Grid\nEach character can be:\n- Conscious (aware of internal/emotional reality)\n- or\n- Unconscious (blind to their real motivations/emotions)\n\nEach can pursue either a:\n- Need (soul-growth, truth, internal shift)\n- or\n- Want (external goal, desire, image)\n\nThe World (or Power) can then:\n- Support the Need\n- Oppose the Need\n- Support the Want\n- Oppose the Want\n\n---\n\nGRID STRUCTURE:\n\n| Character Type | Pursues | Power Supports | Power Opposes |\n|----------------|---------|----------------|---------------|\n| Conscious | Need | Harmonious story of growth | Tragic hero, painful but transformative |\n| Conscious | Want | Success arc, fulfillment | Moral dilemma, sacrifice needed |\n| Unconscious | Need | Accidental healing, fate helps | Resistance until awakening |\n| Unconscious | Want | Hollow success, irony | Self-destruction, powerful conflict |\n\n## Character Internal States – Summary\nCharacters shift depending on who's watching and how they feel about them (admire, fear, love, hate). They react based on a social mirror: acting as who they think the other person sees them as.\n\nCore Layers of a Character:\n1. Outer Mask – Who they pretend to be (public persona)\n2. Private Self – Who they think they are (with trusted people)\n3. Core Wound/Truth – Who they are underneath (revealed in crisis)\n\nSocial Reaction Shifts:\n- With someone they admire – Performative, seeking validation\n- With someone they fear – Obedient, deceptive, or defensive\n- With someone they hate – Aggressive, mocking, combative\n- With someone they love – Vulnerable or scared to be vulnerable\n- With someone they pity – Superior, nurturing, or manipulative\n\nKey Insight:\n> \"We are who we think they think we are.\"\n\n## Writing Tips for Character Development and Conflict\n### Audience Connection and World Perception\n- What does the audience think when they see the world?\n- How does it make them connect to their idea?\n- How do characters communicate?\n- Is the character funny in a horror world?\n- Is the character hiding something that can change the world?\n- Is there a fight between two people where we know their desires, flaws, and how they change throughout the story?\n- What theme do they follow?\n\n### Highlighting the Ordinary to Make it Extraordinary\n- People should relate but think \"Nah, I'm not even in that bad situation.\"\n- \"The real unity of opposites is one in which compromise is impossible.\" - to write conflict.\n- Dialogue becomes powerful when characters have hidden agendas.\n- \"The Unity of Opposites is the theory that great conflict comes from characters with opposing needs, values, or goals, who are locked together in a situation where neither can back down or walk away.\" - to write conflict.\n\n### Breaking Stereotypes and Contradictions\n- Make the character do something that contradicts their behavior (e.g., an old lady we imagine to be all go-with-the-flow but turns out to be mean).\n- Break the stereotype of the character... whatever the character is.\n- What is the first thing the character says? (Like Sherlock's first dialogue is deduction - that's first impression).\n- Show what the problem of the character is.\n- Make them likeable.\n- Widen the perception about themselves (e.g., Walter White tells himself he's doing it all for his family but he's doing it because of his ego).\n\n### Character Split Across Time\n- Character should be split between 3 times:\n  - Past: A past that affects their present.\n  - Present: The immediate problem they face (could be one personal conflict and one internal conflict).\n\n### Inciting Incident and Conflict Chain\n- Don't make inciting incident same for everyone, protagonist should have higher stakes.\n- It's never too soon to push character out of comfort zone. Aka inciting incident.\n- Don't make conflict too easily resolved.\n- A chain reaction of conflict should happen.\n\n### Storyboard Creation\n- Write or draw the use of lightning, sound, camera movement, aspect ratio, character movement.\n- Framing, composition.\n- Angle.\n- Transition between two frames.\n- Depth of field, by crossing out out of focus stuff.\n\n### Script Writing and Story Structure\n- A story structure... Generally story follow some structure, there are various ways to do it and one of them is Harmon story circle:\n  1. You: A character in their zone of comfort.\n  2. Need: Wants something.\n  3. Go!: So they enter an unfamiliar situation.\n  4. Struggle: To which they have to adapt.\n  5. Find: In order to get what they want.\n  6. Suffer: Yet they have to make a sacrifice.\n  7. Return: Before they return to their familiar situation.\n  8. Change: Having changed fundamentally.\n\n### Screenplay Conventions\n- Keep it visual and in present tense.\n- Write V.O. for voice over, add CUT TO or BACK TO for scene change.\n- MONTAGE START and MONTAGE END.\n- Dialogues in the centre.\n\n### Lighting Notes\n1. Types of Light Sources\n- Natural Light – Sunlight, moonlight. Changes throughout the day.\n- Practical Light – Existing lights in a scene (lamps, candles, screens).\n- Artificial Light – Studio lights, LEDs, flash, strobes.\n\n2. The Three-Point Lighting System\n- Key Light – The strongest and main light source, shapes the subject.\n- Fill Light – Softer, reduces shadows from the key light.\n- Backlight (Rim/Separation Light) – Placed behind the subject, separates them from the background.\n- Bonus: Kicker Light – A side or backlight that adds a highlight on the edge of the subject.\n- Motivated Lighting – Artificial lights that mimic natural sources (e.g., using an LED to simulate sunlight through a window).\n\n3. Lighting Techniques & Styles\n- Rembrandt Lighting – Creates a small triangle of light on one cheek, dramatic yet natural.\n- Loop Lighting – Slight shadow under the nose, common for portraits.\n- Split Lighting – One half of the face is lit, the other is dark—great for high-contrast looks.\n- Butterfly (Paramount) Lighting – Shadow under the nose, often used for beauty shots.\n- Clamshell Lighting – Two soft lights, one above and one below, for a smooth look.\n- Silhouette Lighting – Light comes from behind, subject appears dark.\n- Low-Key Lighting – High contrast, dramatic shadows, often used in film noir.\n- High-Key Lighting – Bright, low contrast, often used in commercials and comedies.\n\n4. Light Softness & Distance\n- Larger light source = Softer shadows (e.g., softboxes, diffused window light).\n- Smaller light source = Harsher shadows (e.g., direct sunlight, bare bulb).\n- Closer light = Softer shadows because it wraps around the subject more.\n- Farther light = Harsher shadows as it becomes more directional.\n- Modifiers to Soften Light:\n  - Softbox – Diffuses light for smooth shadows.\n  - Umbrella – Spreads light over a large area.\n  - Bounce (Reflector) – Redirects light, reducing harshness.\n  - Diffusion Gel or Scrim – Softens harsh lights.\n\n5. Additional Cinematic Rules\n- Shoot from the Dark Side – Position the camera on the shadowed side of the subject’s face to create depth and drama.\n- Broad vs. Short Lighting\n  - Broad Lighting – The bright side of the face faces the camera (makes the face look wider).\n  - Short Lighting – The shadowed side of the face faces the camera (adds contrast and depth).\n\n### Scene Writing and Editing Techniques\n- Movement of character should give sense of what they would do... Audience should be able to anticipate.\n- Show weather, time of the day.\n- Cut on action, switch between full to medium shot in a single scene.\n\n## Shotbuild – Full Detailed Questions\n**Disclaimer:** This build is designed to guide you through cinematic shot planning. Seeds are generated for every answer to track context for later builds. Each question is verbose to maximize context transfer to Image and Video builds.\n\n### Part 1 – Shot Core & Camera Decisions\n1. Shot Identification\n- Shot Name / ID: What do you want to call this shot? (For reference and seed tracking)\n- Purpose / Beat: Is this establishing, dialogue, emotional, payoff, or action?\n- Scene Reference / Context: Which part of the story does this shot belong to?\n- Seed Reference (Optional): Do you want to pull any seeds from /storybuild to influence this shot? (Yes/No → Confirm which seeds)\n\n2. Shot Type / Composition\n- Shot Type: Examples: High-angle, Dutch angle, Extreme wide, POV, Over-the-shoulder, Silhouette, Split diopter, Asymmetrical, Establishing\n- Framing / Rule: Rule of thirds, Golden ratio, Negative space, Symmetry, Frame-in-frame\n- Character Placement / Blocking: Subject foreground, antagonist rear, group center, left midground, etc.\n\n3. Camera & Lens\n- Camera Type: Examples: Arri Alexa 65, Red Monstro 8K, Sony Venice 2, Phantom Flex 4K, IMAX MSM 9802\n- Focal Length: 10mm (ultra-wide), 15mm (wide), 35mm (standard), 50mm (natural), 100mm (portrait), 200mm (telephoto)\n- Depth of Field / Aperture: f/1.2 (dreamy), f/2.8 (shallow cinematic), f/5.6 (balanced), f/11 (deep focus), f/22 (everything sharp)\n\n4. Movement & Dynamics\n- Camera Movement: Pan, Tilt, Dolly, Track, Crane, Handheld, Steadicam, Zoom, Static\n- Character / Object Movement: Walking, running, entering frame, reaction, gesture, POV interaction\n- Temporal Notes: Slow motion, real-time, long take, cut-heavy\n\n### Part 2 – Lighting, Color & Atmosphere\n5. Lighting Style\n- Overall Style: High-key, Low-key, Ambient, Golden hour, Moonlight, Tungsten, Practical\n- Technical Details: Ratios, bloom, flare, practical sources, shadow emphasis\n\n6. Color Grading & Look\n- Overall Color Palette / Mood: Teal & Orange, Golden glow, Black & White, Desaturated Noir, Pastel, Hyper-saturated\n- Specific Hex Codes: Background, Foreground, Costume, Props\n- Film Stock / Emulation: Kodak Vision3 5219, Fujifilm Eterna 250D, Ilford HP5, Technicolor 3-strip, etc.\n\n7. Texture / Atmosphere\n- Environmental Effects: Rain, Snow, Fog, Dust, Smoke, Haze, Light Shafts\n- Lens / Post Effects: Bloom, Lens flare, Vignette, Grain, Motion blur\n\n8. Props & Visual Foreshadowing\n- Important Props / Objects: Any symbolic or plot-driven objects?\n- Context-aware Transfer: Pull objects or motifs from /storybuild seeds? (Yes/No)\n\n### Part 3 – Output & Seed Generation\n9. Seed & ID Logic\n- Each shot generates unique IDs:\n  - Shot Core: SHOT-ID-CORE-001\n  - Camera Setup: SHOT-ID-CAM-001\n  - Lighting: SHOT-ID-LIGHT-001\n  - Color / Look: SHOT-ID-COLOR-001\n  - Props / Motifs: SHOT-ID-PROP-001\n- Seeds can transfer to /imgbuild and /vidbuild, with context confirmation:\n  - \"Do you want to apply SHOT-ID-CAM-001 to image generation?\"\n  - Options: Keep context, Override manually, Discard\n\n10. Context Awareness\n- If no context, all questions asked normally.\n- If context available, pre-fill answers with a note:\n  - \"This field is prefilled from SHOT-ID-CAM-001. Keep context or answer manually?\"\n- After all questions, final confirmation:\n  - \"Do you want to carry forward all selected seeds and IDs to image and video builds?\"\n\n## Imgbuild – Complete Cinematic Prompt Builder\n**Overview:** This build generates cinematic AI prompts for image generation, fully context-aware. If previous context (from storybuild or shotbuild) is available, it will ask which elements you want to carry forward. All selections are tracked with seed IDs for context propagation to video builds or edits.\n\n### 0. Context Check & Seed Confirmation\n1. Question: Do you want to use context from a previous build (Storybuild / Shotbuild)? List available seeds and IDs. Ask for confirmation: Use all, selected, or discard context? If selected, show a summary of the fields it will pre-fill.\n2. Question: If context is applied, do you want to keep the context or override with a new answer for each field?\n\n### 1. Shot Type / Composition\nQuestion: What shot type do you want? Examples: High-angle, Dutch angle, Extreme wide, POV, Over-the-shoulder, Silhouette, Split diopter, Asymmetrical, Establishing\nContext Note: Pre-filled if a seed specifies shot type; ask if user wants to override.\n\n### 2. Style Guide (Optional)\nQuestion: Do you want a style reference? Examples: 1920s silent film, 80s cyberpunk anime, 1940s noir-steampunk, A24 cinematic still, 70s disco album art\nContext Note: Pre-fill if seed available.\n\n### 3. Camera Type\nQuestion: Which camera type? Examples: Arri Alexa 65, Red Monstro 8K VV, Sony Venice 2, Phantom Flex 4K, IMAX MSM 9802, Arri 435 (1990s), Mitchell BNC (1940s), Bolex H16 (1950s)\n\n### 4. Focal Length\nQuestion: What focal length? Examples: 10mm → ultra-wide, dramatic distortion, 15mm → wide, immersive, 35mm → cinematic standard, 50mm → natural human-eye, 100mm → portrait compression, 200mm → extreme telephoto\n\n### 5. Depth of Field / Aperture\nQuestion: What depth of field / aperture? Examples: f/1.2 → dreamy shallow, creamy bokeh, f/2.8 → cinematic shallow, f/5.6 → balanced sharpness, f/11 → deep focus, f/22 → everything sharp\n\n### 6. Film Stock / Look\nQuestion: Which film stock / look? Examples: Kodak Vision3 500T 5219 (Dune), Kodak Vision3 50D 5203 (Dunkirk), Kodak Ektar 100 (Walter Mitty), Fujifilm\n\n### 7. Effects & Atmosphere\n1. Environmental Effects: Rain, snow, fog, haze, dust, smoke, light shafts\n2. Lens / Post Effects: Motion blur, bloom, lens flare, vignette, depth-of-field effects\n\n### Part 3 – Audio & Timing\n8. Audio (Optional)\n- Background Music / Tone: Genre, emotional style, intensity\n- Diegetic Sounds / Effects: Footsteps, rain, ambient environment, props\n\n9. Timing & Sequence\n- Duration per Clip / Shot: Automatic from seed or override manually\n- Transitions / Cuts: Hard cut, dissolve, fade, whip pan, match cut, jump cut\n- Temporal Notes: Slow motion, time-lapse, real-time, speed ramping\n\n### Part 4 – Seed & ID Logic\n10. Seed Tracking\n- Each video scene generates IDs:\n  - Scene Core: VID-ID-CORE-001\n  - Camera: VID-ID-CAM-001\n  - Lighting: VID-ID-LIGHT-001\n  - Color/Grading: VID-ID-COLOR-001\n  - Props / Motifs: VID-ID-PROP-001\n  - Audio / Timing: VID-ID-AUDIO-001\n- Seeds from /storybuild, /shotbuild, /imgbuild can be applied with context confirmation:\n  - \"Do you want to apply SHOT-ID-CAM-001 to video scene?\"\n  - Options: Keep context, Override manually, Discard\n\n11. Context-Aware Adaptation\n- If no context: all questions asked normally.\n- If context available: pre-fill answers with note:\n  - \"This field is prefilled from VID-ID-CAM-001. Keep context or answer manually?\"\n- After all questions: final confirmation:\n  - \"Do you want to carry forward all selected seeds and IDs to /editbuild for continuity?\"\n\n## Imgbuild – Context Aware Workflow\n### Step 0: Check for available context from ShotBuild IDs\n- If context exists, show all relevant IDs and fields\n- Ask: \"Do you want to keep, override, or manually answer for each field?\"\n\n### Step 1: Ask full MJBuild questions\n- Shot type / composition\n- Style guide (optional)\n- Camera type\n- Focal length\n- Depth of Field / Aperture\n- Film stock / look\n- Lighting style\n- Lighting technical details\n- Color grading style\n- Color technical / hex codes\n- Framing & composition\n- Character blocking\n- Texture / atmosphere / effects\n- Film emulation / grain\n\n### Step 2: AI Model Selection\n- Question: \"Which AI model should these prompts target?\"\n- Options: MidJourney, Seedream 4, Sora, Reve AI, Veo 3, Luma Ray 3, Seedance, Google Imagen 4\n\n### Step 3: Auto-Adapt Prompt Style Across Selected IDs\n- Question: \"Do you want to auto-adapt current /imgbuild choices to all selected ShotBuild IDs?\"\n- Options:\n  1. Yes, auto-adapt to all IDs\n  2. No, ask per ID individually\n  3. Skip adaptation, use only first ID\n\n### Step 4: Generate VID seeds/IDs from adapted Shot IDs\n- Map SHOT-001 → VID-001, SHOT-002 → VID-002, etc.\n- Carry all context fields to /vidbuild\n- Ask: \"Do you want to keep all prefilled fields in /vidbuild or override per video shot?\"\n\n### Step 5: Log all seeds & IDs in /lab\n- Record:\n  - Source ID\n  - Context fields used\n  - Adapted VID ID\n  - User overrides\n- Option to generate report for experience tracking and system improvement\n","size_bytes":39633},"loop/knowledge/scene_writing_and_opening_hooks.md":{"content":"# Scene Writing and Opening Hooks\n\n## How to Write a Scene\n- Write simply about what the character wants and how the scene changes the character.\n- Rewrite the scene with a deeper connection on how the character reacted to the situation.\n- Think about:\n  - Who wants what from whom?\n  - What happens if they don’t get it?\n  - Why now?\n\n## Opening Scene Types (Hooks)\n- Flashback: Movies that start with a flashback.\n- Flash Forward: Scene of the future, like someone telling the story.\n- Mid-story: Starts from the middle of the movie or action.\n- Newsreel: Start by showing news.\n- The Setting: Showing the important place where the movie takes place.\n- Crime: Start with a crime scene.\n- Direct Addressing: Breaking the fourth wall by directly talking to the audience.\n- Tragedy: Starting with the loss of something important.\n- A Day in Life: Showing daily life.\n\n## Establishing Shot\n- Wide shots shown at the start of a scene.\n\n## Other Hooks\n- Tripod shot (static).\n- Chasing sequence.\n\n## 180° Rule\n- An imaginary line between two characters.\n- The camera should not cross this line to maintain spatial continuity.\n- Ensures characters appear to be in the same place.\n","size_bytes":1178},"loop/knowledge/screenplay_conventions_and_archetypes.md":{"content":"\n# Screenplay Conventions and Archetypes\n\n## Screenplay Conventions\n- Keep it visual and in present tense.\n- Write V.O. for voice over.\n- Add \"cut to\" or \"back to\" for scene changes.\n- Use \"Montage start\" and \"Montage end\" to indicate montages.\n- Dialogues are centered.\n\n## Archetypes Appearing in The Hero’s Journey\n- **Heroes:** Central figures in stories. Everyone is the hero of his or her own myth.\n- **Shadows:** Villains, enemies, or the enemy within. Could be the repressed possibilities of the hero, or potential for evil.\n- **Mentors:** The hero’s guide or guiding principles.\n- **Herald:** The one who brings the Call to Adventure. Could be a person or an event.\n- **Threshold Guardians:** Forces that stand in the way at important turning points, including jealous enemies, professional gatekeepers, or the hero’s own fears and doubts.\n- **Shapeshifters:** Creatures like vampires or werewolves who change shape. Represents change.\n- **Tricksters:** Clowns and mischief-makers.\n- **Allies:** Characters who help the hero throughout the quest.\n- **Woman as Temptress:** Sometimes a female character offers danger to the hero.\n\n### Reflection\n- Compared all steps to my story and found that even though not all steps are followed, many are, and it inspired adding more depth in some steps.\n","size_bytes":1307},"loop/knowledge/screenwriting_day6_notes.md":{"content":"# Screenwriting Notes - Day 6\n\n## Save the Cat\n- A screenwriting concept where the protagonist does something early in the story to make them relatable or likable.\n- Establishes an emotional connection with the audience.\n- Example: In Batman Begins, Bruce Wayne decides not to kill Ra's al Ghul, shifting from vengeance to justice and hope.\n\n## Enter Late, Exit Early (Dialogue & Scene Writing)\n- Keep scenes tight and impactful.\n- Enter Late: Start scenes at the latest possible moment — when tension or action begins.\n- Exit Early: Leave the scene before everything is wrapped up — let the audience fill in the blanks or move forward with momentum.\n- In dialogue, cut out greetings, small talk, or over-explaining. Stick to the essence.\n\n## Linear vs Non-Linear Storylines\n- Linear: Events unfold in chronological order. Clear cause and effect. Easier to follow.\n- Non-Linear: Events are out of sequence (flashbacks, parallel timelines). Used to build mystery, reveal character depth, or play with audience expectations.\n\n## Exposition\n- Method of conveying backstory or world-building.\n- Good exposition feels natural and is integrated into the story.\n- Techniques: Dialogues, photographs/documents, flashbacks, environment/props.\n- Purpose: Add depth, motivation, and emotional stakes.\n\n## Writing Conflict and Character Depth\n- Highlight the ordinary and make it extraordinary.\n- Use the Unity of Opposites: Great conflict comes from characters with opposing needs, values, or goals locked in a situation where neither can back down.\n- Make characters do something that contradicts their behavior to break stereotypes.\n- Show the character’s problem and make them likable.\n- Widen the perception of the character about themselves.\n- Characters should be split between past (affecting present), present (immediate problem), and internal conflict.\n","size_bytes":1857},"loop/knowledge/screenwriting_logline_plot_exposure_notes.md":{"content":"# Screenwriting Logline, Plot Development, and Exposure Basics\n\n## 1. Logline Structure\n- Who (protagonist) wants What (goal), but must How (method) while facing Conflict (challenge) caused by Antagonist (force or character).\n- Example Template:\n  A [flawed protagonist] must [achieve goal] by [taking action], but [conflict/antagonistic force] threatens to destroy their chances.\n\n## 2. Synopsis Structure (for Selling)\n- Short, around 5–8 lines max.\n- Focus on protagonist, goal, stakes, antagonistic force, and a hook.\n- Should feel like a movie trailer in words.\n- Example Template:\n  [Name] was always [starting condition]. But when [inciting event happens], they are forced to [main goal]. Standing in their way is [antagonist/conflict]. As [stakes escalate], [name] must [what they have to change about themselves] — or lose [what’s most important].\n\n## 3. Plot Development Structure\n- Story Step:\n  - Hero Needs Something (External want and internal need)\n  - Hero Can't Get It (Obstacles, antagonistic force, failure)\n  - Hero Changes (Learns something, reinterprets world, changes their goal or self)\n\n## Exposure Basics – Simplified Notes\n- Exposure is how light or dark an image appears; it’s controlled by aperture, shutter speed, and ISO.\n\n### Aperture\n- Controls how much light enters the lens.\n- Measured in f-stops (e.g., f/1.8, f/4).\n- Lower f-stop = more light, blurrier background (shallow depth of field).\n- Higher f-stop = less light, more in focus (deep depth of field).\n\n### Shutter Speed\n- Controls how long the sensor is exposed to light.\n- Fast shutter = freezes motion.\n- Slow shutter = shows motion blur.\n\n### ISO\n- Controls the sensor’s sensitivity to light.\n- Higher ISO = brighter image, more noise.\n- Lower ISO = cleaner image, less light sensitivity.\n\n### Balancing Settings\n- These three work together: changing one affects the others.\n- Adjust them based on lighting conditions and creative intent.\n\n### Light Meter\n- Use the camera’s built-in light meter to help judge exposure.\n- Aim for balanced readings unless you want intentional over/underexposure.\n\n### Camera Modes\n- Manual (M) – full control over all settings.\n- Aperture Priority (A/Av) – you choose aperture, camera adjusts others.\n- Shutter Priority (S/Tv) – you choose shutter speed, camera adjusts others.\n- Program (P) – camera controls both but allows minor tweaks.\n\n### Tips\n- In low light, open the aperture, slow the shutter, or raise ISO.\n- Practice in different conditions to build muscle memory and confidence.\n","size_bytes":2542},"loop/knowledge/story_idea_generation_notes.md":{"content":"\n\n# Story Idea Generation Notes\n\n1. Dramatize the Normal\n- Take everyday moments and ask: “What if this was life or death?”\n- Example: A kid missing the school bus becomes a ticking clock thriller if he has to reach before 9 AM or loses his scholarship.\n- Train yourself to look at mundane events as cinematic using hyperbole, stakes, and emotion.\n\n2. Write Every Thought Related to the Idea\n- Treat your mind like a chalkboard. Don’t filter. Just dump.\n- Free-write 10–15 mins on a single idea.\n- Write fragments, emotions, images, conflicts, overheard phrases.\n- Sometimes the gold is not the first thought, but the third tangent.\n\n3. “What If”\n- Every story is a “what if” at heart.\n- Examples:\n  - What if a man forgot his memories every 24 hours but still tried to solve his brother’s murder? (Memento)\n  - What if your enemy started living in your house and nobody else could see them?\n- Try combos:\n  - What if + personal fear\n  - What if + social issue\n  - What if + emotional paradox\n\n4. Dreams\n- Raw subconscious storytelling.\n- Keep a dream journal.\n- Convert dreams into 3-act structure outlines.\n- Ask: What was the emotional core of the dream?\n\n5. Forced Connections\n- Take two unrelated things and build a story bridge.\n- Example: A broken radio + a lost dog = a boy who thinks his dog is talking to him through static.\n- Use tools like a random word generator + your mood.\n\n6. Personal Experience\n- Start from truth, then add fiction.\n- First love, friendship fallouts, family secrets, childhood regrets.\n- Ask: What was I feeling? What did I want to say but couldn’t?\n- Layer a genre filter (thriller, drama, fantasy) over your life event.\n\n7. Other People’s Experiences\n- Talk to people. Listen deeply.\n- Ask friends: What’s the most unforgettable thing that ever happened to you?\n- Browse Reddit threads (r/OffMyChest, r/TrueOffMyChest, r/AskReddit)\n- Read biographies, interviews, anonymous confessions.\n\n8. Newspaper / Current Events\n- Real-world conflict is ready-made drama.\n- Find small, weird articles tucked away in the corner.\n- Look for human interest + conflict + mystery.\n- Example: “Man builds illegal library in abandoned train station.”\n\n9. Visual Stimuli\n- One image can contain a whole world.\n- Scroll Pinterest, Instagram, AI-generated art.\n- Pause films and ask: What happened before and after this frame?\n- Save 5 images and write a short logline or scene from each.\n\n10. Brainstorming\n- Don’t stop at one idea. Go for quantity, then quality.\n- Use mind maps: write a central word (e.g., \"loss\") → branch into memories, people, visuals, sounds.\n- Try \"top 10 story ideas around a theme.\"\n- Collaborate — throw ideas around with friends. Add absurd constraints for fun.\n","size_bytes":2741},"loop/knowledge/story_structures_notes.md":{"content":"# Story Structures Notes\n\n## Harmon Story Circle\n1. You - A character in their zone of comfort\n2. Need - Wants something\n3. Go! - They enter an unfamiliar situation\n4. Struggle - They have to adapt\n5. Find - In order to get what they want\n6. Suffer - Yet they have to make a sacrifice\n7. Return - They return to their familiar situation\n8. Change - Having changed fundamentally\n\n## The Hero’s Journey - Story Structure\n\n1. The Ordinary World\n2. The Call to Adventure\n3. Refusal of the Quest\n4. Accepting the Call\n5. Entering the Unknown\n6. Supernatural Aid\n7. Talisman\n8. Allies/Helpers\n9. Tests & The Supreme Ordeal\n10. Reward and the Journey Home\n11. Master of Two Worlds / Restoring the World\n\n### The Monomyth: Not Just for Mythology\n- This structure applies broadly beyond mythology to many storytelling forms.\n","size_bytes":818},"loop/knowledge/subtext_notes.md":{"content":"\n# Subtext Notes\n\n## Character Arc Types\n- Positive Change: Character might believe in a lie, goes through confrontation, then reaches acceptance.\n- Flat Character Arc: Character already believes in truth, truth is tested, and they win and keep the truth.\n- Negative Character Arc: Character might lose positive traits, keep believing in a lie, and make decisions resulting in negative outcomes.\n\n## Subtext in Screenplay\n### Definition\n- Subtext refers to the underlying themes, emotions, or meaning beneath the spoken dialogue.\n- It’s what’s not being directly said but implied.\n- The \"hidden layer\" in a conversation or scene, where the audience picks up on unspoken tension or desires through body language, silence, and context.\n\n### Importance\n- Creates depth in dialogue and characters.\n- Makes the story feel more realistic.\n- Adds tension and complexity, engaging the audience.\n\n### Examples\n- *The Godfather* (1972): Michael Corleone’s line “It’s not personal, Sonny. It’s strictly business” hides emotional betrayal.\n- *Casablanca* (1942): Rick’s “Here’s looking at you, kid” suggests unspoken love.\n\n### How to Use Subtext\n- Character Goals and Conflicts: Characters want something but are afraid or unable to express it openly.\n- Actions Over Words: Actions like avoiding eye contact or clenching fists communicate feelings.\n- Context: Setting and situation add subtext.\n- Contradiction: Characters say things that contradict their true feelings.\n\n### Pitfalls to Avoid\n- Overuse: Too much subtext can confuse the audience.\n- Too Little: Lack of subtext makes dialogue flat.\n\n### Techniques to Enhance Subtext\n- Conflict: Characters with conflicting goals.\n- Silence: Pauses can communicate more than words.\n- Ambiguity: Unclear intentions let the audience read between the lines.\n\n### Key Takeaway\n- Subtext is the unsaid—what’s felt, implied, or hinted at but never directly spoken.\n- It turns simple dialogue into rich, multi-layered interactions that engage the audience and create deeper emotional impact.\n- Actions often imply more than words.\n","size_bytes":2089},"loop/services/config.ts":{"content":"interface ApiServiceConfig {\n  name: string; // unique service name identifier\n  baseUrl: string;\n  apiKey?: string;\n  description?: string;\n}\n\nclass ApiConfigManager {\n  private static instance: ApiConfigManager;\n  private configs: ApiServiceConfig[] = [];\n\n  private constructor() {\n    // Load configs from storage or initialize with default chromadb config\n    this.loadFromStorage();\n    if (this.configs.length === 0) {\n      const replitDomain = window.location.hostname;\n      const baseUrl = replitDomain.includes('replit.dev') \n        ? `https://${replitDomain}:8000`\n        : 'http://localhost:8000';\n      this.configs = [\n        {\n          name: 'chromadb',\n          baseUrl: baseUrl,\n          apiKey: undefined,\n          description: 'ChromaDB or compatible backend',\n        },\n      ];\n      this.saveToStorage();\n    }\n  }\n\n  static getInstance(): ApiConfigManager {\n    if (!ApiConfigManager.instance) {\n      ApiConfigManager.instance = new ApiConfigManager();\n    }\n    return ApiConfigManager.instance;\n  }\n\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem('api-services-config');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        if (Array.isArray(parsed)) {\n          this.configs = parsed;\n        } else if (typeof parsed === 'object' && parsed !== null) {\n          // Backward compatibility: single config object stored previously as 'chroma-api-config'\n          this.configs = [\n            {\n              name: 'chromadb',\n              baseUrl: parsed.baseUrl || 'http://localhost:8000',\n              apiKey: parsed.apiKey,\n              description: 'ChromaDB or compatible backend',\n            },\n          ];\n          this.saveToStorage();\n        }\n      } else {\n        // Try loading old single config key for backward compatibility\n        const oldStored = localStorage.getItem('chroma-api-config');\n        if (oldStored) {\n          const oldParsed = JSON.parse(oldStored);\n          this.configs = [\n            {\n              name: 'chromadb',\n              baseUrl: oldParsed.baseUrl || 'http://localhost:8000',\n              apiKey: oldParsed.apiKey,\n              description: 'ChromaDB or compatible backend',\n            },\n          ];\n          this.saveToStorage();\n          localStorage.removeItem('chroma-api-config');\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load API configs from storage:', error);\n    }\n  }\n\n  private saveToStorage(): void {\n    try {\n      localStorage.setItem('api-services-config', JSON.stringify(this.configs));\n    } catch (error) {\n      console.warn('Failed to save API configs to storage:', error);\n    }\n  }\n\n  getConfigs(): ApiServiceConfig[] {\n    return [...this.configs];\n  }\n\n  getConfigByName(name: string): ApiServiceConfig | undefined {\n    return this.configs.find(c => c.name === name);\n  }\n\n  updateConfigByName(name: string, newConfig: Partial<ApiServiceConfig>): void {\n    const index = this.configs.findIndex(c => c.name === name);\n    if (index !== -1) {\n      this.configs[index] = { ...this.configs[index], ...newConfig };\n    } else {\n      // Add new config if not found\n      this.configs.push({ name, baseUrl: newConfig.baseUrl || '', apiKey: newConfig.apiKey, description: newConfig.description });\n    }\n    this.saveToStorage();\n  }\n\n  addConfig(config: ApiServiceConfig): void {\n    if (!this.configs.find(c => c.name === config.name)) {\n      this.configs.push(config);\n      this.saveToStorage();\n    } else {\n      throw new Error(`Config with name '${config.name}' already exists.`);\n    }\n  }\n\n  removeConfigByName(name: string): void {\n    this.configs = this.configs.filter(c => c.name !== name);\n    this.saveToStorage();\n  }\n\n  isConfigured(name: string): boolean {\n    const config = this.getConfigByName(name);\n    if (!config) return false;\n    return config.baseUrl !== 'http://localhost:8000' || !!config.apiKey;\n  }\n}\n\nexport const apiConfig = ApiConfigManager.getInstance();\n","size_bytes":4003},"loop/services/geminiService.ts":{"content":"import { MASTER_PROMPT } from '../constants';\nimport { knowledgeBase } from './knowledgeService';\n\nconst ENV_GEMINI_API_KEY = (import.meta.env.VITE_GEMINI_API_KEY ?? '').trim();\nconst GEMINI_API_KEY = ENV_GEMINI_API_KEY;\nconst GEMINI_API_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta';\nconst GEMINI_API_URL = `${GEMINI_API_BASE_URL}/models/gemini-2.5-flash:generateContent`;\nexport const isMockMode = !GEMINI_API_KEY;\n\nexport interface GeminiResult<T> {\n  data: T | null;\n  error: string | null;\n  isMock: boolean;\n}\n\nconst createResult = <T>(data: T | null, error: string | null, isMock: boolean): GeminiResult<T> => ({\n  data,\n  error,\n  isMock\n});\n\nconst KNOWLEDGE_CONTEXT = `\n\n# Your Knowledge Base (Film Production & Storytelling)\n\n${knowledgeBase.fullContext}\n\nUse this knowledge base to inform your responses, provide expert cinematography advice, suggest story structures, and help with all aspects of film production.\n`;\n\nconst LOOP_SIGNATURE = 'Loop Studio Mock Feed';\nconst MOCK_IMAGE_PLACEHOLDER = 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAHElEQVR42mNgGAWjYBSMglEwCkbBqNgUjIJRMAAAUwABnVh6hAAAAABJRU5ErkJggg==';\n\nconst TAG_WEIGHT_THRESHOLD = 0;\n\nconst prominentTags = (tagWeights: Record<string, number>) =>\n  Object.entries(tagWeights || {})\n    .filter(([, weight]) => weight > TAG_WEIGHT_THRESHOLD)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 3)\n    .map(([tag, weight]) => `${tag} (${Math.round(weight * 100)}%)`)\n    .join(', ');\n\nconst createMockChatResponse = (\n  userMessage: string,\n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,\n  tagWeights: Record<string, number>,\n  styleRigidity: number\n): string => {\n  const lastAssistantBeat = [...conversationHistory].reverse().find(msg => msg.role === 'assistant');\n  const tagSummary = prominentTags(tagWeights);\n  const tone = styleRigidity > 50 ? 'precise and director-level exacting' : 'playful and exploratory';\n\n  return [\n    '🎬 **Loop Sandbox (Mock Mode)**',\n    'The Gemini API key is missing, so you are exploring a simulated conversation trail.',\n    lastAssistantBeat\n      ? `Last note I dropped: _\"${lastAssistantBeat.content.slice(0, 120)}${lastAssistantBeat.content.length > 120 ? '…' : ''}\"_`\n      : 'This is our first beat together in the sandbox.',\n    `Your latest cue: “${userMessage}”`,\n    tagSummary ? `Creative gravity is orbiting **${tagSummary}**.` : 'No weighted tags yet, so I am freestyling within Loop’s cinematic instincts.',\n    `I will keep the vibe ${tone}.`,\n    '',\n    'Here’s a Loop-flavored sketch you can riff on:',\n    '• Snapshot the emotional tone in one sentence.',\n    '• Suggest a cinematography move that matches the beat.',\n    '• Offer a micro-task the director could try next.',\n    '',\n    '_This answer is synthesized offline by Loop for quick iteration._'\n  ].join('\\n');\n};\n\nconst summarizeAssets = (project: {\n  assets: Array<{ id: string; type: string; name: string; content: string; tags: string[] }>;\n}) => {\n  if (!project.assets?.length) return 'No assets pinned yet—this build starts from a clean slate.';\n  return project.assets\n    .slice(0, 4)\n    .map(asset => `• **${asset.name}** (${asset.type}) — tags: ${asset.tags.join(', ') || 'none'}`)\n    .join('\\n');\n};\n\nconst createMockWorkspaceResponse = (\n  project: {\n    assets: Array<{ id: string; type: string; name: string; content: string; tags: string[] }>;\n  },\n  outputType: string,\n  tagWeights: Record<string, number>,\n  styleRigidity: number\n): string => {\n  const tagSummary = prominentTags(tagWeights);\n  const controlNote = styleRigidity > 50 ? 'tight blocking and continuity-first pacing.' : 'improvised beats and texture-forward imagery.';\n\n  return [\n    `🎞️ **${LOOP_SIGNATURE} — ${outputType.toUpperCase()} Mock Output**`,\n    'Gemini is offline, so Loop is sketching a placeholder deliverable.',\n    '',\n    'Project Snapshot:',\n    summarizeAssets(project),\n    tagSummary ? `Weighted focus: ${tagSummary}.` : 'No weighted tags supplied.',\n    `Style dial suggests ${controlNote}`,\n    '',\n    'What you get in this mock:',\n    '1. A logline-style framing of the current material.',\n    '2. A visual or narrative flourish inspired by Loop’s knowledge base.',\n    '3. A next-step action so you can move the story or design forward.',\n    '',\n    '_Swap in a Gemini API key to replace this with live generations._'\n  ].join('\\n');\n};\n\nconst createMockBuildResponse = (\n  buildType: string,\n  answers: Record<string, string>,\n  sandboxContext: Record<string, string>\n): string => {\n  const answeredKeys = Object.keys(answers || {});\n  const contextKeys = Object.keys(sandboxContext || {});\n\n  return [\n    `🧪 **${LOOP_SIGNATURE} — ${buildType.toUpperCase()} Mock Build**`,\n    'The build system is in rehearsal mode because Gemini credentials are offline.',\n    answeredKeys.length\n      ? `Captured answers: ${answeredKeys.slice(0, 5).join(', ')}${answeredKeys.length > 5 ? ', …' : ''}`\n      : 'No structured answers recorded for this build yet.',\n    contextKeys.length\n      ? `Sandbox context cues: ${contextKeys.slice(0, 5).join(', ')}${contextKeys.length > 5 ? ', …' : ''}`\n      : 'Sandbox context is empty—perfect for quick sketching.',\n    '',\n    'Mock deliverable outline:',\n    '• Reiterate the core intent of this build.',\n    '• Offer a cinematic or storytelling beat to explore.',\n    '• Suggest how to translate the idea into the next tangible asset.',\n    '',\n    '_Enable Gemini to replace this with real-time builds._'\n  ].join('\\n');\n};\n\nconst friendlyErrorMessage = (error: unknown, fallback: string) => {\n  if (error instanceof Error && error.message) {\n    return `${fallback} (${error.message})`;\n  }\n  if (typeof error === 'string') {\n    return `${fallback} (${error})`;\n  }\n  return fallback;\n};\n\n// Retry utility function\nasync function retryApiCall<T>(fn: () => Promise<T>, retries = 3, baseDelay = 1000): Promise<T> {\n  let lastError: unknown;\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await fn();\n    } catch (error: unknown) {\n      lastError = error;\n      if (i < retries - 1) {\n        const delay = baseDelay * Math.pow(2, i);\n        console.warn(`API call failed, retrying in ${delay}ms... (${i + 1}/${retries})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  throw lastError!;\n}\n\n// Types\nexport interface GenerationRequest {\n  contents: Array<{\n    parts: Array<{ text: string }>;\n  }>;\n}\n\nexport interface GenerationResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{ text: string }>;\n    };\n  }>;\n}\n\n// Mock function for sandbox chat responses\nexport const listModels = async (): Promise<any> => {\n  try {\n    const response = await fetch(`${GEMINI_API_BASE_URL}/models?key=${GEMINI_API_KEY}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`ListModels API request failed: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error: unknown) {\n    console.error('ListModels API Error:', error);\n    if (error instanceof Error) {\n      throw new Error(`Failed to list models from AI service: ${error.message}`);\n    } else {\n      throw new Error('Failed to list models from AI service: Unknown error');\n    }\n  }\n};\n\nexport const generateSandboxResponse = async (\n  userMessage: string,\n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,\n  tagWeights: Record<string, number>,\n  styleRigidity: number\n): Promise<GeminiResult<string>> => {\n  const historyText = conversationHistory\n    .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)\n    .join('\\n');\n\n  const systemPromptBase = `${MASTER_PROMPT}${KNOWLEDGE_CONTEXT}`;\n\n  let systemPrompt = `${systemPromptBase}\\n\\n`;\n  const weightedTags = Object.entries(tagWeights || {})\n    .filter(([, weight]) => weight > TAG_WEIGHT_THRESHOLD)\n    .map(([tag, weight]) => `${tag} (importance: ${Math.round(weight * 100)}%)`)\n    .join(', ');\n  if (weightedTags) {\n    systemPrompt += `Focus on these elements: ${weightedTags}. `;\n  }\n  systemPrompt += styleRigidity > 50\n    ? 'Be precise and adhere strictly to guidelines. Use knowledge base extensively. '\n    : 'Be creative and flexible in your responses. Draw inspiration from knowledge base. ';\n\n  const fullPrompt = `${systemPrompt}\\n\\nConversation History:\\n${historyText}\\n\\nUser: ${userMessage}\\nAssistant:`;\n\n  if (isMockMode) {\n    return createResult(createMockChatResponse(userMessage, conversationHistory, tagWeights, styleRigidity), null, true);\n  }\n\n  try {\n    const data = await retryApiCall(async () => {\n      const request: GenerationRequest = {\n        contents: [{\n          parts: [{ text: fullPrompt }]\n        }]\n      };\n\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API request failed: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const json: GenerationResponse = await response.json();\n      return json.candidates[0]?.content.parts[0]?.text?.trim() ?? '';\n    });\n\n    if (!data) {\n      return createResult(null, 'Gemini returned an empty response. Try adjusting your prompt and running it again.', false);\n    }\n\n    return createResult(data, null, false);\n  } catch (error: unknown) {\n    const message = friendlyErrorMessage(error, 'We hit a snag connecting to Gemini. Please verify your API key and try again.');\n    return createResult(null, message, false);\n  }\n};\n\nexport const generateFromWorkspace = async (\n  project: {\n    assets: Array<{ id: string; type: string; name: string; content: string; tags: string[] }>;\n    canvas: {\n      nodes: Array<{ id: string; assetId: string; position: { x: number; y: number }; size: number }>;\n      connections: Array<{ from: string; to: string; type: 'harmony' | 'tension'; harmonyLevel: number }>;\n    };\n  },\n  tagWeights: Record<string, number>,\n  styleRigidity: number,\n  outputType: string\n): Promise<GeminiResult<string>> => {\n  if (isMockMode) {\n    return createResult(createMockWorkspaceResponse(project, outputType, tagWeights, styleRigidity), null, true);\n  }\n\n  let systemPrompt = `${MASTER_PROMPT}${KNOWLEDGE_CONTEXT}\\n\\nGenerate ${outputType} content based on the provided project workspace. `;\n  const weightedTags = Object.entries(tagWeights || {})\n    .filter(([, weight]) => weight > TAG_WEIGHT_THRESHOLD)\n    .map(([tag, weight]) => `${tag} (importance: ${Math.round(weight * 100)}%)`)\n    .join(', ');\n  if (weightedTags) {\n    systemPrompt += `Focus on these elements: ${weightedTags}. `;\n  }\n  systemPrompt += styleRigidity > 50\n    ? 'Be precise and adhere strictly to guidelines. Use knowledge base extensively. '\n    : 'Be creative and flexible in your responses. Draw inspiration from knowledge base. ';\n\n  const assetsText = project.assets\n    .map(asset => `${asset.type}: ${asset.name} - ${asset.content} (tags: ${asset.tags.join(', ')})`)\n    .join('\\n');\n\n  const canvasText = project.canvas.connections.length\n    ? `Canvas connections: ${project.canvas.connections\n        .map(conn => {\n          const from = project.canvas.nodes.find(n => n.id === conn.from)?.assetId ?? 'unknown';\n          const to = project.canvas.nodes.find(n => n.id === conn.to)?.assetId ?? 'unknown';\n          return `${conn.type} connection from ${from} to ${to} (harmony: ${conn.harmonyLevel}%)`;\n        })\n        .join('; ')}`\n    : 'Canvas connections: none recorded yet.';\n\n  const fullPrompt = `${systemPrompt}\\n\\nProject Assets:\\n${assetsText}\\n\\nCanvas Structure:\\n${canvasText}\\n\\nGenerate ${outputType} output:`;\n\n  try {\n    const data = await retryApiCall(async () => {\n      const request: GenerationRequest = {\n        contents: [{\n          parts: [{ text: fullPrompt }]\n        }]\n      };\n\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API request failed: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const json: GenerationResponse = await response.json();\n      return json.candidates[0]?.content.parts[0]?.text?.trim() ?? '';\n    });\n\n    if (!data) {\n      return createResult(null, 'Gemini returned an empty workspace response. Please try again with refreshed inputs.', false);\n    }\n\n    return createResult(data, null, false);\n  } catch (error: unknown) {\n    const message = friendlyErrorMessage(error, 'Unable to generate from the workspace right now. Double-check your Gemini setup and retry.');\n    return createResult(null, message, false);\n  }\n};\n\nexport const runBuild = async (\n  buildType: string,\n  answers: Record<string, string>,\n  sandboxContext: Record<string, string>,\n  tagWeights: Record<string, number>,\n  styleRigidity: number\n): Promise<GeminiResult<string>> => {\n  if (isMockMode) {\n    return createResult(createMockBuildResponse(buildType, answers, sandboxContext), null, true);\n  }\n\n  let systemPrompt = `${MASTER_PROMPT}${KNOWLEDGE_CONTEXT}\\n\\nProcess the ${buildType} build with the provided answers. Use knowledge base to inform your output. `;\n  const weightedTags = Object.entries(tagWeights || {})\n    .filter(([, weight]) => weight > TAG_WEIGHT_THRESHOLD)\n    .map(([tag, weight]) => `${tag} (importance: ${Math.round(weight * 100)}%)`)\n    .join(', ');\n  if (weightedTags) {\n    systemPrompt += `Focus on these elements: ${weightedTags}. `;\n  }\n  systemPrompt += styleRigidity > 50\n    ? 'Be precise and adhere strictly to guidelines. '\n    : 'Be creative and flexible in your responses. ';\n\n  const answersText = Object.entries(answers)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join('\\n');\n  const sandboxText = Object.entries(sandboxContext)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join('\\n');\n\n  const fullPrompt = `${systemPrompt}\\n\\nAnswers:\\n${answersText}\\n\\nSandbox Context:\\n${sandboxText}\\n\\nGenerate ${buildType} output:`;\n\n  try {\n    const data = await retryApiCall(async () => {\n      const request: GenerationRequest = {\n        contents: [{\n          parts: [{ text: fullPrompt }]\n        }]\n      };\n\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API request failed: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const json: GenerationResponse = await response.json();\n      return json.candidates[0]?.content.parts[0]?.text?.trim() ?? '';\n    });\n\n    if (!data) {\n      return createResult(null, `Gemini returned an empty ${buildType} build response. Try again in a moment.`, false);\n    }\n\n    return createResult(data, null, false);\n  } catch (error: unknown) {\n    const message = friendlyErrorMessage(error, `We couldn't finish the ${buildType} build. Check your Gemini credentials and retry.`);\n    return createResult(null, message, false);\n  }\n};\n\nexport const generateImageFromPrompt = async (prompt: string): Promise<GeminiResult<string>> => {\n  const IMAGEN_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict';\n\n  if (isMockMode) {\n    const mockCaption = [\n      `🖼️ **${LOOP_SIGNATURE} — Mock Image Placeholder**`,\n      'Gemini image generation is offline, so here’s a placeholder tile for quick comps.',\n      `Prompt captured: ${prompt}`,\n      '',\n      'Swap in a valid API key to stream real renders.'\n    ].join('\\n');\n    return createResult(JSON.stringify({ prompt, notes: mockCaption, placeholder: true, image: MOCK_IMAGE_PLACEHOLDER }), null, true);\n  }\n\n  const enhancedPrompt = `${prompt}\\n\\nDraw from cinematography and visual storytelling expertise when generating this image.`;\n\n  try {\n    const base64Image = await retryApiCall(async () => {\n      const request = {\n        prompt: {\n          text: enhancedPrompt\n        },\n        sampleCount: 1,\n        outputOptions: {\n          mimeType: 'image/png'\n        }\n      };\n\n      const response = await fetch(`${IMAGEN_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Image API request failed: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      if (data.predictions && data.predictions.length > 0) {\n        return data.predictions[0].bytesBase64Encoded as string;\n      }\n      throw new Error('No image returned from model');\n    });\n\n    if (!base64Image) {\n      return createResult(null, 'Gemini returned an empty image payload. Try again with a tweaked prompt.', false);\n    }\n\n    return createResult(base64Image, null, false);\n  } catch (error: unknown) {\n    const message = friendlyErrorMessage(error, 'Image generation is unavailable right now. Confirm your Gemini configuration and retry.');\n    return createResult(null, message, false);\n  }\n};\n","size_bytes":17735},"loop/services/knowledgeService.ts":{"content":"import cameraMovementNotes from '../knowledge/camera_movement_notes.md?raw';\nimport filmTechniquesNotes from '../knowledge/film_techniques_notes.md?raw';\nimport fracturedLoopNotes from '../knowledge/fractured_loop_build_system_notes.md?raw';\nimport sceneWritingNotes from '../knowledge/scene_writing_and_opening_hooks.md?raw';\nimport screenplayConventions from '../knowledge/screenplay_conventions_and_archetypes.md?raw';\nimport screenwritingDay6 from '../knowledge/screenwriting_day6_notes.md?raw';\nimport screenwritingLogline from '../knowledge/screenwriting_logline_plot_exposure_notes.md?raw';\nimport storyIdeaGeneration from '../knowledge/story_idea_generation_notes.md?raw';\nimport storyStructuresNotes from '../knowledge/story_structures_notes.md?raw';\nimport subtextNotes from '../knowledge/subtext_notes.md?raw';\n\nexport interface KnowledgeBase {\n  cameraMovements: string[];\n  filmTechniques: string[];\n  storyStructures: string[];\n  sceneWritingTechniques: string[];\n  screenplayArchetypes: string[];\n  fullContext: string;\n}\n\nconst extractListItems = (text: string): string[] => {\n  const items: string[] = [];\n  const lines = text.split('\\n');\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (trimmed.startsWith('- ') || trimmed.startsWith('* ')) {\n      const item = trimmed.substring(2).split(':')[0].trim();\n      if (item && item.length > 0 && item.length < 50) {\n        items.push(item);\n      }\n    } else if (trimmed.startsWith('## ')) {\n      const item = trimmed.substring(3).trim();\n      if (item && item.length > 0 && item.length < 50) {\n        items.push(item);\n      }\n    }\n  }\n  \n  return [...new Set(items)];\n};\n\nexport const loadKnowledgeBase = (): KnowledgeBase => {\n  const cameraMovements = extractListItems(cameraMovementNotes);\n  const filmTechniques = extractListItems(filmTechniquesNotes);\n  const storyStructures = extractListItems(storyStructuresNotes);\n  const sceneWritingTechniques = extractListItems(sceneWritingNotes);\n  const screenplayArchetypes = extractListItems(screenplayConventions);\n\n  const fullContext = `\n# Film Production Knowledge Base\n\n## Camera Movements and Techniques\n${cameraMovementNotes}\n\n## Film Techniques\n${filmTechniquesNotes}\n\n## Story Structures\n${storyStructuresNotes}\n\n## Scene Writing and Opening Hooks\n${sceneWritingNotes}\n\n## Screenplay Conventions and Archetypes\n${screenplayConventions}\n\n## Screenwriting Day 6 Notes\n${screenwritingDay6}\n\n## Logline and Plot Exposure\n${screenwritingLogline}\n\n## Story Idea Generation\n${storyIdeaGeneration}\n\n## Subtext Notes\n${subtextNotes}\n\n## Fractured Loop Build System\n${fracturedLoopNotes}\n`;\n\n  return {\n    cameraMovements,\n    filmTechniques,\n    storyStructures,\n    sceneWritingTechniques,\n    screenplayArchetypes,\n    fullContext\n  };\n};\n\nexport const knowledgeBase = loadKnowledgeBase();\n","size_bytes":2840},"loop/services/mcpService.ts":{"content":"import { apiConfig } from './config';\n\nfunction getHeaders(serviceName: string = 'chromadb'): Record<string, string> {\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n\n  const config = apiConfig.getConfigByName(serviceName);\n  if (config?.apiKey) {\n    headers['Authorization'] = `Bearer ${config.apiKey}`;\n  }\n\n  return headers;\n}\n\nexport async function createCollection(collectionName: string, serviceName: string = 'chromadb'): Promise<void> {\n  const config = apiConfig.getConfigByName(serviceName);\n  if (!config) {\n    throw new Error(`API service '${serviceName}' not configured`);\n  }\n\n  const response = await fetch(`${config.baseUrl}/collections/${collectionName}`, {\n    method: 'POST',\n    headers: getHeaders(serviceName),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to create collection');\n  }\n}\n\nexport async function addDocuments(\n  collectionName: string,\n  documents: string[],\n  metadatas?: any[],\n  ids?: string[],\n  serviceName: string = 'chromadb'\n): Promise<void> {\n  const config = apiConfig.getConfigByName(serviceName);\n  if (!config) {\n    throw new Error(`API service '${serviceName}' not configured`);\n  }\n\n  const response = await fetch(`${config.baseUrl}/collections/${collectionName}/documents`, {\n    method: 'POST',\n    headers: getHeaders(serviceName),\n    body: JSON.stringify({\n      documents,\n      metadatas,\n      ids,\n    }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to add documents');\n  }\n}\n\nexport async function queryDocuments(\n  collectionName: string,\n  queryTexts: string[],\n  nResults: number = 10,\n  serviceName: string = 'chromadb'\n): Promise<any> {\n  const config = apiConfig.getConfigByName(serviceName);\n  if (!config) {\n    throw new Error(`API service '${serviceName}' not configured`);\n  }\n\n  const response = await fetch(`${config.baseUrl}/collections/${collectionName}/query`, {\n    method: 'POST',\n    headers: getHeaders(serviceName),\n    body: JSON.stringify({\n      query_texts: queryTexts,\n      n_results: nResults,\n    }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Failed to query documents');\n  }\n\n  return await response.json();\n}\n","size_bytes":2349},"loop/services/uiEvents.ts":{"content":"export const OPEN_KNOWLEDGE_EVENT = 'open-knowledge-base';\n\nexport const dispatchOpenKnowledgeEvent = () => {\n  window.dispatchEvent(new CustomEvent(OPEN_KNOWLEDGE_EVENT));\n};\n","size_bytes":176},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"chromadb>=1.1.0\",\n    \"fastapi>=0.118.0\",\n    \"flask>=3.1.2\",\n    \"pydantic>=2.11.10\",\n    \"uvicorn>=0.37.0\",\n]\n","size_bytes":259}},"version":1}